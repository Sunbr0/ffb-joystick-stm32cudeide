
basic-testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009070  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08009210  08009210  0000a210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095b4  080095b4  0000b684  2**0
                  CONTENTS
  4 .ARM          00000008  080095b4  080095b4  0000a5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095bc  080095bc  0000b684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095bc  080095bc  0000a5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080095c0  080095c0  0000a5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000684  20000000  080095c4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002080  20000684  08009c48  0000b684  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002704  08009c48  0000b704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b684  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135f1  00000000  00000000  0000b6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000368c  00000000  00000000  0001eca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00022338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b4f  00000000  00000000  00023248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d90  00000000  00000000  00023d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014eee  00000000  00000000  0003cb27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a28f  00000000  00000000  00051a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dbca4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041c8  00000000  00000000  000dbce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000dfeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000684 	.word	0x20000684
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080091f8 	.word	0x080091f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000688 	.word	0x20000688
 80001dc:	080091f8 	.word	0x080091f8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <console_init>:




void console_init(UART_HandleTypeDef *huart)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    g_huart = huart;
 80005a8:	4a11      	ldr	r2, [pc, #68]	@ (80005f0 <console_init+0x50>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6013      	str	r3, [r2, #0]

    // Initialize ring buffers
    ring_buffer_init(&input_rb, input_storage, sizeof(input_storage));
 80005ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005b2:	4910      	ldr	r1, [pc, #64]	@ (80005f4 <console_init+0x54>)
 80005b4:	4810      	ldr	r0, [pc, #64]	@ (80005f8 <console_init+0x58>)
 80005b6:	f000 fc53 	bl	8000e60 <ring_buffer_init>
    ring_buffer_init(&output_rb, output_storage, sizeof(output_storage));
 80005ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005be:	490f      	ldr	r1, [pc, #60]	@ (80005fc <console_init+0x5c>)
 80005c0:	480f      	ldr	r0, [pc, #60]	@ (8000600 <console_init+0x60>)
 80005c2:	f000 fc4d 	bl	8000e60 <ring_buffer_init>

    tx_in_progress = false;
 80005c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <console_init+0x64>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]

    // Start receiving characters
    HAL_UART_Receive_IT(g_huart, &rx_char, 1);
 80005cc:	4b08      	ldr	r3, [pc, #32]	@ (80005f0 <console_init+0x50>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2201      	movs	r2, #1
 80005d2:	490d      	ldr	r1, [pc, #52]	@ (8000608 <console_init+0x68>)
 80005d4:	4618      	mov	r0, r3
 80005d6:	f003 faf0 	bl	8003bba <HAL_UART_Receive_IT>

    // Print welcome message and prompt
    console_write("\r\nConsole Ready\r\n> ");
 80005da:	480c      	ldr	r0, [pc, #48]	@ (800060c <console_init+0x6c>)
 80005dc:	f000 f830 	bl	8000640 <console_write>
    line_pos = 0;
 80005e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <console_init+0x70>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200006a0 	.word	0x200006a0
 80005f4:	200006a4 	.word	0x200006a4
 80005f8:	200009a4 	.word	0x200009a4
 80005fc:	200007a4 	.word	0x200007a4
 8000600:	200009b8 	.word	0x200009b8
 8000604:	200009cc 	.word	0x200009cc
 8000608:	20000adc 	.word	0x20000adc
 800060c:	08009210 	.word	0x08009210
 8000610:	20000ad0 	.word	0x20000ad0

08000614 <console_register_commands>:

void console_register_commands(const void *cmds, size_t count)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
    g_commands = cmds;
 800061e:	4a06      	ldr	r2, [pc, #24]	@ (8000638 <console_register_commands+0x24>)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6013      	str	r3, [r2, #0]
    g_command_count = count;
 8000624:	4a05      	ldr	r2, [pc, #20]	@ (800063c <console_register_commands+0x28>)
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	6013      	str	r3, [r2, #0]
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000ad4 	.word	0x20000ad4
 800063c:	20000ad8 	.word	0x20000ad8

08000640 <console_write>:

void console_write(const char *str)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
    size_t len = strlen(str);
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff fdd3 	bl	80001f4 <strlen>
 800064e:	60f8      	str	r0, [r7, #12]
    ring_buffer_enqueue(&output_rb, (const uint8_t*)str, len);
 8000650:	68fa      	ldr	r2, [r7, #12]
 8000652:	6879      	ldr	r1, [r7, #4]
 8000654:	4808      	ldr	r0, [pc, #32]	@ (8000678 <console_write+0x38>)
 8000656:	f000 fc63 	bl	8000f20 <ring_buffer_enqueue>

    // If no transmission is in progress, start one now
    if (!tx_in_progress) {
 800065a:	4b08      	ldr	r3, [pc, #32]	@ (800067c <console_write+0x3c>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	f083 0301 	eor.w	r3, r3, #1
 8000664:	b2db      	uxtb	r3, r3
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <console_write+0x2e>
        console_start_tx();
 800066a:	f000 f823 	bl	80006b4 <console_start_tx>
    }
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200009b8 	.word	0x200009b8
 800067c:	200009cc 	.word	0x200009cc

08000680 <console_clear_screen>:

void console_clear_screen(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
    console_write("\033[2J\033[H");
 8000684:	4802      	ldr	r0, [pc, #8]	@ (8000690 <console_clear_screen+0x10>)
 8000686:	f7ff ffdb 	bl	8000640 <console_write>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	08009224 	.word	0x08009224

08000694 <cmd_clear>:

void cmd_clear(const char *args)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
    (void)args; // Ignore arguments for the clear command
    console_clear_screen();
 800069c:	f7ff fff0 	bl	8000680 <console_clear_screen>
    console_write("> "); // Reprint the prompt
 80006a0:	4803      	ldr	r0, [pc, #12]	@ (80006b0 <cmd_clear+0x1c>)
 80006a2:	f7ff ffcd 	bl	8000640 <console_write>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	0800922c 	.word	0x0800922c

080006b4 <console_start_tx>:


static void console_start_tx(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
    if (tx_in_progress) {
 80006ba:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <console_start_tx+0x5c>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d11f      	bne.n	8000704 <console_start_tx+0x50>
        return; // Already transmitting
    }

    size_t available = ring_buffer_size(&output_rb);
 80006c4:	4813      	ldr	r0, [pc, #76]	@ (8000714 <console_start_tx+0x60>)
 80006c6:	f000 fc03 	bl	8000ed0 <ring_buffer_size>
 80006ca:	6078      	str	r0, [r7, #4]
    if (available == 0) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d01a      	beq.n	8000708 <console_start_tx+0x54>
    }

    // Copy data from ring buffer into a temporary buffer for transmission
    // (If data is contiguous, you could transmit directly. Here we show a safe approach.)
    static uint8_t tx_buffer[64]; // adjust size as needed
    if (available > sizeof(tx_buffer)) {
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b40      	cmp	r3, #64	@ 0x40
 80006d6:	d901      	bls.n	80006dc <console_start_tx+0x28>
        available = sizeof(tx_buffer); // send up to tx_buffer size
 80006d8:	2340      	movs	r3, #64	@ 0x40
 80006da:	607b      	str	r3, [r7, #4]
    }

    ring_buffer_dequeue(&output_rb, tx_buffer, available);
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	490e      	ldr	r1, [pc, #56]	@ (8000718 <console_start_tx+0x64>)
 80006e0:	480c      	ldr	r0, [pc, #48]	@ (8000714 <console_start_tx+0x60>)
 80006e2:	f000 fcab 	bl	800103c <ring_buffer_dequeue>

    // Start transmit in interrupt mode
    if (HAL_UART_Transmit_IT(g_huart, tx_buffer, available) == HAL_OK) {
 80006e6:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <console_start_tx+0x68>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	b292      	uxth	r2, r2
 80006ee:	490a      	ldr	r1, [pc, #40]	@ (8000718 <console_start_tx+0x64>)
 80006f0:	4618      	mov	r0, r3
 80006f2:	f003 fa2c 	bl	8003b4e <HAL_UART_Transmit_IT>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d106      	bne.n	800070a <console_start_tx+0x56>
        tx_in_progress = true;
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <console_start_tx+0x5c>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
 8000702:	e002      	b.n	800070a <console_start_tx+0x56>
        return; // Already transmitting
 8000704:	bf00      	nop
 8000706:	e000      	b.n	800070a <console_start_tx+0x56>
        return;
 8000708:	bf00      	nop
    }
}
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200009cc 	.word	0x200009cc
 8000714:	200009b8 	.word	0x200009b8
 8000718:	20000ae0 	.word	0x20000ae0
 800071c:	200006a0 	.word	0x200006a0

08000720 <console_send_char>:


static void console_send_char(uint8_t c)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(g_huart, &c, 1, HAL_MAX_DELAY);
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <console_send_char+0x24>)
 800072c:	6818      	ldr	r0, [r3, #0]
 800072e:	1df9      	adds	r1, r7, #7
 8000730:	f04f 33ff 	mov.w	r3, #4294967295
 8000734:	2201      	movs	r2, #1
 8000736:	f003 f97f 	bl	8003a38 <HAL_UART_Transmit>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200006a0 	.word	0x200006a0

08000748 <console_task>:

void console_task(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
    while (!ring_buffer_empty(&input_rb)) {
 800074e:	e05a      	b.n	8000806 <console_task+0xbe>
        uint8_t c;

        if (ring_buffer_dequeue(&input_rb, &c, 1) == 1) {
 8000750:	1dfb      	adds	r3, r7, #7
 8000752:	2201      	movs	r2, #1
 8000754:	4619      	mov	r1, r3
 8000756:	4833      	ldr	r0, [pc, #204]	@ (8000824 <console_task+0xdc>)
 8000758:	f000 fc70 	bl	800103c <ring_buffer_dequeue>
 800075c:	4603      	mov	r3, r0
 800075e:	2b01      	cmp	r3, #1
 8000760:	d151      	bne.n	8000806 <console_task+0xbe>


            // Filter out unwanted non-printable characters except backspace, newline
            if ((c < 0x20 && c != '\r' && c != '\n' && c != 0x08 && c != 0x7F)) {
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b1f      	cmp	r3, #31
 8000766:	d80b      	bhi.n	8000780 <console_task+0x38>
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	2b0d      	cmp	r3, #13
 800076c:	d008      	beq.n	8000780 <console_task+0x38>
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b0a      	cmp	r3, #10
 8000772:	d005      	beq.n	8000780 <console_task+0x38>
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2b08      	cmp	r3, #8
 8000778:	d002      	beq.n	8000780 <console_task+0x38>
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b7f      	cmp	r3, #127	@ 0x7f
 800077e:	d13f      	bne.n	8000800 <console_task+0xb8>
                continue; // Ignore invalid characters
            }

            if (c == 0x08 || c == 0x7F) { // Backspace handling
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b08      	cmp	r3, #8
 8000784:	d002      	beq.n	800078c <console_task+0x44>
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b7f      	cmp	r3, #127	@ 0x7f
 800078a:	d10c      	bne.n	80007a6 <console_task+0x5e>
                if (line_pos > 0) {
 800078c:	4b26      	ldr	r3, [pc, #152]	@ (8000828 <console_task+0xe0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d037      	beq.n	8000804 <console_task+0xbc>
                    line_pos--;              // Remove the last character
 8000794:	4b24      	ldr	r3, [pc, #144]	@ (8000828 <console_task+0xe0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3b01      	subs	r3, #1
 800079a:	4a23      	ldr	r2, [pc, #140]	@ (8000828 <console_task+0xe0>)
 800079c:	6013      	str	r3, [r2, #0]
                    console_write("\b \b"); // Visually erase it
 800079e:	4823      	ldr	r0, [pc, #140]	@ (800082c <console_task+0xe4>)
 80007a0:	f7ff ff4e 	bl	8000640 <console_write>
                }
                continue; // Skip further processing for backspace
 80007a4:	e02e      	b.n	8000804 <console_task+0xbc>
            }

            // Echo valid characters so the user sees them
            console_send_char(c);
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ffb9 	bl	8000720 <console_send_char>

            if (c == '\r' || c == '\n') {
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b0d      	cmp	r3, #13
 80007b2:	d002      	beq.n	80007ba <console_task+0x72>
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b0a      	cmp	r3, #10
 80007b8:	d10e      	bne.n	80007d8 <console_task+0x90>
                // End of line, process command
                line_buffer[line_pos] = '\0'; // Null-terminate the command
 80007ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <console_task+0xe0>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a1c      	ldr	r2, [pc, #112]	@ (8000830 <console_task+0xe8>)
 80007c0:	2100      	movs	r1, #0
 80007c2:	54d1      	strb	r1, [r2, r3]
                console_process_line(line_buffer); // Process command
 80007c4:	481a      	ldr	r0, [pc, #104]	@ (8000830 <console_task+0xe8>)
 80007c6:	f000 f839 	bl	800083c <console_process_line>
                console_write("\r> "); // Print new prompt
 80007ca:	481a      	ldr	r0, [pc, #104]	@ (8000834 <console_task+0xec>)
 80007cc:	f7ff ff38 	bl	8000640 <console_write>
                line_pos = 0; // Reset line position
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <console_task+0xe0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	e016      	b.n	8000806 <console_task+0xbe>
            } else {
                // Add character to the command buffer
                if (line_pos < (CONSOLE_MAX_LINE_LENGTH - 1)) {
 80007d8:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <console_task+0xe0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2bfe      	cmp	r3, #254	@ 0xfe
 80007de:	d808      	bhi.n	80007f2 <console_task+0xaa>
                    line_buffer[line_pos++] = (char)c;
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <console_task+0xe0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	1c5a      	adds	r2, r3, #1
 80007e6:	4910      	ldr	r1, [pc, #64]	@ (8000828 <console_task+0xe0>)
 80007e8:	600a      	str	r2, [r1, #0]
 80007ea:	79f9      	ldrb	r1, [r7, #7]
 80007ec:	4a10      	ldr	r2, [pc, #64]	@ (8000830 <console_task+0xe8>)
 80007ee:	54d1      	strb	r1, [r2, r3]
 80007f0:	e009      	b.n	8000806 <console_task+0xbe>
                } else {
                    // Line too long, notify user and reset
                    console_write("\r\nError: line too long\r\n> ");
 80007f2:	4811      	ldr	r0, [pc, #68]	@ (8000838 <console_task+0xf0>)
 80007f4:	f7ff ff24 	bl	8000640 <console_write>
                    line_pos = 0;
 80007f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <console_task+0xe0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	e002      	b.n	8000806 <console_task+0xbe>
                continue; // Ignore invalid characters
 8000800:	bf00      	nop
 8000802:	e000      	b.n	8000806 <console_task+0xbe>
                continue; // Skip further processing for backspace
 8000804:	bf00      	nop
    while (!ring_buffer_empty(&input_rb)) {
 8000806:	4807      	ldr	r0, [pc, #28]	@ (8000824 <console_task+0xdc>)
 8000808:	f000 fb45 	bl	8000e96 <ring_buffer_empty>
 800080c:	4603      	mov	r3, r0
 800080e:	f083 0301 	eor.w	r3, r3, #1
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	d19b      	bne.n	8000750 <console_task+0x8>
                }
            }
        }
    }
}
 8000818:	bf00      	nop
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200009a4 	.word	0x200009a4
 8000828:	20000ad0 	.word	0x20000ad0
 800082c:	08009230 	.word	0x08009230
 8000830:	200009d0 	.word	0x200009d0
 8000834:	08009234 	.word	0x08009234
 8000838:	08009238 	.word	0x08009238

0800083c <console_process_line>:

static void console_process_line(char *line)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
    // Trim newline
    char *end = line + strlen(line) - 1;
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff fcd5 	bl	80001f4 <strlen>
 800084a:	4603      	mov	r3, r0
 800084c:	3b01      	subs	r3, #1
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	61fb      	str	r3, [r7, #28]
    while (end > line && (*end == '\r' || *end == '\n')) {
 8000854:	e005      	b.n	8000862 <console_process_line+0x26>
        *end = '\0';
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
        end--;
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	3b01      	subs	r3, #1
 8000860:	61fb      	str	r3, [r7, #28]
    while (end > line && (*end == '\r' || *end == '\n')) {
 8000862:	69fa      	ldr	r2, [r7, #28]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	429a      	cmp	r2, r3
 8000868:	d907      	bls.n	800087a <console_process_line+0x3e>
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b0d      	cmp	r3, #13
 8000870:	d0f1      	beq.n	8000856 <console_process_line+0x1a>
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b0a      	cmp	r3, #10
 8000878:	d0ed      	beq.n	8000856 <console_process_line+0x1a>
    }

    if (strlen(line) == 0) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d106      	bne.n	8000890 <console_process_line+0x54>
        console_write("> ");
 8000882:	482a      	ldr	r0, [pc, #168]	@ (800092c <console_process_line+0xf0>)
 8000884:	f7ff fedc 	bl	8000640 <console_write>
        line_pos = 0; // Reset here to avoid carrying over previous values
 8000888:	4b29      	ldr	r3, [pc, #164]	@ (8000930 <console_process_line+0xf4>)
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
        return;
 800088e:	e04a      	b.n	8000926 <console_process_line+0xea>
    }

    if (strcmp(line, "clear") == 0) {
 8000890:	4928      	ldr	r1, [pc, #160]	@ (8000934 <console_process_line+0xf8>)
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff fca4 	bl	80001e0 <strcmp>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d103      	bne.n	80008a6 <console_process_line+0x6a>
		cmd_clear(NULL); // Call clear command, which handles its own prompt
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff fef8 	bl	8000694 <cmd_clear>
		return;          // Avoid printing another prompt
 80008a4:	e03f      	b.n	8000926 <console_process_line+0xea>
	}

    // Parse command and args
    char *args = line;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	60fb      	str	r3, [r7, #12]
    char *cmd = strsep(&args, " ");
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	4922      	ldr	r1, [pc, #136]	@ (8000938 <console_process_line+0xfc>)
 80008b0:	4618      	mov	r0, r3
 80008b2:	f007 fffb 	bl	80088ac <strsep>
 80008b6:	6178      	str	r0, [r7, #20]

    // Cast to command array type
    const console_command_t *cmds = (const console_command_t *)g_commands;
 80008b8:	4b20      	ldr	r3, [pc, #128]	@ (800093c <console_process_line+0x100>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < g_command_count; i++) {
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
 80008c2:	e022      	b.n	800090a <console_process_line+0xce>
        if (strcmp(cmds[i].name, cmd) == 0) {
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	461a      	mov	r2, r3
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	4413      	add	r3, r2
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	6979      	ldr	r1, [r7, #20]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fc81 	bl	80001e0 <strcmp>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d10f      	bne.n	8000904 <console_process_line+0xc8>
            cmds[i].handler(args);
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	4613      	mov	r3, r2
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	4413      	add	r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	461a      	mov	r2, r3
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	4413      	add	r3, r2
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	4610      	mov	r0, r2
 80008fa:	4798      	blx	r3
            console_write("> ");
 80008fc:	480b      	ldr	r0, [pc, #44]	@ (800092c <console_process_line+0xf0>)
 80008fe:	f7ff fe9f 	bl	8000640 <console_write>
            return;
 8000902:	e010      	b.n	8000926 <console_process_line+0xea>
    for (size_t i = 0; i < g_command_count; i++) {
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	3301      	adds	r3, #1
 8000908:	61bb      	str	r3, [r7, #24]
 800090a:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <console_process_line+0x104>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	69ba      	ldr	r2, [r7, #24]
 8000910:	429a      	cmp	r2, r3
 8000912:	d3d7      	bcc.n	80008c4 <console_process_line+0x88>
        }
    }

    console_write("Unknown command: ");
 8000914:	480b      	ldr	r0, [pc, #44]	@ (8000944 <console_process_line+0x108>)
 8000916:	f7ff fe93 	bl	8000640 <console_write>
    console_write(cmd);
 800091a:	6978      	ldr	r0, [r7, #20]
 800091c:	f7ff fe90 	bl	8000640 <console_write>
    console_write("\r\n> ");
 8000920:	4809      	ldr	r0, [pc, #36]	@ (8000948 <console_process_line+0x10c>)
 8000922:	f7ff fe8d 	bl	8000640 <console_write>
}
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	0800922c 	.word	0x0800922c
 8000930:	20000ad0 	.word	0x20000ad0
 8000934:	08009254 	.word	0x08009254
 8000938:	0800925c 	.word	0x0800925c
 800093c:	20000ad4 	.word	0x20000ad4
 8000940:	20000ad8 	.word	0x20000ad8
 8000944:	08009260 	.word	0x08009260
 8000948:	08009274 	.word	0x08009274

0800094c <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
    if (huart == g_huart)
 8000954:	4b0a      	ldr	r3, [pc, #40]	@ (8000980 <HAL_UART_RxCpltCallback+0x34>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	429a      	cmp	r2, r3
 800095c:	d10b      	bne.n	8000976 <HAL_UART_RxCpltCallback+0x2a>
    {
    	ring_buffer_enqueue(&input_rb, &rx_char, 1);
 800095e:	2201      	movs	r2, #1
 8000960:	4908      	ldr	r1, [pc, #32]	@ (8000984 <HAL_UART_RxCpltCallback+0x38>)
 8000962:	4809      	ldr	r0, [pc, #36]	@ (8000988 <HAL_UART_RxCpltCallback+0x3c>)
 8000964:	f000 fadc 	bl	8000f20 <ring_buffer_enqueue>
    	HAL_UART_Receive_IT(g_huart, &rx_char, 1);
 8000968:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <HAL_UART_RxCpltCallback+0x34>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2201      	movs	r2, #1
 800096e:	4905      	ldr	r1, [pc, #20]	@ (8000984 <HAL_UART_RxCpltCallback+0x38>)
 8000970:	4618      	mov	r0, r3
 8000972:	f003 f922 	bl	8003bba <HAL_UART_Receive_IT>
    }
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200006a0 	.word	0x200006a0
 8000984:	20000adc 	.word	0x20000adc
 8000988:	200009a4 	.word	0x200009a4

0800098c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
    if (huart == g_huart) {
 8000994:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <HAL_UART_TxCpltCallback+0x30>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	429a      	cmp	r2, r3
 800099c:	d10a      	bne.n	80009b4 <HAL_UART_TxCpltCallback+0x28>
        // Transmission done
        tx_in_progress = false;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <HAL_UART_TxCpltCallback+0x34>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	701a      	strb	r2, [r3, #0]

        // If more data in the output buffer, start next transmit
        if (ring_buffer_size(&output_rb) > 0) {
 80009a4:	4807      	ldr	r0, [pc, #28]	@ (80009c4 <HAL_UART_TxCpltCallback+0x38>)
 80009a6:	f000 fa93 	bl	8000ed0 <ring_buffer_size>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_UART_TxCpltCallback+0x28>
            console_start_tx();
 80009b0:	f7ff fe80 	bl	80006b4 <console_start_tx>
        }
    }
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200006a0 	.word	0x200006a0
 80009c0:	200009cc 	.word	0x200009cc
 80009c4:	200009b8 	.word	0x200009b8

080009c8 <logger_init>:
/**
 * @brief Initialize the logger.
 *
 * Sets up the ring buffer for storing logs.
 */
void logger_init(void) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
    ring_buffer_init(&log_ring_buffer, log_buffer, sizeof(log_buffer));
 80009cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009d0:	4902      	ldr	r1, [pc, #8]	@ (80009dc <logger_init+0x14>)
 80009d2:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <logger_init+0x18>)
 80009d4:	f000 fa44 	bl	8000e60 <ring_buffer_init>
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000b34 	.word	0x20000b34
 80009e0:	20000b20 	.word	0x20000b20

080009e4 <log_message>:
 * are overwritten.
 *
 * @param format The format string (like printf).
 * @param ... Additional arguments for the format string.
 */
void log_message(const char *format, ...) {
 80009e4:	b40f      	push	{r0, r1, r2, r3}
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b0c2      	sub	sp, #264	@ 0x108
 80009ea:	af00      	add	r7, sp, #0
    char temp_buffer[LOG_ENTRY_MAX_LENGTH];
    va_list args;

    // Format the message
    va_start(args, format);
 80009ec:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80009f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80009f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80009f8:	601a      	str	r2, [r3, #0]
    vsnprintf(temp_buffer, sizeof(temp_buffer), format, args);
 80009fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80009fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000a02:	1d38      	adds	r0, r7, #4
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000a0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a0e:	f007 ff37 	bl	8008880 <vsniprintf>
    va_end(args);

    // Add to the ring buffer
    size_t message_length = strlen(temp_buffer);
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fbed 	bl	80001f4 <strlen>
 8000a1a:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    if (message_length > 0) {
 8000a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d00b      	beq.n	8000a3e <log_message+0x5a>
        ring_buffer_enqueue(&log_ring_buffer, (const uint8_t *)temp_buffer, message_length);
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4808      	ldr	r0, [pc, #32]	@ (8000a50 <log_message+0x6c>)
 8000a30:	f000 fa76 	bl	8000f20 <ring_buffer_enqueue>
        ring_buffer_enqueue(&log_ring_buffer, (const uint8_t *)"\r\n", 2); // Add newline
 8000a34:	2202      	movs	r2, #2
 8000a36:	4907      	ldr	r1, [pc, #28]	@ (8000a54 <log_message+0x70>)
 8000a38:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <log_message+0x6c>)
 8000a3a:	f000 fa71 	bl	8000f20 <ring_buffer_enqueue>
    }
}
 8000a3e:	bf00      	nop
 8000a40:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000a44:	46bd      	mov	sp, r7
 8000a46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a4a:	b004      	add	sp, #16
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000b20 	.word	0x20000b20
 8000a54:	0800927c 	.word	0x0800927c

08000a58 <cmd_log_dump>:

/**
 * @brief Dump all logs to the console.
 */
void cmd_log_dump(const char *args) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b0c4      	sub	sp, #272	@ 0x110
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a66:	6018      	str	r0, [r3, #0]
    if (ring_buffer_empty(&log_ring_buffer)) {
 8000a68:	4818      	ldr	r0, [pc, #96]	@ (8000acc <cmd_log_dump+0x74>)
 8000a6a:	f000 fa14 	bl	8000e96 <ring_buffer_empty>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d003      	beq.n	8000a7c <cmd_log_dump+0x24>
        console_write("Logger: No logs to display.\r\n");
 8000a74:	4816      	ldr	r0, [pc, #88]	@ (8000ad0 <cmd_log_dump+0x78>)
 8000a76:	f7ff fde3 	bl	8000640 <console_write>
 8000a7a:	e023      	b.n	8000ac4 <cmd_log_dump+0x6c>
        return;
    }

    console_write("Dumping logs:\r\n");
 8000a7c:	4815      	ldr	r0, [pc, #84]	@ (8000ad4 <cmd_log_dump+0x7c>)
 8000a7e:	f7ff fddf 	bl	8000640 <console_write>
    char temp_buffer[LOG_ENTRY_MAX_LENGTH];
    while (!ring_buffer_empty(&log_ring_buffer)) {
 8000a82:	e016      	b.n	8000ab2 <cmd_log_dump+0x5a>
        size_t len = ring_buffer_dequeue(&log_ring_buffer, (uint8_t *)temp_buffer, sizeof(temp_buffer) - 1);
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	22ff      	movs	r2, #255	@ 0xff
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480f      	ldr	r0, [pc, #60]	@ (8000acc <cmd_log_dump+0x74>)
 8000a8e:	f000 fad5 	bl	800103c <ring_buffer_dequeue>
 8000a92:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
        temp_buffer[len] = '\0'; // Null-terminate the string
 8000a96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a9a:	f5a3 7282 	sub.w	r2, r3, #260	@ 0x104
 8000a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000aa2:	4413      	add	r3, r2
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
        console_write(temp_buffer);
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fdc7 	bl	8000640 <console_write>
    while (!ring_buffer_empty(&log_ring_buffer)) {
 8000ab2:	4806      	ldr	r0, [pc, #24]	@ (8000acc <cmd_log_dump+0x74>)
 8000ab4:	f000 f9ef 	bl	8000e96 <ring_buffer_empty>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	f083 0301 	eor.w	r3, r3, #1
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1df      	bne.n	8000a84 <cmd_log_dump+0x2c>
    }
}
 8000ac4:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000b20 	.word	0x20000b20
 8000ad0:	08009280 	.word	0x08009280
 8000ad4:	080092a0 	.word	0x080092a0

08000ad8 <cmd_log_clear>:

/**
 * @brief Clear the log buffer.
 */
void cmd_log_clear(const char *args) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
    ring_buffer_init(&log_ring_buffer, log_buffer, sizeof(log_buffer));
 8000ae0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ae4:	4905      	ldr	r1, [pc, #20]	@ (8000afc <cmd_log_clear+0x24>)
 8000ae6:	4806      	ldr	r0, [pc, #24]	@ (8000b00 <cmd_log_clear+0x28>)
 8000ae8:	f000 f9ba 	bl	8000e60 <ring_buffer_init>
    console_write("Logger: Log buffer cleared.\r\n");
 8000aec:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <cmd_log_clear+0x2c>)
 8000aee:	f7ff fda7 	bl	8000640 <console_write>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000b34 	.word	0x20000b34
 8000b00:	20000b20 	.word	0x20000b20
 8000b04:	080092b0 	.word	0x080092b0

08000b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0c:	f000 fc9a 	bl	8001444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b10:	f000 f816 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b14:	f000 f8da 	bl	8000ccc <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b18:	f000 f8a8 	bl	8000c6c <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000b1c:	f000 f87c 	bl	8000c18 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  logger_init();
 8000b20:	f7ff ff52 	bl	80009c8 <logger_init>
  console_init(&huart2);
 8000b24:	4804      	ldr	r0, [pc, #16]	@ (8000b38 <main+0x30>)
 8000b26:	f7ff fd3b 	bl	80005a0 <console_init>
  // Register the commands we defined above
  console_register_commands(commands, sizeof(commands) / sizeof(commands[0]));
 8000b2a:	2105      	movs	r1, #5
 8000b2c:	4803      	ldr	r0, [pc, #12]	@ (8000b3c <main+0x34>)
 8000b2e:	f7ff fd71 	bl	8000614 <console_register_commands>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  console_task();
 8000b32:	f7ff fe09 	bl	8000748 <console_task>
 8000b36:	e7fc      	b.n	8000b32 <main+0x2a>
 8000b38:	20001b34 	.word	0x20001b34
 8000b3c:	0800952c 	.word	0x0800952c

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b094      	sub	sp, #80	@ 0x50
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0320 	add.w	r3, r7, #32
 8000b4a:	2230      	movs	r2, #48	@ 0x30
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f007 fea4 	bl	800889c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	4b29      	ldr	r3, [pc, #164]	@ (8000c10 <SystemClock_Config+0xd0>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6c:	4a28      	ldr	r2, [pc, #160]	@ (8000c10 <SystemClock_Config+0xd0>)
 8000b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b74:	4b26      	ldr	r3, [pc, #152]	@ (8000c10 <SystemClock_Config+0xd0>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b80:	2300      	movs	r3, #0
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	4b23      	ldr	r3, [pc, #140]	@ (8000c14 <SystemClock_Config+0xd4>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b8c:	4a21      	ldr	r2, [pc, #132]	@ (8000c14 <SystemClock_Config+0xd4>)
 8000b8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <SystemClock_Config+0xd4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000baa:	2302      	movs	r3, #2
 8000bac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bb4:	2308      	movs	r3, #8
 8000bb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bb8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000bbc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bc2:	2307      	movs	r3, #7
 8000bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc6:	f107 0320 	add.w	r3, r7, #32
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f002 fa4c 	bl	8003068 <HAL_RCC_OscConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bd6:	f000 f93d 	bl	8000e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bda:	230f      	movs	r3, #15
 8000bdc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bde:	2302      	movs	r3, #2
 8000be0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f002 fcae 	bl	8003558 <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c02:	f000 f927 	bl	8000e54 <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3750      	adds	r7, #80	@ 0x50
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40007000 	.word	0x40007000

08000c18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	@ (8000c68 <MX_USART2_UART_Init+0x50>)
 8000c20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c3e:	220c      	movs	r2, #12
 8000c40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c42:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c4e:	4805      	ldr	r0, [pc, #20]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c50:	f002 fea2 	bl	8003998 <HAL_UART_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c5a:	f000 f8fb 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20001b34 	.word	0x20001b34
 8000c68:	40004400 	.word	0x40004400

08000c6c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c70:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c72:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000c78:	4b13      	ldr	r3, [pc, #76]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c7e:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c80:	2202      	movs	r2, #2
 8000c82:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c84:	4b10      	ldr	r3, [pc, #64]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c90:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c96:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cae:	4806      	ldr	r0, [pc, #24]	@ (8000cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cb0:	f000 ff9f 	bl	8001bf2 <HAL_PCD_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000cba:	f000 f8cb 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */
  MX_USB_DEVICE_Init();
 8000cbe:	f007 f8f1 	bl	8007ea4 <MX_USB_DEVICE_Init>
  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20001b7c 	.word	0x20001b7c

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	@ 0x28
 8000cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d9c <MX_GPIO_Init+0xd0>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a2c      	ldr	r2, [pc, #176]	@ (8000d9c <MX_GPIO_Init+0xd0>)
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d9c <MX_GPIO_Init+0xd0>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b26      	ldr	r3, [pc, #152]	@ (8000d9c <MX_GPIO_Init+0xd0>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a25      	ldr	r2, [pc, #148]	@ (8000d9c <MX_GPIO_Init+0xd0>)
 8000d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b23      	ldr	r3, [pc, #140]	@ (8000d9c <MX_GPIO_Init+0xd0>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d9c <MX_GPIO_Init+0xd0>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a1e      	ldr	r2, [pc, #120]	@ (8000d9c <MX_GPIO_Init+0xd0>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d9c <MX_GPIO_Init+0xd0>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <MX_GPIO_Init+0xd0>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a17      	ldr	r2, [pc, #92]	@ (8000d9c <MX_GPIO_Init+0xd0>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <MX_GPIO_Init+0xd0>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2120      	movs	r1, #32
 8000d56:	4812      	ldr	r0, [pc, #72]	@ (8000da0 <MX_GPIO_Init+0xd4>)
 8000d58:	f000 ff32 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d62:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	480c      	ldr	r0, [pc, #48]	@ (8000da4 <MX_GPIO_Init+0xd8>)
 8000d74:	f000 fda0 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d78:	2320      	movs	r3, #32
 8000d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4804      	ldr	r0, [pc, #16]	@ (8000da0 <MX_GPIO_Init+0xd4>)
 8000d90:	f000 fd92 	bl	80018b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d94:	bf00      	nop
 8000d96:	3728      	adds	r7, #40	@ 0x28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020000 	.word	0x40020000
 8000da4:	40020800 	.word	0x40020800

08000da8 <cmd_help>:

/* USER CODE BEGIN 4 */
// Example command: 'help'
static void cmd_help(const char *args)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    (void)args;
    console_write("Available commands:\r\n");
 8000db0:	4817      	ldr	r0, [pc, #92]	@ (8000e10 <cmd_help+0x68>)
 8000db2:	f7ff fc45 	bl	8000640 <console_write>
    for (size_t i = 0; i < command_count; i++) {
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	e01f      	b.n	8000dfc <cmd_help+0x54>
        console_write(commands[i].name);
 8000dbc:	4915      	ldr	r1, [pc, #84]	@ (8000e14 <cmd_help+0x6c>)
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	440b      	add	r3, r1
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fc37 	bl	8000640 <console_write>
        console_write(": ");
 8000dd2:	4811      	ldr	r0, [pc, #68]	@ (8000e18 <cmd_help+0x70>)
 8000dd4:	f7ff fc34 	bl	8000640 <console_write>
        console_write(commands[i].help);
 8000dd8:	490e      	ldr	r1, [pc, #56]	@ (8000e14 <cmd_help+0x6c>)
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4413      	add	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	440b      	add	r3, r1
 8000de6:	3308      	adds	r3, #8
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fc28 	bl	8000640 <console_write>
        console_write("\r\n");
 8000df0:	480a      	ldr	r0, [pc, #40]	@ (8000e1c <cmd_help+0x74>)
 8000df2:	f7ff fc25 	bl	8000640 <console_write>
    for (size_t i = 0; i < command_count; i++) {
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <cmd_help+0x78>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d3da      	bcc.n	8000dbc <cmd_help+0x14>
    }
}
 8000e06:	bf00      	nop
 8000e08:	bf00      	nop
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	08009378 	.word	0x08009378
 8000e14:	0800952c 	.word	0x0800952c
 8000e18:	08009390 	.word	0x08009390
 8000e1c:	08009394 	.word	0x08009394
 8000e20:	20000000 	.word	0x20000000

08000e24 <cmd_info>:

// Example command: 'info'
static void cmd_info(const char *args)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
    (void)args;
    console_write("STM32 Console v1.0\r\n");
 8000e2c:	4806      	ldr	r0, [pc, #24]	@ (8000e48 <cmd_info+0x24>)
 8000e2e:	f7ff fc07 	bl	8000640 <console_write>
    console_write("Build date/time: " __DATE__ " " __TIME__ "\r\n");
 8000e32:	4806      	ldr	r0, [pc, #24]	@ (8000e4c <cmd_info+0x28>)
 8000e34:	f7ff fc04 	bl	8000640 <console_write>
    console_write("MCU: STM32F4xx\r\n");
 8000e38:	4805      	ldr	r0, [pc, #20]	@ (8000e50 <cmd_info+0x2c>)
 8000e3a:	f7ff fc01 	bl	8000640 <console_write>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	08009398 	.word	0x08009398
 8000e4c:	080093b0 	.word	0x080093b0
 8000e50:	080093d8 	.word	0x080093d8

08000e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e58:	b672      	cpsid	i
}
 8000e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <Error_Handler+0x8>

08000e60 <ring_buffer_init>:



#include "ring_buffer.h"

void ring_buffer_init(ring_buffer_t *rb, uint8_t *buf, size_t capacity) {
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
    rb->buffer = buf;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	601a      	str	r2, [r3, #0]
    rb->capacity = capacity;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	605a      	str	r2, [r3, #4]
    rb->head = 0;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
    rb->tail = 0;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
    rb->full = false;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2200      	movs	r2, #0
 8000e88:	741a      	strb	r2, [r3, #16]
}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <ring_buffer_empty>:

bool ring_buffer_empty(const ring_buffer_t *rb) {
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
    // Buffer is empty if head == tail and !full
    return (!rb->full && (rb->head == rb->tail));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	7c1b      	ldrb	r3, [r3, #16]
 8000ea2:	f083 0301 	eor.w	r3, r3, #1
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d007      	beq.n	8000ebc <ring_buffer_empty+0x26>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d101      	bne.n	8000ebc <ring_buffer_empty+0x26>
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e000      	b.n	8000ebe <ring_buffer_empty+0x28>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	b2db      	uxtb	r3, r3
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <ring_buffer_size>:

bool ring_buffer_full(const ring_buffer_t *rb) {
    return rb->full;
}

size_t ring_buffer_size(const ring_buffer_t *rb) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
    if (!rb->full) {
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7c1b      	ldrb	r3, [r3, #16]
 8000edc:	f083 0301 	eor.w	r3, r3, #1
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d014      	beq.n	8000f10 <ring_buffer_size+0x40>
        if (rb->tail >= rb->head) {
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d305      	bcc.n	8000efe <ring_buffer_size+0x2e>
            return (rb->tail - rb->head);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	e00a      	b.n	8000f14 <ring_buffer_size+0x44>
        } else {
            return (rb->capacity - rb->head + rb->tail);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	1ad2      	subs	r2, r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	e001      	b.n	8000f14 <ring_buffer_size+0x44>
        }
    } else {
        return rb->capacity;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
    }
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <ring_buffer_enqueue>:

size_t ring_buffer_enqueue(ring_buffer_t *rb, const uint8_t *data, size_t len) {
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b08b      	sub	sp, #44	@ 0x2c
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
    if (len == 0) return 0;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <ring_buffer_enqueue+0x16>
 8000f32:	2300      	movs	r3, #0
 8000f34:	e07e      	b.n	8001034 <ring_buffer_enqueue+0x114>

    size_t free_space = rb->capacity - ring_buffer_size(rb);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	685c      	ldr	r4, [r3, #4]
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f7ff ffc8 	bl	8000ed0 <ring_buffer_size>
 8000f40:	4603      	mov	r3, r0
 8000f42:	1ae3      	subs	r3, r4, r3
 8000f44:	61bb      	str	r3, [r7, #24]

    // If full, no space available
    if (free_space == 0) {
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <ring_buffer_enqueue+0x30>
        return 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e071      	b.n	8001034 <ring_buffer_enqueue+0x114>
    }

    // Number of bytes we can actually write
    if (len > free_space) {
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d901      	bls.n	8000f5c <ring_buffer_enqueue+0x3c>
        len = free_space;
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	607b      	str	r3, [r7, #4]
    }

    // Write data in two parts if it wraps around
    size_t space_to_end = rb->capacity - rb->tail;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	617b      	str	r3, [r7, #20]
    if (len > space_to_end) {
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d932      	bls.n	8000fd6 <ring_buffer_enqueue+0xb6>
        // Write till end of buffer
        for (size_t i = 0; i < space_to_end; i++) {
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f74:	e00e      	b.n	8000f94 <ring_buffer_enqueue+0x74>
            rb->buffer[rb->tail + i] = data[i];
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f7a:	441a      	add	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6819      	ldr	r1, [r3, #0]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	68d8      	ldr	r0, [r3, #12]
 8000f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f86:	4403      	add	r3, r0
 8000f88:	440b      	add	r3, r1
 8000f8a:	7812      	ldrb	r2, [r2, #0]
 8000f8c:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < space_to_end; i++) {
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f90:	3301      	adds	r3, #1
 8000f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d3ec      	bcc.n	8000f76 <ring_buffer_enqueue+0x56>
        }
        // Wrap around
        size_t remaining = len - space_to_end;
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	613b      	str	r3, [r7, #16]
        for (size_t i = 0; i < remaining; i++) {
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	623b      	str	r3, [r7, #32]
 8000fa8:	e00d      	b.n	8000fc6 <ring_buffer_enqueue+0xa6>
            rb->buffer[i] = data[space_to_end + i];
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	4413      	add	r3, r2
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	441a      	add	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	6819      	ldr	r1, [r3, #0]
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	440b      	add	r3, r1
 8000fbc:	7812      	ldrb	r2, [r2, #0]
 8000fbe:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < remaining; i++) {
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	623b      	str	r3, [r7, #32]
 8000fc6:	6a3a      	ldr	r2, [r7, #32]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d3ed      	bcc.n	8000faa <ring_buffer_enqueue+0x8a>
        }
        rb->tail = remaining;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	e022      	b.n	800101c <ring_buffer_enqueue+0xfc>
    } else {
        // Fits in one go
        for (size_t i = 0; i < len; i++) {
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
 8000fda:	e00e      	b.n	8000ffa <ring_buffer_enqueue+0xda>
            rb->buffer[rb->tail + i] = data[i];
 8000fdc:	68ba      	ldr	r2, [r7, #8]
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	441a      	add	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6819      	ldr	r1, [r3, #0]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	68d8      	ldr	r0, [r3, #12]
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	4403      	add	r3, r0
 8000fee:	440b      	add	r3, r1
 8000ff0:	7812      	ldrb	r2, [r2, #0]
 8000ff2:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < len; i++) {
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	61fb      	str	r3, [r7, #28]
 8000ffa:	69fa      	ldr	r2, [r7, #28]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d3ec      	bcc.n	8000fdc <ring_buffer_enqueue+0xbc>
        }
        rb->tail = (rb->tail + len) % rb->capacity;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	68da      	ldr	r2, [r3, #12]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	6852      	ldr	r2, [r2, #4]
 800100e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001012:	fb01 f202 	mul.w	r2, r1, r2
 8001016:	1a9a      	subs	r2, r3, r2
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	60da      	str	r2, [r3, #12]
    }

    // Update full flag
    rb->full = (rb->tail == rb->head);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	429a      	cmp	r2, r3
 8001026:	bf0c      	ite	eq
 8001028:	2301      	moveq	r3, #1
 800102a:	2300      	movne	r3, #0
 800102c:	b2da      	uxtb	r2, r3
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	741a      	strb	r2, [r3, #16]

    return len;
 8001032:	687b      	ldr	r3, [r7, #4]
}
 8001034:	4618      	mov	r0, r3
 8001036:	372c      	adds	r7, #44	@ 0x2c
 8001038:	46bd      	mov	sp, r7
 800103a:	bd90      	pop	{r4, r7, pc}

0800103c <ring_buffer_dequeue>:

size_t ring_buffer_dequeue(ring_buffer_t *rb, uint8_t *data, size_t len) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	@ 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
    if (len == 0) return 0;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <ring_buffer_dequeue+0x16>
 800104e:	2300      	movs	r3, #0
 8001050:	e072      	b.n	8001138 <ring_buffer_dequeue+0xfc>

    size_t data_available = ring_buffer_size(rb);
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f7ff ff3c 	bl	8000ed0 <ring_buffer_size>
 8001058:	61b8      	str	r0, [r7, #24]
    if (data_available == 0) {
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <ring_buffer_dequeue+0x28>
        // Buffer empty
        return 0;
 8001060:	2300      	movs	r3, #0
 8001062:	e069      	b.n	8001138 <ring_buffer_dequeue+0xfc>
    }

    // Number of bytes we can actually read
    if (len > data_available) {
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	429a      	cmp	r2, r3
 800106a:	d901      	bls.n	8001070 <ring_buffer_dequeue+0x34>
        len = data_available;
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	607b      	str	r3, [r7, #4]
    }

    // Read data in two parts if it wraps
    size_t space_to_end = rb->capacity - rb->head;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	617b      	str	r3, [r7, #20]
    if (len > space_to_end) {
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	429a      	cmp	r2, r3
 8001082:	d932      	bls.n	80010ea <ring_buffer_dequeue+0xae>
        // Read till end of buffer
        for (size_t i = 0; i < space_to_end; i++) {
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
 8001088:	e00e      	b.n	80010a8 <ring_buffer_dequeue+0x6c>
            data[i] = rb->buffer[rb->head + i];
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6899      	ldr	r1, [r3, #8]
 8001092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001094:	440b      	add	r3, r1
 8001096:	441a      	add	r2, r3
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109c:	440b      	add	r3, r1
 800109e:	7812      	ldrb	r2, [r2, #0]
 80010a0:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < space_to_end; i++) {
 80010a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a4:	3301      	adds	r3, #1
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80010a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d3ec      	bcc.n	800108a <ring_buffer_dequeue+0x4e>
        }
        // Wrap around
        size_t remaining = len - space_to_end;
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	613b      	str	r3, [r7, #16]
        for (size_t i = 0; i < remaining; i++) {
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
 80010bc:	e00d      	b.n	80010da <ring_buffer_dequeue+0x9e>
            data[space_to_end + i] = rb->buffer[i];
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	6a3b      	ldr	r3, [r7, #32]
 80010c4:	441a      	add	r2, r3
 80010c6:	6979      	ldr	r1, [r7, #20]
 80010c8:	6a3b      	ldr	r3, [r7, #32]
 80010ca:	440b      	add	r3, r1
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	440b      	add	r3, r1
 80010d0:	7812      	ldrb	r2, [r2, #0]
 80010d2:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < remaining; i++) {
 80010d4:	6a3b      	ldr	r3, [r7, #32]
 80010d6:	3301      	adds	r3, #1
 80010d8:	623b      	str	r3, [r7, #32]
 80010da:	6a3a      	ldr	r2, [r7, #32]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d3ed      	bcc.n	80010be <ring_buffer_dequeue+0x82>
        }
        rb->head = remaining;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	e022      	b.n	8001130 <ring_buffer_dequeue+0xf4>
    } else {
        // Fits in one go
        for (size_t i = 0; i < len; i++) {
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
 80010ee:	e00e      	b.n	800110e <ring_buffer_dequeue+0xd2>
            data[i] = rb->buffer[rb->head + i];
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6899      	ldr	r1, [r3, #8]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	440b      	add	r3, r1
 80010fc:	441a      	add	r2, r3
 80010fe:	68b9      	ldr	r1, [r7, #8]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	440b      	add	r3, r1
 8001104:	7812      	ldrb	r2, [r2, #0]
 8001106:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < len; i++) {
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	3301      	adds	r3, #1
 800110c:	61fb      	str	r3, [r7, #28]
 800110e:	69fa      	ldr	r2, [r7, #28]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	429a      	cmp	r2, r3
 8001114:	d3ec      	bcc.n	80010f0 <ring_buffer_dequeue+0xb4>
        }
        rb->head = (rb->head + len) % rb->capacity;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	6852      	ldr	r2, [r2, #4]
 8001122:	fbb3 f1f2 	udiv	r1, r3, r2
 8001126:	fb01 f202 	mul.w	r2, r1, r2
 800112a:	1a9a      	subs	r2, r3, r2
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	609a      	str	r2, [r3, #8]
    }

    rb->full = false; // Once we read, buffer cannot be full
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	741a      	strb	r2, [r3, #16]

    return len;
 8001136:	687b      	ldr	r3, [r7, #4]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3728      	adds	r7, #40	@ 0x28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <HAL_MspInit+0x4c>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	4a0f      	ldr	r2, [pc, #60]	@ (800118c <HAL_MspInit+0x4c>)
 8001150:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001154:	6453      	str	r3, [r2, #68]	@ 0x44
 8001156:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <HAL_MspInit+0x4c>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	4b09      	ldr	r3, [pc, #36]	@ (800118c <HAL_MspInit+0x4c>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116a:	4a08      	ldr	r2, [pc, #32]	@ (800118c <HAL_MspInit+0x4c>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001170:	6413      	str	r3, [r2, #64]	@ 0x40
 8001172:	4b06      	ldr	r3, [pc, #24]	@ (800118c <HAL_MspInit+0x4c>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800117e:	2005      	movs	r0, #5
 8001180:	f000 fac6 	bl	8001710 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40023800 	.word	0x40023800

08001190 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	@ 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001224 <HAL_UART_MspInit+0x94>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d133      	bne.n	800121a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <HAL_UART_MspInit+0x98>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001228 <HAL_UART_MspInit+0x98>)
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c2:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <HAL_UART_MspInit+0x98>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <HAL_UART_MspInit+0x98>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a14      	ldr	r2, [pc, #80]	@ (8001228 <HAL_UART_MspInit+0x98>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <HAL_UART_MspInit+0x98>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011ea:	230c      	movs	r3, #12
 80011ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011fa:	2307      	movs	r3, #7
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	4809      	ldr	r0, [pc, #36]	@ (800122c <HAL_UART_MspInit+0x9c>)
 8001206:	f000 fb57 	bl	80018b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2102      	movs	r1, #2
 800120e:	2026      	movs	r0, #38	@ 0x26
 8001210:	f000 fa89 	bl	8001726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001214:	2026      	movs	r0, #38	@ 0x26
 8001216:	f000 faa2 	bl	800175e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	@ 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40004400 	.word	0x40004400
 8001228:	40023800 	.word	0x40023800
 800122c:	40020000 	.word	0x40020000

08001230 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	@ 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001250:	d13a      	bne.n	80012c8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	4b1e      	ldr	r3, [pc, #120]	@ (80012d0 <HAL_PCD_MspInit+0xa0>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a1d      	ldr	r2, [pc, #116]	@ (80012d0 <HAL_PCD_MspInit+0xa0>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <HAL_PCD_MspInit+0xa0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800126e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001280:	230a      	movs	r3, #10
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	4812      	ldr	r0, [pc, #72]	@ (80012d4 <HAL_PCD_MspInit+0xa4>)
 800128c:	f000 fb14 	bl	80018b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001290:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <HAL_PCD_MspInit+0xa0>)
 8001292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001294:	4a0e      	ldr	r2, [pc, #56]	@ (80012d0 <HAL_PCD_MspInit+0xa0>)
 8001296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800129a:	6353      	str	r3, [r2, #52]	@ 0x34
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <HAL_PCD_MspInit+0xa0>)
 80012a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a4:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <HAL_PCD_MspInit+0xa0>)
 80012a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ac:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <HAL_PCD_MspInit+0xa0>)
 80012ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2100      	movs	r1, #0
 80012bc:	2043      	movs	r0, #67	@ 0x43
 80012be:	f000 fa32 	bl	8001726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80012c2:	2043      	movs	r0, #67	@ 0x43
 80012c4:	f000 fa4b 	bl	800175e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	@ 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020000 	.word	0x40020000

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <NMI_Handler+0x4>

080012e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <HardFault_Handler+0x4>

080012e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <MemManage_Handler+0x4>

080012f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <BusFault_Handler+0x4>

080012f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <UsageFault_Handler+0x4>

08001300 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132e:	f000 f8db 	bl	80014e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800133c:	4802      	ldr	r0, [pc, #8]	@ (8001348 <USART2_IRQHandler+0x10>)
 800133e:	f002 fc61 	bl	8003c04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20001b34 	.word	0x20001b34

0800134c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001350:	4802      	ldr	r0, [pc, #8]	@ (800135c <OTG_FS_IRQHandler+0x10>)
 8001352:	f000 fd92 	bl	8001e7a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20001b7c 	.word	0x20001b7c

08001360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001368:	4a14      	ldr	r2, [pc, #80]	@ (80013bc <_sbrk+0x5c>)
 800136a:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <_sbrk+0x60>)
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001374:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <_sbrk+0x64>)
 800137e:	4a12      	ldr	r2, [pc, #72]	@ (80013c8 <_sbrk+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001382:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	429a      	cmp	r2, r3
 800138e:	d207      	bcs.n	80013a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001390:	f007 faba 	bl	8008908 <__errno>
 8001394:	4603      	mov	r3, r0
 8001396:	220c      	movs	r2, #12
 8001398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	e009      	b.n	80013b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a6:	4b07      	ldr	r3, [pc, #28]	@ (80013c4 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	4a05      	ldr	r2, [pc, #20]	@ (80013c4 <_sbrk+0x64>)
 80013b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b2:	68fb      	ldr	r3, [r7, #12]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20018000 	.word	0x20018000
 80013c0:	00000400 	.word	0x00000400
 80013c4:	20002060 	.word	0x20002060
 80013c8:	20002708 	.word	0x20002708

080013cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <SystemInit+0x20>)
 80013d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013d6:	4a05      	ldr	r2, [pc, #20]	@ (80013ec <SystemInit+0x20>)
 80013d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <Reset_Handler>:
 80013f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001428 <LoopFillZerobss+0xe>
 80013f4:	f7ff ffea 	bl	80013cc <SystemInit>
 80013f8:	480c      	ldr	r0, [pc, #48]	@ (800142c <LoopFillZerobss+0x12>)
 80013fa:	490d      	ldr	r1, [pc, #52]	@ (8001430 <LoopFillZerobss+0x16>)
 80013fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001434 <LoopFillZerobss+0x1a>)
 80013fe:	2300      	movs	r3, #0
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:
 8001402:	58d4      	ldr	r4, [r2, r3]
 8001404:	50c4      	str	r4, [r0, r3]
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:
 8001408:	18c4      	adds	r4, r0, r3
 800140a:	428c      	cmp	r4, r1
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
 800140e:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <LoopFillZerobss+0x1e>)
 8001410:	4c0a      	ldr	r4, [pc, #40]	@ (800143c <LoopFillZerobss+0x22>)
 8001412:	2300      	movs	r3, #0
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:
 800141a:	42a2      	cmp	r2, r4
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>
 800141e:	f007 fa79 	bl	8008914 <__libc_init_array>
 8001422:	f7ff fb71 	bl	8000b08 <main>
 8001426:	4770      	bx	lr
 8001428:	20018000 	.word	0x20018000
 800142c:	20000000 	.word	0x20000000
 8001430:	20000684 	.word	0x20000684
 8001434:	080095c4 	.word	0x080095c4
 8001438:	20000684 	.word	0x20000684
 800143c:	20002704 	.word	0x20002704

08001440 <ADC_IRQHandler>:
 8001440:	e7fe      	b.n	8001440 <ADC_IRQHandler>
	...

08001444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001448:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <HAL_Init+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0d      	ldr	r2, [pc, #52]	@ (8001484 <HAL_Init+0x40>)
 800144e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001452:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001454:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <HAL_Init+0x40>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0a      	ldr	r2, [pc, #40]	@ (8001484 <HAL_Init+0x40>)
 800145a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800145e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001460:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a07      	ldr	r2, [pc, #28]	@ (8001484 <HAL_Init+0x40>)
 8001466:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800146a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146c:	2003      	movs	r0, #3
 800146e:	f000 f94f 	bl	8001710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001472:	2000      	movs	r0, #0
 8001474:	f000 f808 	bl	8001488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001478:	f7ff fe62 	bl	8001140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023c00 	.word	0x40023c00

08001488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001490:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <HAL_InitTick+0x54>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <HAL_InitTick+0x58>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149e:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f967 	bl	800177a <HAL_SYSTICK_Config>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00e      	b.n	80014d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b0f      	cmp	r3, #15
 80014ba:	d80a      	bhi.n	80014d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014bc:	2200      	movs	r2, #0
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	f000 f92f 	bl	8001726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c8:	4a06      	ldr	r2, [pc, #24]	@ (80014e4 <HAL_InitTick+0x5c>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e000      	b.n	80014d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000004 	.word	0x20000004
 80014e0:	2000000c 	.word	0x2000000c
 80014e4:	20000008 	.word	0x20000008

080014e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_IncTick+0x20>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_IncTick+0x24>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a04      	ldr	r2, [pc, #16]	@ (800150c <HAL_IncTick+0x24>)
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	2000000c 	.word	0x2000000c
 800150c:	20002064 	.word	0x20002064

08001510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return uwTick;
 8001514:	4b03      	ldr	r3, [pc, #12]	@ (8001524 <HAL_GetTick+0x14>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20002064 	.word	0x20002064

08001528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001530:	f7ff ffee 	bl	8001510 <HAL_GetTick>
 8001534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001540:	d005      	beq.n	800154e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001542:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <HAL_Delay+0x44>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4413      	add	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800154e:	bf00      	nop
 8001550:	f7ff ffde 	bl	8001510 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	429a      	cmp	r2, r3
 800155e:	d8f7      	bhi.n	8001550 <HAL_Delay+0x28>
  {
  }
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	2000000c 	.word	0x2000000c

08001570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800158c:	4013      	ands	r3, r2
 800158e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001598:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800159c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a2:	4a04      	ldr	r2, [pc, #16]	@ (80015b4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	60d3      	str	r3, [r2, #12]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015bc:	4b04      	ldr	r3, [pc, #16]	@ (80015d0 <__NVIC_GetPriorityGrouping+0x18>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	f003 0307 	and.w	r3, r3, #7
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	db0b      	blt.n	80015fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	f003 021f 	and.w	r2, r3, #31
 80015ec:	4907      	ldr	r1, [pc, #28]	@ (800160c <__NVIC_EnableIRQ+0x38>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	095b      	lsrs	r3, r3, #5
 80015f4:	2001      	movs	r0, #1
 80015f6:	fa00 f202 	lsl.w	r2, r0, r2
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000e100 	.word	0xe000e100

08001610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	db0a      	blt.n	800163a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	490c      	ldr	r1, [pc, #48]	@ (800165c <__NVIC_SetPriority+0x4c>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	0112      	lsls	r2, r2, #4
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	440b      	add	r3, r1
 8001634:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001638:	e00a      	b.n	8001650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4908      	ldr	r1, [pc, #32]	@ (8001660 <__NVIC_SetPriority+0x50>)
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	3b04      	subs	r3, #4
 8001648:	0112      	lsls	r2, r2, #4
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	440b      	add	r3, r1
 800164e:	761a      	strb	r2, [r3, #24]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000e100 	.word	0xe000e100
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	@ 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f1c3 0307 	rsb	r3, r3, #7
 800167e:	2b04      	cmp	r3, #4
 8001680:	bf28      	it	cs
 8001682:	2304      	movcs	r3, #4
 8001684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3304      	adds	r3, #4
 800168a:	2b06      	cmp	r3, #6
 800168c:	d902      	bls.n	8001694 <NVIC_EncodePriority+0x30>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3b03      	subs	r3, #3
 8001692:	e000      	b.n	8001696 <NVIC_EncodePriority+0x32>
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	f04f 32ff 	mov.w	r2, #4294967295
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	401a      	ands	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	43d9      	mvns	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	4313      	orrs	r3, r2
         );
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3724      	adds	r7, #36	@ 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016dc:	d301      	bcc.n	80016e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016de:	2301      	movs	r3, #1
 80016e0:	e00f      	b.n	8001702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e2:	4a0a      	ldr	r2, [pc, #40]	@ (800170c <SysTick_Config+0x40>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ea:	210f      	movs	r1, #15
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f7ff ff8e 	bl	8001610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f4:	4b05      	ldr	r3, [pc, #20]	@ (800170c <SysTick_Config+0x40>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fa:	4b04      	ldr	r3, [pc, #16]	@ (800170c <SysTick_Config+0x40>)
 80016fc:	2207      	movs	r2, #7
 80016fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	e000e010 	.word	0xe000e010

08001710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff29 	bl	8001570 <__NVIC_SetPriorityGrouping>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001738:	f7ff ff3e 	bl	80015b8 <__NVIC_GetPriorityGrouping>
 800173c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	68b9      	ldr	r1, [r7, #8]
 8001742:	6978      	ldr	r0, [r7, #20]
 8001744:	f7ff ff8e 	bl	8001664 <NVIC_EncodePriority>
 8001748:	4602      	mov	r2, r0
 800174a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff5d 	bl	8001610 <__NVIC_SetPriority>
}
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff31 	bl	80015d4 <__NVIC_EnableIRQ>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff ffa2 	bl	80016cc <SysTick_Config>
 8001788:	4603      	mov	r3, r0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017a0:	f7ff feb6 	bl	8001510 <HAL_GetTick>
 80017a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d008      	beq.n	80017c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2280      	movs	r2, #128	@ 0x80
 80017b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e052      	b.n	800186a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0216 	bic.w	r2, r2, #22
 80017d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d103      	bne.n	80017f4 <HAL_DMA_Abort+0x62>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d007      	beq.n	8001804 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0208 	bic.w	r2, r2, #8
 8001802:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0201 	bic.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001814:	e013      	b.n	800183e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001816:	f7ff fe7b 	bl	8001510 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b05      	cmp	r3, #5
 8001822:	d90c      	bls.n	800183e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2220      	movs	r2, #32
 8001828:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2203      	movs	r2, #3
 800182e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e015      	b.n	800186a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1e4      	bne.n	8001816 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001850:	223f      	movs	r2, #63	@ 0x3f
 8001852:	409a      	lsls	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d004      	beq.n	8001890 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2280      	movs	r2, #128	@ 0x80
 800188a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e00c      	b.n	80018aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2205      	movs	r2, #5
 8001894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0201 	bic.w	r2, r2, #1
 80018a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	@ 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
 80018d2:	e159      	b.n	8001b88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018d4:	2201      	movs	r2, #1
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	f040 8148 	bne.w	8001b82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d005      	beq.n	800190a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001906:	2b02      	cmp	r3, #2
 8001908:	d130      	bne.n	800196c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	2203      	movs	r2, #3
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001940:	2201      	movs	r2, #1
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	f003 0201 	and.w	r2, r3, #1
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b03      	cmp	r3, #3
 8001976:	d017      	beq.n	80019a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2203      	movs	r2, #3
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d123      	bne.n	80019fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	08da      	lsrs	r2, r3, #3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3208      	adds	r2, #8
 80019bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	220f      	movs	r2, #15
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	08da      	lsrs	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3208      	adds	r2, #8
 80019f6:	69b9      	ldr	r1, [r7, #24]
 80019f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	2203      	movs	r2, #3
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0203 	and.w	r2, r3, #3
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 80a2 	beq.w	8001b82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b57      	ldr	r3, [pc, #348]	@ (8001ba0 <HAL_GPIO_Init+0x2e8>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a46:	4a56      	ldr	r2, [pc, #344]	@ (8001ba0 <HAL_GPIO_Init+0x2e8>)
 8001a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a4e:	4b54      	ldr	r3, [pc, #336]	@ (8001ba0 <HAL_GPIO_Init+0x2e8>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a5a:	4a52      	ldr	r2, [pc, #328]	@ (8001ba4 <HAL_GPIO_Init+0x2ec>)
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	089b      	lsrs	r3, r3, #2
 8001a60:	3302      	adds	r3, #2
 8001a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	220f      	movs	r2, #15
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a49      	ldr	r2, [pc, #292]	@ (8001ba8 <HAL_GPIO_Init+0x2f0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d019      	beq.n	8001aba <HAL_GPIO_Init+0x202>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a48      	ldr	r2, [pc, #288]	@ (8001bac <HAL_GPIO_Init+0x2f4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d013      	beq.n	8001ab6 <HAL_GPIO_Init+0x1fe>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a47      	ldr	r2, [pc, #284]	@ (8001bb0 <HAL_GPIO_Init+0x2f8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d00d      	beq.n	8001ab2 <HAL_GPIO_Init+0x1fa>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a46      	ldr	r2, [pc, #280]	@ (8001bb4 <HAL_GPIO_Init+0x2fc>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d007      	beq.n	8001aae <HAL_GPIO_Init+0x1f6>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a45      	ldr	r2, [pc, #276]	@ (8001bb8 <HAL_GPIO_Init+0x300>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d101      	bne.n	8001aaa <HAL_GPIO_Init+0x1f2>
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	e008      	b.n	8001abc <HAL_GPIO_Init+0x204>
 8001aaa:	2307      	movs	r3, #7
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x204>
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e004      	b.n	8001abc <HAL_GPIO_Init+0x204>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e002      	b.n	8001abc <HAL_GPIO_Init+0x204>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_GPIO_Init+0x204>
 8001aba:	2300      	movs	r3, #0
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	f002 0203 	and.w	r2, r2, #3
 8001ac2:	0092      	lsls	r2, r2, #2
 8001ac4:	4093      	lsls	r3, r2
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001acc:	4935      	ldr	r1, [pc, #212]	@ (8001ba4 <HAL_GPIO_Init+0x2ec>)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ada:	4b38      	ldr	r3, [pc, #224]	@ (8001bbc <HAL_GPIO_Init+0x304>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001afe:	4a2f      	ldr	r2, [pc, #188]	@ (8001bbc <HAL_GPIO_Init+0x304>)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b04:	4b2d      	ldr	r3, [pc, #180]	@ (8001bbc <HAL_GPIO_Init+0x304>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b28:	4a24      	ldr	r2, [pc, #144]	@ (8001bbc <HAL_GPIO_Init+0x304>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b2e:	4b23      	ldr	r3, [pc, #140]	@ (8001bbc <HAL_GPIO_Init+0x304>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b52:	4a1a      	ldr	r2, [pc, #104]	@ (8001bbc <HAL_GPIO_Init+0x304>)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b58:	4b18      	ldr	r3, [pc, #96]	@ (8001bbc <HAL_GPIO_Init+0x304>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b7c:	4a0f      	ldr	r2, [pc, #60]	@ (8001bbc <HAL_GPIO_Init+0x304>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3301      	adds	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	2b0f      	cmp	r3, #15
 8001b8c:	f67f aea2 	bls.w	80018d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3724      	adds	r7, #36	@ 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40013800 	.word	0x40013800
 8001ba8:	40020000 	.word	0x40020000
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	40020800 	.word	0x40020800
 8001bb4:	40020c00 	.word	0x40020c00
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40013c00 	.word	0x40013c00

08001bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bdc:	e003      	b.n	8001be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	041a      	lsls	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	619a      	str	r2, [r3, #24]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af02      	add	r7, sp, #8
 8001bf8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e101      	b.n	8001e08 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d106      	bne.n	8001c24 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fb06 	bl	8001230 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2203      	movs	r2, #3
 8001c28:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c32:	d102      	bne.n	8001c3a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 f843 	bl	8004cca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	7c1a      	ldrb	r2, [r3, #16]
 8001c4c:	f88d 2000 	strb.w	r2, [sp]
 8001c50:	3304      	adds	r3, #4
 8001c52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c54:	f002 ff22 	bl	8004a9c <USB_CoreInit>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2202      	movs	r2, #2
 8001c62:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0ce      	b.n	8001e08 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f003 f83b 	bl	8004cec <USB_SetCurrentMode>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0bf      	b.n	8001e08 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	e04a      	b.n	8001d24 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	3315      	adds	r3, #21
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	3314      	adds	r3, #20
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cb6:	7bfa      	ldrb	r2, [r7, #15]
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	b298      	uxth	r0, r3
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	332e      	adds	r3, #46	@ 0x2e
 8001cca:	4602      	mov	r2, r0
 8001ccc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	3318      	adds	r3, #24
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	331c      	adds	r3, #28
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4413      	add	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	3320      	adds	r3, #32
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d0a:	7bfa      	ldrb	r2, [r7, #15]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	3324      	adds	r3, #36	@ 0x24
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	3301      	adds	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	791b      	ldrb	r3, [r3, #4]
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d3af      	bcc.n	8001c8e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	73fb      	strb	r3, [r7, #15]
 8001d32:	e044      	b.n	8001dbe <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4413      	add	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	73fb      	strb	r3, [r7, #15]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	791b      	ldrb	r3, [r3, #4]
 8001dc2:	7bfa      	ldrb	r2, [r7, #15]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d3b5      	bcc.n	8001d34 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7c1a      	ldrb	r2, [r3, #16]
 8001dd0:	f88d 2000 	strb.w	r2, [sp]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dd8:	f002 ffd4 	bl	8004d84 <USB_DevInit>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2202      	movs	r2, #2
 8001de6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00c      	b.n	8001e08 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f004 f81e 	bl	8005e42 <USB_DevDisconnect>

  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_PCD_Start+0x1c>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e022      	b.n	8001e72 <HAL_PCD_Start+0x62>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d009      	beq.n	8001e54 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d105      	bne.n	8001e54 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e4c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f002 ff25 	bl	8004ca8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f003 ffcc 	bl	8005e00 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e7a:	b590      	push	{r4, r7, lr}
 8001e7c:	b08d      	sub	sp, #52	@ 0x34
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f004 f88a 	bl	8005faa <USB_GetMode>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f040 848c 	bne.w	80027b6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 ffee 	bl	8005e84 <USB_ReadInterrupts>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8482 	beq.w	80027b4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 ffdb 	bl	8005e84 <USB_ReadInterrupts>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d107      	bne.n	8001ee8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695a      	ldr	r2, [r3, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f002 0202 	and.w	r2, r2, #2
 8001ee6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f003 ffc9 	bl	8005e84 <USB_ReadInterrupts>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b10      	cmp	r3, #16
 8001efa:	d161      	bne.n	8001fc0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699a      	ldr	r2, [r3, #24]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0210 	bic.w	r2, r2, #16
 8001f0a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	f003 020f 	and.w	r2, r3, #15
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4413      	add	r3, r2
 8001f28:	3304      	adds	r3, #4
 8001f2a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	0c5b      	lsrs	r3, r3, #17
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d124      	bne.n	8001f82 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d035      	beq.n	8001fb0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	091b      	lsrs	r3, r3, #4
 8001f4c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	6a38      	ldr	r0, [r7, #32]
 8001f58:	f003 fe00 	bl	8005b5c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	091b      	lsrs	r3, r3, #4
 8001f64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f68:	441a      	add	r2, r3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f7a:	441a      	add	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	615a      	str	r2, [r3, #20]
 8001f80:	e016      	b.n	8001fb0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	0c5b      	lsrs	r3, r3, #17
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	2b06      	cmp	r3, #6
 8001f8c:	d110      	bne.n	8001fb0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f94:	2208      	movs	r2, #8
 8001f96:	4619      	mov	r1, r3
 8001f98:	6a38      	ldr	r0, [r7, #32]
 8001f9a:	f003 fddf 	bl	8005b5c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001faa:	441a      	add	r2, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0210 	orr.w	r2, r2, #16
 8001fbe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f003 ff5d 	bl	8005e84 <USB_ReadInterrupts>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fd0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001fd4:	f040 80a7 	bne.w	8002126 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 ff62 	bl	8005eaa <USB_ReadDevAllOutEpInterrupt>
 8001fe6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001fe8:	e099      	b.n	800211e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 808e 	beq.w	8002112 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f003 ff86 	bl	8005f12 <USB_ReadDevOutEPInterrupt>
 8002006:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00c      	beq.n	800202c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	4413      	add	r3, r2
 800201a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800201e:	461a      	mov	r2, r3
 8002020:	2301      	movs	r3, #1
 8002022:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002024:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fe8c 	bl	8002d44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00c      	beq.n	8002050 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	015a      	lsls	r2, r3, #5
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	4413      	add	r3, r2
 800203e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002042:	461a      	mov	r2, r3
 8002044:	2308      	movs	r3, #8
 8002046:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002048:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 ff62 	bl	8002f14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	2b00      	cmp	r3, #0
 8002058:	d008      	beq.n	800206c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	015a      	lsls	r2, r3, #5
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	4413      	add	r3, r2
 8002062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002066:	461a      	mov	r2, r3
 8002068:	2310      	movs	r3, #16
 800206a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d030      	beq.n	80020d8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800207e:	2b80      	cmp	r3, #128	@ 0x80
 8002080:	d109      	bne.n	8002096 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002090:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002094:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	4413      	add	r3, r2
 80020a8:	3304      	adds	r3, #4
 80020aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	78db      	ldrb	r3, [r3, #3]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d108      	bne.n	80020c6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	2200      	movs	r2, #0
 80020b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80020ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	4619      	mov	r1, r3
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f006 f9b5 	bl	8008430 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80020c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c8:	015a      	lsls	r2, r3, #5
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020d2:	461a      	mov	r2, r3
 80020d4:	2302      	movs	r3, #2
 80020d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d008      	beq.n	80020f4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020ee:	461a      	mov	r2, r3
 80020f0:	2320      	movs	r3, #32
 80020f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d009      	beq.n	8002112 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	4413      	add	r3, r2
 8002106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800210a:	461a      	mov	r2, r3
 800210c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002110:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	3301      	adds	r3, #1
 8002116:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800211a:	085b      	lsrs	r3, r3, #1
 800211c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800211e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002120:	2b00      	cmp	r3, #0
 8002122:	f47f af62 	bne.w	8001fea <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f003 feaa 	bl	8005e84 <USB_ReadInterrupts>
 8002130:	4603      	mov	r3, r0
 8002132:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002136:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800213a:	f040 80db 	bne.w	80022f4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f003 fecb 	bl	8005ede <USB_ReadDevAllInEpInterrupt>
 8002148:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800214e:	e0cd      	b.n	80022ec <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 80c2 	beq.w	80022e0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f003 fef1 	bl	8005f4e <USB_ReadDevInEPInterrupt>
 800216c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b00      	cmp	r3, #0
 8002176:	d057      	beq.n	8002228 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	2201      	movs	r2, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800218c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	43db      	mvns	r3, r3
 8002192:	69f9      	ldr	r1, [r7, #28]
 8002194:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002198:	4013      	ands	r3, r2
 800219a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021a8:	461a      	mov	r2, r3
 80021aa:	2301      	movs	r3, #1
 80021ac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	799b      	ldrb	r3, [r3, #6]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d132      	bne.n	800221c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	3320      	adds	r3, #32
 80021c6:	6819      	ldr	r1, [r3, #0]
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4403      	add	r3, r0
 80021d6:	331c      	adds	r3, #28
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4419      	add	r1, r3
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021e0:	4613      	mov	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4403      	add	r3, r0
 80021ea:	3320      	adds	r3, #32
 80021ec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80021ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d113      	bne.n	800221c <HAL_PCD_IRQHandler+0x3a2>
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4413      	add	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	3324      	adds	r3, #36	@ 0x24
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d108      	bne.n	800221c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002214:	461a      	mov	r2, r3
 8002216:	2101      	movs	r1, #1
 8002218:	f003 fef8 	bl	800600c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800221c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221e:	b2db      	uxtb	r3, r3
 8002220:	4619      	mov	r1, r3
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f006 f880 	bl	8008328 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d008      	beq.n	8002244 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	4413      	add	r3, r2
 800223a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800223e:	461a      	mov	r2, r3
 8002240:	2308      	movs	r3, #8
 8002242:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	2b00      	cmp	r3, #0
 800224c:	d008      	beq.n	8002260 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	4413      	add	r3, r2
 8002256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800225a:	461a      	mov	r2, r3
 800225c:	2310      	movs	r3, #16
 800225e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	d008      	beq.n	800227c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002276:	461a      	mov	r2, r3
 8002278:	2340      	movs	r3, #64	@ 0x40
 800227a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d023      	beq.n	80022ce <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002286:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002288:	6a38      	ldr	r0, [r7, #32]
 800228a:	f002 fedf 	bl	800504c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800228e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	3310      	adds	r3, #16
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	3304      	adds	r3, #4
 80022a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	78db      	ldrb	r3, [r3, #3]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d108      	bne.n	80022bc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2200      	movs	r2, #0
 80022ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80022b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	4619      	mov	r1, r3
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f006 f8cc 	bl	8008454 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80022bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022c8:	461a      	mov	r2, r3
 80022ca:	2302      	movs	r3, #2
 80022cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 fca5 	bl	8002c2a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e2:	3301      	adds	r3, #1
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80022e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e8:	085b      	lsrs	r3, r3, #1
 80022ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80022ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f47f af2e 	bne.w	8002150 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f003 fdc3 	bl	8005e84 <USB_ReadInterrupts>
 80022fe:	4603      	mov	r3, r0
 8002300:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002304:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002308:	d122      	bne.n	8002350 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002318:	f023 0301 	bic.w	r3, r3, #1
 800231c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002324:	2b01      	cmp	r3, #1
 8002326:	d108      	bne.n	800233a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002330:	2100      	movs	r1, #0
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 fe8c 	bl	8003050 <HAL_PCDEx_LPM_Callback>
 8002338:	e002      	b.n	8002340 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f006 f86a 	bl	8008414 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695a      	ldr	r2, [r3, #20]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800234e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f003 fd95 	bl	8005e84 <USB_ReadInterrupts>
 800235a:	4603      	mov	r3, r0
 800235c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002360:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002364:	d112      	bne.n	800238c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b01      	cmp	r3, #1
 8002374:	d102      	bne.n	800237c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f006 f826 	bl	80083c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695a      	ldr	r2, [r3, #20]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800238a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f003 fd77 	bl	8005e84 <USB_ReadInterrupts>
 8002396:	4603      	mov	r3, r0
 8002398:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800239c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023a0:	f040 80b7 	bne.w	8002512 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2110      	movs	r1, #16
 80023be:	4618      	mov	r0, r3
 80023c0:	f002 fe44 	bl	800504c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c4:	2300      	movs	r3, #0
 80023c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023c8:	e046      	b.n	8002458 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80023ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023d6:	461a      	mov	r2, r3
 80023d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80023dc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023ee:	0151      	lsls	r1, r2, #5
 80023f0:	69fa      	ldr	r2, [r7, #28]
 80023f2:	440a      	add	r2, r1
 80023f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80023f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80023fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80023fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	4413      	add	r3, r2
 8002406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800240a:	461a      	mov	r2, r3
 800240c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002410:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	4413      	add	r3, r2
 800241a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002422:	0151      	lsls	r1, r2, #5
 8002424:	69fa      	ldr	r2, [r7, #28]
 8002426:	440a      	add	r2, r1
 8002428:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800242c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002430:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	4413      	add	r3, r2
 800243a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002442:	0151      	lsls	r1, r2, #5
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	440a      	add	r2, r1
 8002448:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800244c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002450:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002454:	3301      	adds	r3, #1
 8002456:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	791b      	ldrb	r3, [r3, #4]
 800245c:	461a      	mov	r2, r3
 800245e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002460:	4293      	cmp	r3, r2
 8002462:	d3b2      	bcc.n	80023ca <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002472:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002476:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	7bdb      	ldrb	r3, [r3, #15]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d016      	beq.n	80024ae <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002486:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002490:	f043 030b 	orr.w	r3, r3, #11
 8002494:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800249e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024a6:	f043 030b 	orr.w	r3, r3, #11
 80024aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ac:	e015      	b.n	80024da <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	69fa      	ldr	r2, [r7, #28]
 80024b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024c0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80024c4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	69fa      	ldr	r2, [r7, #28]
 80024d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024d4:	f043 030b 	orr.w	r3, r3, #11
 80024d8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	69fa      	ldr	r2, [r7, #28]
 80024e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024e8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80024ec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024fc:	461a      	mov	r2, r3
 80024fe:	f003 fd85 	bl	800600c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695a      	ldr	r2, [r3, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002510:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f003 fcb4 	bl	8005e84 <USB_ReadInterrupts>
 800251c:	4603      	mov	r3, r0
 800251e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002522:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002526:	d123      	bne.n	8002570 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f003 fd4a 	bl	8005fc6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f002 fe01 	bl	800513e <USB_GetDevSpeed>
 800253c:	4603      	mov	r3, r0
 800253e:	461a      	mov	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681c      	ldr	r4, [r3, #0]
 8002548:	f001 f9f2 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 800254c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002552:	461a      	mov	r2, r3
 8002554:	4620      	mov	r0, r4
 8002556:	f002 fb05 	bl	8004b64 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f005 ff0c 	bl	8008378 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800256e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f003 fc85 	bl	8005e84 <USB_ReadInterrupts>
 800257a:	4603      	mov	r3, r0
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b08      	cmp	r3, #8
 8002582:	d10a      	bne.n	800259a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f005 fee9 	bl	800835c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695a      	ldr	r2, [r3, #20]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f002 0208 	and.w	r2, r2, #8
 8002598:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f003 fc70 	bl	8005e84 <USB_ReadInterrupts>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025aa:	2b80      	cmp	r3, #128	@ 0x80
 80025ac:	d123      	bne.n	80025f6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025ba:	2301      	movs	r3, #1
 80025bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80025be:	e014      	b.n	80025ea <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d105      	bne.n	80025e4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	4619      	mov	r1, r3
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 faf2 	bl	8002bc8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	3301      	adds	r3, #1
 80025e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	791b      	ldrb	r3, [r3, #4]
 80025ee:	461a      	mov	r2, r3
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d3e4      	bcc.n	80025c0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f003 fc42 	bl	8005e84 <USB_ReadInterrupts>
 8002600:	4603      	mov	r3, r0
 8002602:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002606:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800260a:	d13c      	bne.n	8002686 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800260c:	2301      	movs	r3, #1
 800260e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002610:	e02b      	b.n	800266a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	4413      	add	r3, r2
 800261a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002626:	4613      	mov	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4413      	add	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	3318      	adds	r3, #24
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d115      	bne.n	8002664 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002638:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800263a:	2b00      	cmp	r3, #0
 800263c:	da12      	bge.n	8002664 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	3317      	adds	r3, #23
 800264e:	2201      	movs	r2, #1
 8002650:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	b2db      	uxtb	r3, r3
 8002656:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800265a:	b2db      	uxtb	r3, r3
 800265c:	4619      	mov	r1, r3
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fab2 	bl	8002bc8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	3301      	adds	r3, #1
 8002668:	627b      	str	r3, [r7, #36]	@ 0x24
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	791b      	ldrb	r3, [r3, #4]
 800266e:	461a      	mov	r2, r3
 8002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002672:	4293      	cmp	r3, r2
 8002674:	d3cd      	bcc.n	8002612 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695a      	ldr	r2, [r3, #20]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002684:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f003 fbfa 	bl	8005e84 <USB_ReadInterrupts>
 8002690:	4603      	mov	r3, r0
 8002692:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002696:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800269a:	d156      	bne.n	800274a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800269c:	2301      	movs	r3, #1
 800269e:	627b      	str	r3, [r7, #36]	@ 0x24
 80026a0:	e045      	b.n	800272e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	015a      	lsls	r2, r3, #5
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026b6:	4613      	mov	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d12e      	bne.n	8002728 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	da2b      	bge.n	8002728 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80026dc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d121      	bne.n	8002728 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026e8:	4613      	mov	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10a      	bne.n	8002728 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002720:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002724:	6053      	str	r3, [r2, #4]
            break;
 8002726:	e008      	b.n	800273a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272a:	3301      	adds	r3, #1
 800272c:	627b      	str	r3, [r7, #36]	@ 0x24
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	791b      	ldrb	r3, [r3, #4]
 8002732:	461a      	mov	r2, r3
 8002734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002736:	4293      	cmp	r3, r2
 8002738:	d3b3      	bcc.n	80026a2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695a      	ldr	r2, [r3, #20]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002748:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f003 fb98 	bl	8005e84 <USB_ReadInterrupts>
 8002754:	4603      	mov	r3, r0
 8002756:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800275a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800275e:	d10a      	bne.n	8002776 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f005 fe89 	bl	8008478 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695a      	ldr	r2, [r3, #20]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002774:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f003 fb82 	bl	8005e84 <USB_ReadInterrupts>
 8002780:	4603      	mov	r3, r0
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	2b04      	cmp	r3, #4
 8002788:	d115      	bne.n	80027b6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f005 fe79 	bl	8008494 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6859      	ldr	r1, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	e000      	b.n	80027b6 <HAL_PCD_IRQHandler+0x93c>
      return;
 80027b4:	bf00      	nop
    }
  }
}
 80027b6:	3734      	adds	r7, #52	@ 0x34
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd90      	pop	{r4, r7, pc}

080027bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_PCD_SetAddress+0x1a>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e012      	b.n	80027fc <HAL_PCD_SetAddress+0x40>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	78fa      	ldrb	r2, [r7, #3]
 80027e2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	78fa      	ldrb	r2, [r7, #3]
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f003 fae1 	bl	8005db4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	4608      	mov	r0, r1
 800280e:	4611      	mov	r1, r2
 8002810:	461a      	mov	r2, r3
 8002812:	4603      	mov	r3, r0
 8002814:	70fb      	strb	r3, [r7, #3]
 8002816:	460b      	mov	r3, r1
 8002818:	803b      	strh	r3, [r7, #0]
 800281a:	4613      	mov	r3, r2
 800281c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002822:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002826:	2b00      	cmp	r3, #0
 8002828:	da0f      	bge.n	800284a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	f003 020f 	and.w	r2, r3, #15
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	3310      	adds	r3, #16
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	3304      	adds	r3, #4
 8002840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2201      	movs	r2, #1
 8002846:	705a      	strb	r2, [r3, #1]
 8002848:	e00f      	b.n	800286a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	f003 020f 	and.w	r2, r3, #15
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	4413      	add	r3, r2
 8002860:	3304      	adds	r3, #4
 8002862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800286a:	78fb      	ldrb	r3, [r7, #3]
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	b2da      	uxtb	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002876:	883b      	ldrh	r3, [r7, #0]
 8002878:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	78ba      	ldrb	r2, [r7, #2]
 8002884:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	785b      	ldrb	r3, [r3, #1]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d004      	beq.n	8002898 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002898:	78bb      	ldrb	r3, [r7, #2]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d102      	bne.n	80028a4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_PCD_EP_Open+0xae>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e00e      	b.n	80028d0 <HAL_PCD_EP_Open+0xcc>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68f9      	ldr	r1, [r7, #12]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f002 fc61 	bl	8005188 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80028ce:	7afb      	ldrb	r3, [r7, #11]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	da0f      	bge.n	800290c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	f003 020f 	and.w	r2, r3, #15
 80028f2:	4613      	mov	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	3310      	adds	r3, #16
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	4413      	add	r3, r2
 8002900:	3304      	adds	r3, #4
 8002902:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2201      	movs	r2, #1
 8002908:	705a      	strb	r2, [r3, #1]
 800290a:	e00f      	b.n	800292c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	f003 020f 	and.w	r2, r3, #15
 8002912:	4613      	mov	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	3304      	adds	r3, #4
 8002924:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	b2da      	uxtb	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_PCD_EP_Close+0x6e>
 8002942:	2302      	movs	r3, #2
 8002944:	e00e      	b.n	8002964 <HAL_PCD_EP_Close+0x8c>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68f9      	ldr	r1, [r7, #12]
 8002954:	4618      	mov	r0, r3
 8002956:	f002 fc9f 	bl	8005298 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	460b      	mov	r3, r1
 800297a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800297c:	7afb      	ldrb	r3, [r7, #11]
 800297e:	f003 020f 	and.w	r2, r3, #15
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4413      	add	r3, r2
 8002992:	3304      	adds	r3, #4
 8002994:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2200      	movs	r2, #0
 80029a6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2200      	movs	r2, #0
 80029ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ae:	7afb      	ldrb	r3, [r7, #11]
 80029b0:	f003 030f 	and.w	r3, r3, #15
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	799b      	ldrb	r3, [r3, #6]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d102      	bne.n	80029c8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	799b      	ldrb	r3, [r3, #6]
 80029d0:	461a      	mov	r2, r3
 80029d2:	6979      	ldr	r1, [r7, #20]
 80029d4:	f002 fd3c 	bl	8005450 <USB_EPStartXfer>

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b086      	sub	sp, #24
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	460b      	mov	r3, r1
 80029f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029f2:	7afb      	ldrb	r3, [r7, #11]
 80029f4:	f003 020f 	and.w	r2, r3, #15
 80029f8:	4613      	mov	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4413      	add	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	3310      	adds	r3, #16
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4413      	add	r3, r2
 8002a06:	3304      	adds	r3, #4
 8002a08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a22:	7afb      	ldrb	r3, [r7, #11]
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	799b      	ldrb	r3, [r3, #6]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d102      	bne.n	8002a3c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	799b      	ldrb	r3, [r3, #6]
 8002a44:	461a      	mov	r2, r3
 8002a46:	6979      	ldr	r1, [r7, #20]
 8002a48:	f002 fd02 	bl	8005450 <USB_EPStartXfer>

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	7912      	ldrb	r2, [r2, #4]
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e04f      	b.n	8002b14 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	da0f      	bge.n	8002a9c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	f003 020f 	and.w	r2, r3, #15
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	3310      	adds	r3, #16
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	4413      	add	r3, r2
 8002a90:	3304      	adds	r3, #4
 8002a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2201      	movs	r2, #1
 8002a98:	705a      	strb	r2, [r3, #1]
 8002a9a:	e00d      	b.n	8002ab8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	3304      	adds	r3, #4
 8002ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_PCD_EP_SetStall+0x82>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e01d      	b.n	8002b14 <HAL_PCD_EP_SetStall+0xbe>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68f9      	ldr	r1, [r7, #12]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f003 f890 	bl	8005c0c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	7999      	ldrb	r1, [r3, #6]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b04:	461a      	mov	r2, r3
 8002b06:	f003 fa81 	bl	800600c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	7912      	ldrb	r2, [r2, #4]
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e042      	b.n	8002bc0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	da0f      	bge.n	8002b62 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b42:	78fb      	ldrb	r3, [r7, #3]
 8002b44:	f003 020f 	and.w	r2, r3, #15
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	3310      	adds	r3, #16
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	3304      	adds	r3, #4
 8002b58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	705a      	strb	r2, [r3, #1]
 8002b60:	e00f      	b.n	8002b82 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	f003 020f 	and.w	r2, r3, #15
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	4413      	add	r3, r2
 8002b78:	3304      	adds	r3, #4
 8002b7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_PCD_EP_ClrStall+0x86>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e00e      	b.n	8002bc0 <HAL_PCD_EP_ClrStall+0xa4>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68f9      	ldr	r1, [r7, #12]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f003 f899 	bl	8005ce8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da0c      	bge.n	8002bf6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	f003 020f 	and.w	r2, r3, #15
 8002be2:	4613      	mov	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	3310      	adds	r3, #16
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4413      	add	r3, r2
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	e00c      	b.n	8002c10 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	f003 020f 	and.w	r2, r3, #15
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68f9      	ldr	r1, [r7, #12]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f002 feb8 	bl	800598c <USB_EPStopXfer>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002c20:	7afb      	ldrb	r3, [r7, #11]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b08a      	sub	sp, #40	@ 0x28
 8002c2e:	af02      	add	r7, sp, #8
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	3310      	adds	r3, #16
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3304      	adds	r3, #4
 8002c50:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d901      	bls.n	8002c62 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e06b      	b.n	8002d3a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d902      	bls.n	8002c7e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3303      	adds	r3, #3
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c86:	e02a      	b.n	8002cde <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d902      	bls.n	8002ca4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	3303      	adds	r3, #3
 8002ca8:	089b      	lsrs	r3, r3, #2
 8002caa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	68d9      	ldr	r1, [r3, #12]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	6978      	ldr	r0, [r7, #20]
 8002cc2:	f002 ff0d 	bl	8005ae0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	441a      	add	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	441a      	add	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d809      	bhi.n	8002d08 <PCD_WriteEmptyTxFifo+0xde>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	695a      	ldr	r2, [r3, #20]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d203      	bcs.n	8002d08 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1bf      	bne.n	8002c88 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d811      	bhi.n	8002d38 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	6939      	ldr	r1, [r7, #16]
 8002d30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002d34:	4013      	ands	r3, r2
 8002d36:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	333c      	adds	r3, #60	@ 0x3c
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	799b      	ldrb	r3, [r3, #6]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d17b      	bne.n	8002e72 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d015      	beq.n	8002db0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	4a61      	ldr	r2, [pc, #388]	@ (8002f0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	f240 80b9 	bls.w	8002f00 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80b3 	beq.w	8002f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002da6:	461a      	mov	r2, r3
 8002da8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dac:	6093      	str	r3, [r2, #8]
 8002dae:	e0a7      	b.n	8002f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	2320      	movs	r3, #32
 8002dca:	6093      	str	r3, [r2, #8]
 8002dcc:	e098      	b.n	8002f00 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f040 8093 	bne.w	8002f00 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	4a4b      	ldr	r2, [pc, #300]	@ (8002f0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d90f      	bls.n	8002e02 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dfe:	6093      	str	r3, [r2, #8]
 8002e00:	e07e      	b.n	8002f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	4413      	add	r3, r2
 8002e14:	3304      	adds	r3, #4
 8002e16:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a1a      	ldr	r2, [r3, #32]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	0159      	lsls	r1, r3, #5
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	440b      	add	r3, r1
 8002e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e2e:	1ad2      	subs	r2, r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d114      	bne.n	8002e64 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2101      	movs	r1, #1
 8002e50:	f003 f8dc 	bl	800600c <USB_EP0_OutStart>
 8002e54:	e006      	b.n	8002e64 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	441a      	add	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	4619      	mov	r1, r3
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f005 fa41 	bl	80082f2 <HAL_PCD_DataOutStageCallback>
 8002e70:	e046      	b.n	8002f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	4a26      	ldr	r2, [pc, #152]	@ (8002f10 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d124      	bne.n	8002ec4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e90:	461a      	mov	r2, r3
 8002e92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e96:	6093      	str	r3, [r2, #8]
 8002e98:	e032      	b.n	8002f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f003 0320 	and.w	r3, r3, #32
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2320      	movs	r3, #32
 8002eb4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f005 fa18 	bl	80082f2 <HAL_PCD_DataOutStageCallback>
 8002ec2:	e01d      	b.n	8002f00 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d114      	bne.n	8002ef4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d108      	bne.n	8002ef4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002eec:	461a      	mov	r2, r3
 8002eee:	2100      	movs	r1, #0
 8002ef0:	f003 f88c 	bl	800600c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	4619      	mov	r1, r3
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f005 f9f9 	bl	80082f2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3720      	adds	r7, #32
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	4f54300a 	.word	0x4f54300a
 8002f10:	4f54310a 	.word	0x4f54310a

08002f14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	333c      	adds	r3, #60	@ 0x3c
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4a15      	ldr	r2, [pc, #84]	@ (8002f9c <PCD_EP_OutSetupPacket_int+0x88>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d90e      	bls.n	8002f68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d009      	beq.n	8002f68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f60:	461a      	mov	r2, r3
 8002f62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f005 f9b0 	bl	80082ce <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4a0a      	ldr	r2, [pc, #40]	@ (8002f9c <PCD_EP_OutSetupPacket_int+0x88>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d90c      	bls.n	8002f90 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	799b      	ldrb	r3, [r3, #6]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d108      	bne.n	8002f90 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	f003 f83e 	bl	800600c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	4f54300a 	.word	0x4f54300a

08002fa0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	70fb      	strb	r3, [r7, #3]
 8002fac:	4613      	mov	r3, r2
 8002fae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d107      	bne.n	8002fce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002fbe:	883b      	ldrh	r3, [r7, #0]
 8002fc0:	0419      	lsls	r1, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fcc:	e028      	b.n	8003020 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd4:	0c1b      	lsrs	r3, r3, #16
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	4413      	add	r3, r2
 8002fda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fdc:	2300      	movs	r3, #0
 8002fde:	73fb      	strb	r3, [r7, #15]
 8002fe0:	e00d      	b.n	8002ffe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	3340      	adds	r3, #64	@ 0x40
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	73fb      	strb	r3, [r7, #15]
 8002ffe:	7bfa      	ldrb	r2, [r7, #15]
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	3b01      	subs	r3, #1
 8003004:	429a      	cmp	r2, r3
 8003006:	d3ec      	bcc.n	8002fe2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003008:	883b      	ldrh	r3, [r7, #0]
 800300a:	0418      	lsls	r0, r3, #16
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6819      	ldr	r1, [r3, #0]
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	3b01      	subs	r3, #1
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	4302      	orrs	r2, r0
 8003018:	3340      	adds	r3, #64	@ 0x40
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	460b      	mov	r3, r1
 8003038:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	887a      	ldrh	r2, [r7, #2]
 8003040:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e267      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d075      	beq.n	8003172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003086:	4b88      	ldr	r3, [pc, #544]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b04      	cmp	r3, #4
 8003090:	d00c      	beq.n	80030ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003092:	4b85      	ldr	r3, [pc, #532]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800309a:	2b08      	cmp	r3, #8
 800309c:	d112      	bne.n	80030c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800309e:	4b82      	ldr	r3, [pc, #520]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030aa:	d10b      	bne.n	80030c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ac:	4b7e      	ldr	r3, [pc, #504]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d05b      	beq.n	8003170 <HAL_RCC_OscConfig+0x108>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d157      	bne.n	8003170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e242      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030cc:	d106      	bne.n	80030dc <HAL_RCC_OscConfig+0x74>
 80030ce:	4b76      	ldr	r3, [pc, #472]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a75      	ldr	r2, [pc, #468]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e01d      	b.n	8003118 <HAL_RCC_OscConfig+0xb0>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x98>
 80030e6:	4b70      	ldr	r3, [pc, #448]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a6f      	ldr	r2, [pc, #444]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	4b6d      	ldr	r3, [pc, #436]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a6c      	ldr	r2, [pc, #432]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e00b      	b.n	8003118 <HAL_RCC_OscConfig+0xb0>
 8003100:	4b69      	ldr	r3, [pc, #420]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a68      	ldr	r2, [pc, #416]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	4b66      	ldr	r3, [pc, #408]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a65      	ldr	r2, [pc, #404]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003112:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d013      	beq.n	8003148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fe f9f6 	bl	8001510 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003128:	f7fe f9f2 	bl	8001510 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	@ 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e207      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313a:	4b5b      	ldr	r3, [pc, #364]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0xc0>
 8003146:	e014      	b.n	8003172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7fe f9e2 	bl	8001510 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003150:	f7fe f9de 	bl	8001510 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	@ 0x64
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e1f3      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003162:	4b51      	ldr	r3, [pc, #324]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0xe8>
 800316e:	e000      	b.n	8003172 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d063      	beq.n	8003246 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800317e:	4b4a      	ldr	r3, [pc, #296]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00b      	beq.n	80031a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800318a:	4b47      	ldr	r3, [pc, #284]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003192:	2b08      	cmp	r3, #8
 8003194:	d11c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003196:	4b44      	ldr	r3, [pc, #272]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d116      	bne.n	80031d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a2:	4b41      	ldr	r3, [pc, #260]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <HAL_RCC_OscConfig+0x152>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d001      	beq.n	80031ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e1c7      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ba:	4b3b      	ldr	r3, [pc, #236]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4937      	ldr	r1, [pc, #220]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ce:	e03a      	b.n	8003246 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d020      	beq.n	800321a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d8:	4b34      	ldr	r3, [pc, #208]	@ (80032ac <HAL_RCC_OscConfig+0x244>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031de:	f7fe f997 	bl	8001510 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e6:	f7fe f993 	bl	8001510 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e1a8      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f8:	4b2b      	ldr	r3, [pc, #172]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f0      	beq.n	80031e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003204:	4b28      	ldr	r3, [pc, #160]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4925      	ldr	r1, [pc, #148]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003214:	4313      	orrs	r3, r2
 8003216:	600b      	str	r3, [r1, #0]
 8003218:	e015      	b.n	8003246 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800321a:	4b24      	ldr	r3, [pc, #144]	@ (80032ac <HAL_RCC_OscConfig+0x244>)
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fe f976 	bl	8001510 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003228:	f7fe f972 	bl	8001510 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e187      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323a:	4b1b      	ldr	r3, [pc, #108]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d036      	beq.n	80032c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d016      	beq.n	8003288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800325a:	4b15      	ldr	r3, [pc, #84]	@ (80032b0 <HAL_RCC_OscConfig+0x248>)
 800325c:	2201      	movs	r2, #1
 800325e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fe f956 	bl	8001510 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003268:	f7fe f952 	bl	8001510 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e167      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327a:	4b0b      	ldr	r3, [pc, #44]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 800327c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x200>
 8003286:	e01b      	b.n	80032c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003288:	4b09      	ldr	r3, [pc, #36]	@ (80032b0 <HAL_RCC_OscConfig+0x248>)
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328e:	f7fe f93f 	bl	8001510 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003294:	e00e      	b.n	80032b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003296:	f7fe f93b 	bl	8001510 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d907      	bls.n	80032b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e150      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
 80032a8:	40023800 	.word	0x40023800
 80032ac:	42470000 	.word	0x42470000
 80032b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b4:	4b88      	ldr	r3, [pc, #544]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 80032b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1ea      	bne.n	8003296 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 8097 	beq.w	80033fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ce:	2300      	movs	r3, #0
 80032d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d2:	4b81      	ldr	r3, [pc, #516]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10f      	bne.n	80032fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	4b7d      	ldr	r3, [pc, #500]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	4a7c      	ldr	r2, [pc, #496]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 80032e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ee:	4b7a      	ldr	r3, [pc, #488]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f6:	60bb      	str	r3, [r7, #8]
 80032f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032fa:	2301      	movs	r3, #1
 80032fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fe:	4b77      	ldr	r3, [pc, #476]	@ (80034dc <HAL_RCC_OscConfig+0x474>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d118      	bne.n	800333c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800330a:	4b74      	ldr	r3, [pc, #464]	@ (80034dc <HAL_RCC_OscConfig+0x474>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a73      	ldr	r2, [pc, #460]	@ (80034dc <HAL_RCC_OscConfig+0x474>)
 8003310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003316:	f7fe f8fb 	bl	8001510 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331e:	f7fe f8f7 	bl	8001510 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e10c      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003330:	4b6a      	ldr	r3, [pc, #424]	@ (80034dc <HAL_RCC_OscConfig+0x474>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d106      	bne.n	8003352 <HAL_RCC_OscConfig+0x2ea>
 8003344:	4b64      	ldr	r3, [pc, #400]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003348:	4a63      	ldr	r2, [pc, #396]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003350:	e01c      	b.n	800338c <HAL_RCC_OscConfig+0x324>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b05      	cmp	r3, #5
 8003358:	d10c      	bne.n	8003374 <HAL_RCC_OscConfig+0x30c>
 800335a:	4b5f      	ldr	r3, [pc, #380]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335e:	4a5e      	ldr	r2, [pc, #376]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003360:	f043 0304 	orr.w	r3, r3, #4
 8003364:	6713      	str	r3, [r2, #112]	@ 0x70
 8003366:	4b5c      	ldr	r3, [pc, #368]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336a:	4a5b      	ldr	r2, [pc, #364]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	6713      	str	r3, [r2, #112]	@ 0x70
 8003372:	e00b      	b.n	800338c <HAL_RCC_OscConfig+0x324>
 8003374:	4b58      	ldr	r3, [pc, #352]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003378:	4a57      	ldr	r2, [pc, #348]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 800337a:	f023 0301 	bic.w	r3, r3, #1
 800337e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003380:	4b55      	ldr	r3, [pc, #340]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003384:	4a54      	ldr	r2, [pc, #336]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003386:	f023 0304 	bic.w	r3, r3, #4
 800338a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d015      	beq.n	80033c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003394:	f7fe f8bc 	bl	8001510 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339a:	e00a      	b.n	80033b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339c:	f7fe f8b8 	bl	8001510 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e0cb      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b2:	4b49      	ldr	r3, [pc, #292]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0ee      	beq.n	800339c <HAL_RCC_OscConfig+0x334>
 80033be:	e014      	b.n	80033ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c0:	f7fe f8a6 	bl	8001510 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c6:	e00a      	b.n	80033de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c8:	f7fe f8a2 	bl	8001510 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e0b5      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033de:	4b3e      	ldr	r3, [pc, #248]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1ee      	bne.n	80033c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d105      	bne.n	80033fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f0:	4b39      	ldr	r3, [pc, #228]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	4a38      	ldr	r2, [pc, #224]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 80033f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 80a1 	beq.w	8003548 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003406:	4b34      	ldr	r3, [pc, #208]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b08      	cmp	r3, #8
 8003410:	d05c      	beq.n	80034cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d141      	bne.n	800349e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341a:	4b31      	ldr	r3, [pc, #196]	@ (80034e0 <HAL_RCC_OscConfig+0x478>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fe f876 	bl	8001510 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003428:	f7fe f872 	bl	8001510 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e087      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343a:	4b27      	ldr	r3, [pc, #156]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69da      	ldr	r2, [r3, #28]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003454:	019b      	lsls	r3, r3, #6
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345c:	085b      	lsrs	r3, r3, #1
 800345e:	3b01      	subs	r3, #1
 8003460:	041b      	lsls	r3, r3, #16
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003468:	061b      	lsls	r3, r3, #24
 800346a:	491b      	ldr	r1, [pc, #108]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003470:	4b1b      	ldr	r3, [pc, #108]	@ (80034e0 <HAL_RCC_OscConfig+0x478>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fe f84b 	bl	8001510 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347e:	f7fe f847 	bl	8001510 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e05c      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003490:	4b11      	ldr	r3, [pc, #68]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x416>
 800349c:	e054      	b.n	8003548 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349e:	4b10      	ldr	r3, [pc, #64]	@ (80034e0 <HAL_RCC_OscConfig+0x478>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fe f834 	bl	8001510 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ac:	f7fe f830 	bl	8001510 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e045      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034be:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x444>
 80034ca:	e03d      	b.n	8003548 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d107      	bne.n	80034e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e038      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
 80034d8:	40023800 	.word	0x40023800
 80034dc:	40007000 	.word	0x40007000
 80034e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003554 <HAL_RCC_OscConfig+0x4ec>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d028      	beq.n	8003544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d121      	bne.n	8003544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800350a:	429a      	cmp	r2, r3
 800350c:	d11a      	bne.n	8003544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003514:	4013      	ands	r3, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800351a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800351c:	4293      	cmp	r3, r2
 800351e:	d111      	bne.n	8003544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352a:	085b      	lsrs	r3, r3, #1
 800352c:	3b01      	subs	r3, #1
 800352e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d107      	bne.n	8003544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d001      	beq.n	8003548 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40023800 	.word	0x40023800

08003558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0cc      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800356c:	4b68      	ldr	r3, [pc, #416]	@ (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d90c      	bls.n	8003594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357a:	4b65      	ldr	r3, [pc, #404]	@ (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003582:	4b63      	ldr	r3, [pc, #396]	@ (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0b8      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d020      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035ac:	4b59      	ldr	r3, [pc, #356]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a58      	ldr	r2, [pc, #352]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035c4:	4b53      	ldr	r3, [pc, #332]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4a52      	ldr	r2, [pc, #328]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d0:	4b50      	ldr	r3, [pc, #320]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	494d      	ldr	r1, [pc, #308]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d044      	beq.n	8003678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d107      	bne.n	8003606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f6:	4b47      	ldr	r3, [pc, #284]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d119      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e07f      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d003      	beq.n	8003616 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003612:	2b03      	cmp	r3, #3
 8003614:	d107      	bne.n	8003626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003616:	4b3f      	ldr	r3, [pc, #252]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d109      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e06f      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003626:	4b3b      	ldr	r3, [pc, #236]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e067      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003636:	4b37      	ldr	r3, [pc, #220]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f023 0203 	bic.w	r2, r3, #3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	4934      	ldr	r1, [pc, #208]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	4313      	orrs	r3, r2
 8003646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003648:	f7fd ff62 	bl	8001510 <HAL_GetTick>
 800364c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	e00a      	b.n	8003666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003650:	f7fd ff5e 	bl	8001510 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800365e:	4293      	cmp	r3, r2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e04f      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	4b2b      	ldr	r3, [pc, #172]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 020c 	and.w	r2, r3, #12
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	429a      	cmp	r2, r3
 8003676:	d1eb      	bne.n	8003650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003678:	4b25      	ldr	r3, [pc, #148]	@ (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d20c      	bcs.n	80036a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003686:	4b22      	ldr	r3, [pc, #136]	@ (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800368e:	4b20      	ldr	r3, [pc, #128]	@ (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d001      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e032      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ac:	4b19      	ldr	r3, [pc, #100]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	4916      	ldr	r1, [pc, #88]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ca:	4b12      	ldr	r3, [pc, #72]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	490e      	ldr	r1, [pc, #56]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036de:	f000 f821 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 80036e2:	4602      	mov	r2, r0
 80036e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	490a      	ldr	r1, [pc, #40]	@ (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 80036f0:	5ccb      	ldrb	r3, [r1, r3]
 80036f2:	fa22 f303 	lsr.w	r3, r2, r3
 80036f6:	4a09      	ldr	r2, [pc, #36]	@ (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80036f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036fa:	4b09      	ldr	r3, [pc, #36]	@ (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fd fec2 	bl	8001488 <HAL_InitTick>

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40023c00 	.word	0x40023c00
 8003714:	40023800 	.word	0x40023800
 8003718:	08009568 	.word	0x08009568
 800371c:	20000004 	.word	0x20000004
 8003720:	20000008 	.word	0x20000008

08003724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003728:	b094      	sub	sp, #80	@ 0x50
 800372a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800373c:	4b79      	ldr	r3, [pc, #484]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 030c 	and.w	r3, r3, #12
 8003744:	2b08      	cmp	r3, #8
 8003746:	d00d      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0x40>
 8003748:	2b08      	cmp	r3, #8
 800374a:	f200 80e1 	bhi.w	8003910 <HAL_RCC_GetSysClockFreq+0x1ec>
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0x34>
 8003752:	2b04      	cmp	r3, #4
 8003754:	d003      	beq.n	800375e <HAL_RCC_GetSysClockFreq+0x3a>
 8003756:	e0db      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003758:	4b73      	ldr	r3, [pc, #460]	@ (8003928 <HAL_RCC_GetSysClockFreq+0x204>)
 800375a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800375c:	e0db      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800375e:	4b73      	ldr	r3, [pc, #460]	@ (800392c <HAL_RCC_GetSysClockFreq+0x208>)
 8003760:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003762:	e0d8      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003764:	4b6f      	ldr	r3, [pc, #444]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800376c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800376e:	4b6d      	ldr	r3, [pc, #436]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d063      	beq.n	8003842 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800377a:	4b6a      	ldr	r3, [pc, #424]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	099b      	lsrs	r3, r3, #6
 8003780:	2200      	movs	r2, #0
 8003782:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003784:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378c:	633b      	str	r3, [r7, #48]	@ 0x30
 800378e:	2300      	movs	r3, #0
 8003790:	637b      	str	r3, [r7, #52]	@ 0x34
 8003792:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003796:	4622      	mov	r2, r4
 8003798:	462b      	mov	r3, r5
 800379a:	f04f 0000 	mov.w	r0, #0
 800379e:	f04f 0100 	mov.w	r1, #0
 80037a2:	0159      	lsls	r1, r3, #5
 80037a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a8:	0150      	lsls	r0, r2, #5
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4621      	mov	r1, r4
 80037b0:	1a51      	subs	r1, r2, r1
 80037b2:	6139      	str	r1, [r7, #16]
 80037b4:	4629      	mov	r1, r5
 80037b6:	eb63 0301 	sbc.w	r3, r3, r1
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037c8:	4659      	mov	r1, fp
 80037ca:	018b      	lsls	r3, r1, #6
 80037cc:	4651      	mov	r1, sl
 80037ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037d2:	4651      	mov	r1, sl
 80037d4:	018a      	lsls	r2, r1, #6
 80037d6:	4651      	mov	r1, sl
 80037d8:	ebb2 0801 	subs.w	r8, r2, r1
 80037dc:	4659      	mov	r1, fp
 80037de:	eb63 0901 	sbc.w	r9, r3, r1
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037f6:	4690      	mov	r8, r2
 80037f8:	4699      	mov	r9, r3
 80037fa:	4623      	mov	r3, r4
 80037fc:	eb18 0303 	adds.w	r3, r8, r3
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	462b      	mov	r3, r5
 8003804:	eb49 0303 	adc.w	r3, r9, r3
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003816:	4629      	mov	r1, r5
 8003818:	024b      	lsls	r3, r1, #9
 800381a:	4621      	mov	r1, r4
 800381c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003820:	4621      	mov	r1, r4
 8003822:	024a      	lsls	r2, r1, #9
 8003824:	4610      	mov	r0, r2
 8003826:	4619      	mov	r1, r3
 8003828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800382a:	2200      	movs	r2, #0
 800382c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800382e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003830:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003834:	f7fc fd3c 	bl	80002b0 <__aeabi_uldivmod>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4613      	mov	r3, r2
 800383e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003840:	e058      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003842:	4b38      	ldr	r3, [pc, #224]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	099b      	lsrs	r3, r3, #6
 8003848:	2200      	movs	r2, #0
 800384a:	4618      	mov	r0, r3
 800384c:	4611      	mov	r1, r2
 800384e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003852:	623b      	str	r3, [r7, #32]
 8003854:	2300      	movs	r3, #0
 8003856:	627b      	str	r3, [r7, #36]	@ 0x24
 8003858:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800385c:	4642      	mov	r2, r8
 800385e:	464b      	mov	r3, r9
 8003860:	f04f 0000 	mov.w	r0, #0
 8003864:	f04f 0100 	mov.w	r1, #0
 8003868:	0159      	lsls	r1, r3, #5
 800386a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800386e:	0150      	lsls	r0, r2, #5
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4641      	mov	r1, r8
 8003876:	ebb2 0a01 	subs.w	sl, r2, r1
 800387a:	4649      	mov	r1, r9
 800387c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800388c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003890:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003894:	ebb2 040a 	subs.w	r4, r2, sl
 8003898:	eb63 050b 	sbc.w	r5, r3, fp
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	00eb      	lsls	r3, r5, #3
 80038a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038aa:	00e2      	lsls	r2, r4, #3
 80038ac:	4614      	mov	r4, r2
 80038ae:	461d      	mov	r5, r3
 80038b0:	4643      	mov	r3, r8
 80038b2:	18e3      	adds	r3, r4, r3
 80038b4:	603b      	str	r3, [r7, #0]
 80038b6:	464b      	mov	r3, r9
 80038b8:	eb45 0303 	adc.w	r3, r5, r3
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038ca:	4629      	mov	r1, r5
 80038cc:	028b      	lsls	r3, r1, #10
 80038ce:	4621      	mov	r1, r4
 80038d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038d4:	4621      	mov	r1, r4
 80038d6:	028a      	lsls	r2, r1, #10
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038de:	2200      	movs	r2, #0
 80038e0:	61bb      	str	r3, [r7, #24]
 80038e2:	61fa      	str	r2, [r7, #28]
 80038e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038e8:	f7fc fce2 	bl	80002b0 <__aeabi_uldivmod>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4613      	mov	r3, r2
 80038f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	0c1b      	lsrs	r3, r3, #16
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	3301      	adds	r3, #1
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003904:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003908:	fbb2 f3f3 	udiv	r3, r2, r3
 800390c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800390e:	e002      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003910:	4b05      	ldr	r3, [pc, #20]	@ (8003928 <HAL_RCC_GetSysClockFreq+0x204>)
 8003912:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003918:	4618      	mov	r0, r3
 800391a:	3750      	adds	r7, #80	@ 0x50
 800391c:	46bd      	mov	sp, r7
 800391e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003922:	bf00      	nop
 8003924:	40023800 	.word	0x40023800
 8003928:	00f42400 	.word	0x00f42400
 800392c:	007a1200 	.word	0x007a1200

08003930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003934:	4b03      	ldr	r3, [pc, #12]	@ (8003944 <HAL_RCC_GetHCLKFreq+0x14>)
 8003936:	681b      	ldr	r3, [r3, #0]
}
 8003938:	4618      	mov	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	20000004 	.word	0x20000004

08003948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800394c:	f7ff fff0 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 8003950:	4602      	mov	r2, r0
 8003952:	4b05      	ldr	r3, [pc, #20]	@ (8003968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	0a9b      	lsrs	r3, r3, #10
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	4903      	ldr	r1, [pc, #12]	@ (800396c <HAL_RCC_GetPCLK1Freq+0x24>)
 800395e:	5ccb      	ldrb	r3, [r1, r3]
 8003960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003964:	4618      	mov	r0, r3
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40023800 	.word	0x40023800
 800396c:	08009578 	.word	0x08009578

08003970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003974:	f7ff ffdc 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 8003978:	4602      	mov	r2, r0
 800397a:	4b05      	ldr	r3, [pc, #20]	@ (8003990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	0b5b      	lsrs	r3, r3, #13
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	4903      	ldr	r1, [pc, #12]	@ (8003994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003986:	5ccb      	ldrb	r3, [r1, r3]
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40023800 	.word	0x40023800
 8003994:	08009578 	.word	0x08009578

08003998 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e042      	b.n	8003a30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fd fbe6 	bl	8001190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2224      	movs	r2, #36	@ 0x24
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fde9 	bl	80045b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08a      	sub	sp, #40	@ 0x28
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	4613      	mov	r3, r2
 8003a46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d175      	bne.n	8003b44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <HAL_UART_Transmit+0x2c>
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e06e      	b.n	8003b46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2221      	movs	r2, #33	@ 0x21
 8003a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a76:	f7fd fd4b 	bl	8001510 <HAL_GetTick>
 8003a7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	88fa      	ldrh	r2, [r7, #6]
 8003a80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	88fa      	ldrh	r2, [r7, #6]
 8003a86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a90:	d108      	bne.n	8003aa4 <HAL_UART_Transmit+0x6c>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d104      	bne.n	8003aa4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	61bb      	str	r3, [r7, #24]
 8003aa2:	e003      	b.n	8003aac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003aac:	e02e      	b.n	8003b0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2180      	movs	r1, #128	@ 0x80
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 fb4b 	bl	8004154 <UART_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e03a      	b.n	8003b46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10b      	bne.n	8003aee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ae4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	3302      	adds	r3, #2
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	e007      	b.n	8003afe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	781a      	ldrb	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	3301      	adds	r3, #1
 8003afc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1cb      	bne.n	8003aae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	2140      	movs	r1, #64	@ 0x40
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 fb17 	bl	8004154 <UART_WaitOnFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e006      	b.n	8003b46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	e000      	b.n	8003b46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
  }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d121      	bne.n	8003bac <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_UART_Transmit_IT+0x26>
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e01a      	b.n	8003bae <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	88fa      	ldrh	r2, [r7, #6]
 8003b82:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	88fa      	ldrh	r2, [r7, #6]
 8003b88:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2221      	movs	r2, #33	@ 0x21
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003ba6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e000      	b.n	8003bae <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003bac:	2302      	movs	r3, #2
  }
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b20      	cmp	r3, #32
 8003bd2:	d112      	bne.n	8003bfa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_UART_Receive_IT+0x26>
 8003bda:	88fb      	ldrh	r3, [r7, #6]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e00b      	b.n	8003bfc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003bea:	88fb      	ldrh	r3, [r7, #6]
 8003bec:	461a      	mov	r2, r3
 8003bee:	68b9      	ldr	r1, [r7, #8]
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 fb08 	bl	8004206 <UART_Start_Receive_IT>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	e000      	b.n	8003bfc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003bfa:	2302      	movs	r3, #2
  }
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b0ba      	sub	sp, #232	@ 0xe8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10f      	bne.n	8003c6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <HAL_UART_IRQHandler+0x66>
 8003c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fbe8 	bl	8004438 <UART_Receive_IT>
      return;
 8003c68:	e25b      	b.n	8004122 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 80de 	beq.w	8003e30 <HAL_UART_IRQHandler+0x22c>
 8003c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d106      	bne.n	8003c8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c84:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80d1 	beq.w	8003e30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <HAL_UART_IRQHandler+0xae>
 8003c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003caa:	f043 0201 	orr.w	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <HAL_UART_IRQHandler+0xd2>
 8003cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cce:	f043 0202 	orr.w	r2, r3, #2
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00b      	beq.n	8003cfa <HAL_UART_IRQHandler+0xf6>
 8003ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d005      	beq.n	8003cfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf2:	f043 0204 	orr.w	r2, r3, #4
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d011      	beq.n	8003d2a <HAL_UART_IRQHandler+0x126>
 8003d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d105      	bne.n	8003d1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d22:	f043 0208 	orr.w	r2, r3, #8
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 81f2 	beq.w	8004118 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_UART_IRQHandler+0x14e>
 8003d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fb73 	bl	8004438 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5c:	2b40      	cmp	r3, #64	@ 0x40
 8003d5e:	bf0c      	ite	eq
 8003d60:	2301      	moveq	r3, #1
 8003d62:	2300      	movne	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d103      	bne.n	8003d7e <HAL_UART_IRQHandler+0x17a>
 8003d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d04f      	beq.n	8003e1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fa7b 	bl	800427a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8e:	2b40      	cmp	r3, #64	@ 0x40
 8003d90:	d141      	bne.n	8003e16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3314      	adds	r3, #20
 8003d98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003da0:	e853 3f00 	ldrex	r3, [r3]
 8003da4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003dac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003db0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3314      	adds	r3, #20
 8003dba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003dbe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003dca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1d9      	bne.n	8003d92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d013      	beq.n	8003e0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dea:	4a7e      	ldr	r2, [pc, #504]	@ (8003fe4 <HAL_UART_IRQHandler+0x3e0>)
 8003dec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fd fd3d 	bl	8001872 <HAL_DMA_Abort_IT>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d016      	beq.n	8003e2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e08:	4610      	mov	r0, r2
 8003e0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0c:	e00e      	b.n	8003e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f98a 	bl	8004128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e14:	e00a      	b.n	8003e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f986 	bl	8004128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e1c:	e006      	b.n	8003e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f982 	bl	8004128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003e2a:	e175      	b.n	8004118 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2c:	bf00      	nop
    return;
 8003e2e:	e173      	b.n	8004118 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	f040 814f 	bne.w	80040d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e3e:	f003 0310 	and.w	r3, r3, #16
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8148 	beq.w	80040d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 8141 	beq.w	80040d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e56:	2300      	movs	r3, #0
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	60bb      	str	r3, [r7, #8]
 8003e6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e76:	2b40      	cmp	r3, #64	@ 0x40
 8003e78:	f040 80b6 	bne.w	8003fe8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 8145 	beq.w	800411c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	f080 813e 	bcs.w	800411c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ea6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eb2:	f000 8088 	beq.w	8003fc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	330c      	adds	r3, #12
 8003ebc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ecc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	330c      	adds	r3, #12
 8003ede:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ee2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ee6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003eee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ef2:	e841 2300 	strex	r3, r2, [r1]
 8003ef6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1d9      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3314      	adds	r3, #20
 8003f08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f14:	f023 0301 	bic.w	r3, r3, #1
 8003f18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3314      	adds	r3, #20
 8003f22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e1      	bne.n	8003f02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3314      	adds	r3, #20
 8003f44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3314      	adds	r3, #20
 8003f5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f6a:	e841 2300 	strex	r3, r2, [r1]
 8003f6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1e3      	bne.n	8003f3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	330c      	adds	r3, #12
 8003f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
 8003f92:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f96:	f023 0310 	bic.w	r3, r3, #16
 8003f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	330c      	adds	r3, #12
 8003fa4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003fa8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003faa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fb0:	e841 2300 	strex	r3, r2, [r1]
 8003fb4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003fb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e3      	bne.n	8003f84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fd fbe6 	bl	8001792 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	4619      	mov	r1, r3
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f8ad 	bl	800413c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fe2:	e09b      	b.n	800411c <HAL_UART_IRQHandler+0x518>
 8003fe4:	08004341 	.word	0x08004341
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 808e 	beq.w	8004120 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004004:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 8089 	beq.w	8004120 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	330c      	adds	r3, #12
 8004014:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004018:	e853 3f00 	ldrex	r3, [r3]
 800401c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800401e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004020:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004024:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	330c      	adds	r3, #12
 800402e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004032:	647a      	str	r2, [r7, #68]	@ 0x44
 8004034:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004038:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e3      	bne.n	800400e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3314      	adds	r3, #20
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	623b      	str	r3, [r7, #32]
   return(result);
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3314      	adds	r3, #20
 8004066:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800406a:	633a      	str	r2, [r7, #48]	@ 0x30
 800406c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e3      	bne.n	8004046 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2220      	movs	r2, #32
 8004082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	330c      	adds	r3, #12
 8004092:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	e853 3f00 	ldrex	r3, [r3]
 800409a:	60fb      	str	r3, [r7, #12]
   return(result);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0310 	bic.w	r3, r3, #16
 80040a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	330c      	adds	r3, #12
 80040ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80040b0:	61fa      	str	r2, [r7, #28]
 80040b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b4:	69b9      	ldr	r1, [r7, #24]
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	e841 2300 	strex	r3, r2, [r1]
 80040bc:	617b      	str	r3, [r7, #20]
   return(result);
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1e3      	bne.n	800408c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040ce:	4619      	mov	r1, r3
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f833 	bl	800413c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040d6:	e023      	b.n	8004120 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d009      	beq.n	80040f8 <HAL_UART_IRQHandler+0x4f4>
 80040e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f939 	bl	8004368 <UART_Transmit_IT>
    return;
 80040f6:	e014      	b.n	8004122 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00e      	beq.n	8004122 <HAL_UART_IRQHandler+0x51e>
 8004104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f979 	bl	8004408 <UART_EndTransmit_IT>
    return;
 8004116:	e004      	b.n	8004122 <HAL_UART_IRQHandler+0x51e>
    return;
 8004118:	bf00      	nop
 800411a:	e002      	b.n	8004122 <HAL_UART_IRQHandler+0x51e>
      return;
 800411c:	bf00      	nop
 800411e:	e000      	b.n	8004122 <HAL_UART_IRQHandler+0x51e>
      return;
 8004120:	bf00      	nop
  }
}
 8004122:	37e8      	adds	r7, #232	@ 0xe8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	4613      	mov	r3, r2
 8004162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004164:	e03b      	b.n	80041de <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416c:	d037      	beq.n	80041de <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416e:	f7fd f9cf 	bl	8001510 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	6a3a      	ldr	r2, [r7, #32]
 800417a:	429a      	cmp	r2, r3
 800417c:	d302      	bcc.n	8004184 <UART_WaitOnFlagUntilTimeout+0x30>
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e03a      	b.n	80041fe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d023      	beq.n	80041de <UART_WaitOnFlagUntilTimeout+0x8a>
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b80      	cmp	r3, #128	@ 0x80
 800419a:	d020      	beq.n	80041de <UART_WaitOnFlagUntilTimeout+0x8a>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b40      	cmp	r3, #64	@ 0x40
 80041a0:	d01d      	beq.n	80041de <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d116      	bne.n	80041de <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f857 	bl	800427a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2208      	movs	r2, #8
 80041d0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e00f      	b.n	80041fe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4013      	ands	r3, r2
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	bf0c      	ite	eq
 80041ee:	2301      	moveq	r3, #1
 80041f0:	2300      	movne	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d0b4      	beq.n	8004166 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004206:	b480      	push	{r7}
 8004208:	b085      	sub	sp, #20
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	4613      	mov	r3, r2
 8004212:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	88fa      	ldrh	r2, [r7, #6]
 800421e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	88fa      	ldrh	r2, [r7, #6]
 8004224:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2222      	movs	r2, #34	@ 0x22
 8004230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d007      	beq.n	800424c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800424a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0220 	orr.w	r2, r2, #32
 800426a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800427a:	b480      	push	{r7}
 800427c:	b095      	sub	sp, #84	@ 0x54
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	330c      	adds	r3, #12
 8004288:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004294:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004298:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	330c      	adds	r3, #12
 80042a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80042a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042aa:	e841 2300 	strex	r3, r2, [r1]
 80042ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1e5      	bne.n	8004282 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3314      	adds	r3, #20
 80042bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	e853 3f00 	ldrex	r3, [r3]
 80042c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3314      	adds	r3, #20
 80042d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1e5      	bne.n	80042b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d119      	bne.n	8004326 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	60bb      	str	r3, [r7, #8]
   return(result);
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f023 0310 	bic.w	r3, r3, #16
 8004308:	647b      	str	r3, [r7, #68]	@ 0x44
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	330c      	adds	r3, #12
 8004310:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004312:	61ba      	str	r2, [r7, #24]
 8004314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	6979      	ldr	r1, [r7, #20]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	613b      	str	r3, [r7, #16]
   return(result);
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e5      	bne.n	80042f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004334:	bf00      	nop
 8004336:	3754      	adds	r7, #84	@ 0x54
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f7ff fee4 	bl	8004128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004360:	bf00      	nop
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b21      	cmp	r3, #33	@ 0x21
 800437a:	d13e      	bne.n	80043fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004384:	d114      	bne.n	80043b0 <UART_Transmit_IT+0x48>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d110      	bne.n	80043b0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	461a      	mov	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	1c9a      	adds	r2, r3, #2
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	621a      	str	r2, [r3, #32]
 80043ae:	e008      	b.n	80043c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	1c59      	adds	r1, r3, #1
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6211      	str	r1, [r2, #32]
 80043ba:	781a      	ldrb	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	4619      	mov	r1, r3
 80043d0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10f      	bne.n	80043f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	e000      	b.n	80043fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043fa:	2302      	movs	r3, #2
  }
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800441e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7fc faaf 	bl	800098c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08c      	sub	sp, #48	@ 0x30
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b22      	cmp	r3, #34	@ 0x22
 800444a:	f040 80ae 	bne.w	80045aa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004456:	d117      	bne.n	8004488 <UART_Receive_IT+0x50>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d113      	bne.n	8004488 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004460:	2300      	movs	r3, #0
 8004462:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004468:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	b29b      	uxth	r3, r3
 8004472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004476:	b29a      	uxth	r2, r3
 8004478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004480:	1c9a      	adds	r2, r3, #2
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	629a      	str	r2, [r3, #40]	@ 0x28
 8004486:	e026      	b.n	80044d6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800448e:	2300      	movs	r3, #0
 8004490:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800449a:	d007      	beq.n	80044ac <UART_Receive_IT+0x74>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <UART_Receive_IT+0x82>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d106      	bne.n	80044ba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b6:	701a      	strb	r2, [r3, #0]
 80044b8:	e008      	b.n	80044cc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29b      	uxth	r3, r3
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	4619      	mov	r1, r3
 80044e4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d15d      	bne.n	80045a6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0220 	bic.w	r2, r2, #32
 80044f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004508:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695a      	ldr	r2, [r3, #20]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0201 	bic.w	r2, r2, #1
 8004518:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2220      	movs	r2, #32
 800451e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452c:	2b01      	cmp	r3, #1
 800452e:	d135      	bne.n	800459c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	330c      	adds	r3, #12
 800453c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	e853 3f00 	ldrex	r3, [r3]
 8004544:	613b      	str	r3, [r7, #16]
   return(result);
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f023 0310 	bic.w	r3, r3, #16
 800454c:	627b      	str	r3, [r7, #36]	@ 0x24
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	330c      	adds	r3, #12
 8004554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004556:	623a      	str	r2, [r7, #32]
 8004558:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455a:	69f9      	ldr	r1, [r7, #28]
 800455c:	6a3a      	ldr	r2, [r7, #32]
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	61bb      	str	r3, [r7, #24]
   return(result);
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1e5      	bne.n	8004536 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	2b10      	cmp	r3, #16
 8004576:	d10a      	bne.n	800458e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004578:	2300      	movs	r3, #0
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004592:	4619      	mov	r1, r3
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff fdd1 	bl	800413c <HAL_UARTEx_RxEventCallback>
 800459a:	e002      	b.n	80045a2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7fc f9d5 	bl	800094c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e002      	b.n	80045ac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	e000      	b.n	80045ac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80045aa:	2302      	movs	r3, #2
  }
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3730      	adds	r7, #48	@ 0x30
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045b8:	b0c0      	sub	sp, #256	@ 0x100
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d0:	68d9      	ldr	r1, [r3, #12]
 80045d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	ea40 0301 	orr.w	r3, r0, r1
 80045dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	431a      	orrs	r2, r3
 80045ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800460c:	f021 010c 	bic.w	r1, r1, #12
 8004610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800461a:	430b      	orrs	r3, r1
 800461c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800461e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800462a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800462e:	6999      	ldr	r1, [r3, #24]
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	ea40 0301 	orr.w	r3, r0, r1
 800463a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800463c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	4b8f      	ldr	r3, [pc, #572]	@ (8004880 <UART_SetConfig+0x2cc>)
 8004644:	429a      	cmp	r2, r3
 8004646:	d005      	beq.n	8004654 <UART_SetConfig+0xa0>
 8004648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	4b8d      	ldr	r3, [pc, #564]	@ (8004884 <UART_SetConfig+0x2d0>)
 8004650:	429a      	cmp	r2, r3
 8004652:	d104      	bne.n	800465e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004654:	f7ff f98c 	bl	8003970 <HAL_RCC_GetPCLK2Freq>
 8004658:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800465c:	e003      	b.n	8004666 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800465e:	f7ff f973 	bl	8003948 <HAL_RCC_GetPCLK1Freq>
 8004662:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004670:	f040 810c 	bne.w	800488c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004678:	2200      	movs	r2, #0
 800467a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800467e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004682:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004686:	4622      	mov	r2, r4
 8004688:	462b      	mov	r3, r5
 800468a:	1891      	adds	r1, r2, r2
 800468c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800468e:	415b      	adcs	r3, r3
 8004690:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004692:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004696:	4621      	mov	r1, r4
 8004698:	eb12 0801 	adds.w	r8, r2, r1
 800469c:	4629      	mov	r1, r5
 800469e:	eb43 0901 	adc.w	r9, r3, r1
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046b6:	4690      	mov	r8, r2
 80046b8:	4699      	mov	r9, r3
 80046ba:	4623      	mov	r3, r4
 80046bc:	eb18 0303 	adds.w	r3, r8, r3
 80046c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046c4:	462b      	mov	r3, r5
 80046c6:	eb49 0303 	adc.w	r3, r9, r3
 80046ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046e2:	460b      	mov	r3, r1
 80046e4:	18db      	adds	r3, r3, r3
 80046e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80046e8:	4613      	mov	r3, r2
 80046ea:	eb42 0303 	adc.w	r3, r2, r3
 80046ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80046f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046f8:	f7fb fdda 	bl	80002b0 <__aeabi_uldivmod>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4b61      	ldr	r3, [pc, #388]	@ (8004888 <UART_SetConfig+0x2d4>)
 8004702:	fba3 2302 	umull	r2, r3, r3, r2
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	011c      	lsls	r4, r3, #4
 800470a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800470e:	2200      	movs	r2, #0
 8004710:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004714:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004718:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800471c:	4642      	mov	r2, r8
 800471e:	464b      	mov	r3, r9
 8004720:	1891      	adds	r1, r2, r2
 8004722:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004724:	415b      	adcs	r3, r3
 8004726:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004728:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800472c:	4641      	mov	r1, r8
 800472e:	eb12 0a01 	adds.w	sl, r2, r1
 8004732:	4649      	mov	r1, r9
 8004734:	eb43 0b01 	adc.w	fp, r3, r1
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004744:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004748:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800474c:	4692      	mov	sl, r2
 800474e:	469b      	mov	fp, r3
 8004750:	4643      	mov	r3, r8
 8004752:	eb1a 0303 	adds.w	r3, sl, r3
 8004756:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800475a:	464b      	mov	r3, r9
 800475c:	eb4b 0303 	adc.w	r3, fp, r3
 8004760:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004770:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004774:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004778:	460b      	mov	r3, r1
 800477a:	18db      	adds	r3, r3, r3
 800477c:	643b      	str	r3, [r7, #64]	@ 0x40
 800477e:	4613      	mov	r3, r2
 8004780:	eb42 0303 	adc.w	r3, r2, r3
 8004784:	647b      	str	r3, [r7, #68]	@ 0x44
 8004786:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800478a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800478e:	f7fb fd8f 	bl	80002b0 <__aeabi_uldivmod>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	4611      	mov	r1, r2
 8004798:	4b3b      	ldr	r3, [pc, #236]	@ (8004888 <UART_SetConfig+0x2d4>)
 800479a:	fba3 2301 	umull	r2, r3, r3, r1
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	2264      	movs	r2, #100	@ 0x64
 80047a2:	fb02 f303 	mul.w	r3, r2, r3
 80047a6:	1acb      	subs	r3, r1, r3
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80047ae:	4b36      	ldr	r3, [pc, #216]	@ (8004888 <UART_SetConfig+0x2d4>)
 80047b0:	fba3 2302 	umull	r2, r3, r3, r2
 80047b4:	095b      	lsrs	r3, r3, #5
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80047bc:	441c      	add	r4, r3
 80047be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80047d0:	4642      	mov	r2, r8
 80047d2:	464b      	mov	r3, r9
 80047d4:	1891      	adds	r1, r2, r2
 80047d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047d8:	415b      	adcs	r3, r3
 80047da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047e0:	4641      	mov	r1, r8
 80047e2:	1851      	adds	r1, r2, r1
 80047e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80047e6:	4649      	mov	r1, r9
 80047e8:	414b      	adcs	r3, r1
 80047ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047f8:	4659      	mov	r1, fp
 80047fa:	00cb      	lsls	r3, r1, #3
 80047fc:	4651      	mov	r1, sl
 80047fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004802:	4651      	mov	r1, sl
 8004804:	00ca      	lsls	r2, r1, #3
 8004806:	4610      	mov	r0, r2
 8004808:	4619      	mov	r1, r3
 800480a:	4603      	mov	r3, r0
 800480c:	4642      	mov	r2, r8
 800480e:	189b      	adds	r3, r3, r2
 8004810:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004814:	464b      	mov	r3, r9
 8004816:	460a      	mov	r2, r1
 8004818:	eb42 0303 	adc.w	r3, r2, r3
 800481c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800482c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004830:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004834:	460b      	mov	r3, r1
 8004836:	18db      	adds	r3, r3, r3
 8004838:	62bb      	str	r3, [r7, #40]	@ 0x28
 800483a:	4613      	mov	r3, r2
 800483c:	eb42 0303 	adc.w	r3, r2, r3
 8004840:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004842:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004846:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800484a:	f7fb fd31 	bl	80002b0 <__aeabi_uldivmod>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	4b0d      	ldr	r3, [pc, #52]	@ (8004888 <UART_SetConfig+0x2d4>)
 8004854:	fba3 1302 	umull	r1, r3, r3, r2
 8004858:	095b      	lsrs	r3, r3, #5
 800485a:	2164      	movs	r1, #100	@ 0x64
 800485c:	fb01 f303 	mul.w	r3, r1, r3
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	3332      	adds	r3, #50	@ 0x32
 8004866:	4a08      	ldr	r2, [pc, #32]	@ (8004888 <UART_SetConfig+0x2d4>)
 8004868:	fba2 2303 	umull	r2, r3, r2, r3
 800486c:	095b      	lsrs	r3, r3, #5
 800486e:	f003 0207 	and.w	r2, r3, #7
 8004872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4422      	add	r2, r4
 800487a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800487c:	e106      	b.n	8004a8c <UART_SetConfig+0x4d8>
 800487e:	bf00      	nop
 8004880:	40011000 	.word	0x40011000
 8004884:	40011400 	.word	0x40011400
 8004888:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800488c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004890:	2200      	movs	r2, #0
 8004892:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004896:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800489a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800489e:	4642      	mov	r2, r8
 80048a0:	464b      	mov	r3, r9
 80048a2:	1891      	adds	r1, r2, r2
 80048a4:	6239      	str	r1, [r7, #32]
 80048a6:	415b      	adcs	r3, r3
 80048a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80048aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048ae:	4641      	mov	r1, r8
 80048b0:	1854      	adds	r4, r2, r1
 80048b2:	4649      	mov	r1, r9
 80048b4:	eb43 0501 	adc.w	r5, r3, r1
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	00eb      	lsls	r3, r5, #3
 80048c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048c6:	00e2      	lsls	r2, r4, #3
 80048c8:	4614      	mov	r4, r2
 80048ca:	461d      	mov	r5, r3
 80048cc:	4643      	mov	r3, r8
 80048ce:	18e3      	adds	r3, r4, r3
 80048d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048d4:	464b      	mov	r3, r9
 80048d6:	eb45 0303 	adc.w	r3, r5, r3
 80048da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048fa:	4629      	mov	r1, r5
 80048fc:	008b      	lsls	r3, r1, #2
 80048fe:	4621      	mov	r1, r4
 8004900:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004904:	4621      	mov	r1, r4
 8004906:	008a      	lsls	r2, r1, #2
 8004908:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800490c:	f7fb fcd0 	bl	80002b0 <__aeabi_uldivmod>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	4b60      	ldr	r3, [pc, #384]	@ (8004a98 <UART_SetConfig+0x4e4>)
 8004916:	fba3 2302 	umull	r2, r3, r3, r2
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	011c      	lsls	r4, r3, #4
 800491e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004922:	2200      	movs	r2, #0
 8004924:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004928:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800492c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004930:	4642      	mov	r2, r8
 8004932:	464b      	mov	r3, r9
 8004934:	1891      	adds	r1, r2, r2
 8004936:	61b9      	str	r1, [r7, #24]
 8004938:	415b      	adcs	r3, r3
 800493a:	61fb      	str	r3, [r7, #28]
 800493c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004940:	4641      	mov	r1, r8
 8004942:	1851      	adds	r1, r2, r1
 8004944:	6139      	str	r1, [r7, #16]
 8004946:	4649      	mov	r1, r9
 8004948:	414b      	adcs	r3, r1
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004958:	4659      	mov	r1, fp
 800495a:	00cb      	lsls	r3, r1, #3
 800495c:	4651      	mov	r1, sl
 800495e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004962:	4651      	mov	r1, sl
 8004964:	00ca      	lsls	r2, r1, #3
 8004966:	4610      	mov	r0, r2
 8004968:	4619      	mov	r1, r3
 800496a:	4603      	mov	r3, r0
 800496c:	4642      	mov	r2, r8
 800496e:	189b      	adds	r3, r3, r2
 8004970:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004974:	464b      	mov	r3, r9
 8004976:	460a      	mov	r2, r1
 8004978:	eb42 0303 	adc.w	r3, r2, r3
 800497c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	67bb      	str	r3, [r7, #120]	@ 0x78
 800498a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004998:	4649      	mov	r1, r9
 800499a:	008b      	lsls	r3, r1, #2
 800499c:	4641      	mov	r1, r8
 800499e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049a2:	4641      	mov	r1, r8
 80049a4:	008a      	lsls	r2, r1, #2
 80049a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80049aa:	f7fb fc81 	bl	80002b0 <__aeabi_uldivmod>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4611      	mov	r1, r2
 80049b4:	4b38      	ldr	r3, [pc, #224]	@ (8004a98 <UART_SetConfig+0x4e4>)
 80049b6:	fba3 2301 	umull	r2, r3, r3, r1
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	2264      	movs	r2, #100	@ 0x64
 80049be:	fb02 f303 	mul.w	r3, r2, r3
 80049c2:	1acb      	subs	r3, r1, r3
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	3332      	adds	r3, #50	@ 0x32
 80049c8:	4a33      	ldr	r2, [pc, #204]	@ (8004a98 <UART_SetConfig+0x4e4>)
 80049ca:	fba2 2303 	umull	r2, r3, r2, r3
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049d4:	441c      	add	r4, r3
 80049d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049da:	2200      	movs	r2, #0
 80049dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80049de:	677a      	str	r2, [r7, #116]	@ 0x74
 80049e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049e4:	4642      	mov	r2, r8
 80049e6:	464b      	mov	r3, r9
 80049e8:	1891      	adds	r1, r2, r2
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	415b      	adcs	r3, r3
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049f4:	4641      	mov	r1, r8
 80049f6:	1851      	adds	r1, r2, r1
 80049f8:	6039      	str	r1, [r7, #0]
 80049fa:	4649      	mov	r1, r9
 80049fc:	414b      	adcs	r3, r1
 80049fe:	607b      	str	r3, [r7, #4]
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a0c:	4659      	mov	r1, fp
 8004a0e:	00cb      	lsls	r3, r1, #3
 8004a10:	4651      	mov	r1, sl
 8004a12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a16:	4651      	mov	r1, sl
 8004a18:	00ca      	lsls	r2, r1, #3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4603      	mov	r3, r0
 8004a20:	4642      	mov	r2, r8
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a26:	464b      	mov	r3, r9
 8004a28:	460a      	mov	r2, r1
 8004a2a:	eb42 0303 	adc.w	r3, r2, r3
 8004a2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a48:	4649      	mov	r1, r9
 8004a4a:	008b      	lsls	r3, r1, #2
 8004a4c:	4641      	mov	r1, r8
 8004a4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a52:	4641      	mov	r1, r8
 8004a54:	008a      	lsls	r2, r1, #2
 8004a56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a5a:	f7fb fc29 	bl	80002b0 <__aeabi_uldivmod>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	4b0d      	ldr	r3, [pc, #52]	@ (8004a98 <UART_SetConfig+0x4e4>)
 8004a64:	fba3 1302 	umull	r1, r3, r3, r2
 8004a68:	095b      	lsrs	r3, r3, #5
 8004a6a:	2164      	movs	r1, #100	@ 0x64
 8004a6c:	fb01 f303 	mul.w	r3, r1, r3
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	3332      	adds	r3, #50	@ 0x32
 8004a76:	4a08      	ldr	r2, [pc, #32]	@ (8004a98 <UART_SetConfig+0x4e4>)
 8004a78:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7c:	095b      	lsrs	r3, r3, #5
 8004a7e:	f003 020f 	and.w	r2, r3, #15
 8004a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4422      	add	r2, r4
 8004a8a:	609a      	str	r2, [r3, #8]
}
 8004a8c:	bf00      	nop
 8004a8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a92:	46bd      	mov	sp, r7
 8004a94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a98:	51eb851f 	.word	0x51eb851f

08004a9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a9c:	b084      	sub	sp, #16
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	f107 001c 	add.w	r0, r7, #28
 8004aaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004aae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d123      	bne.n	8004afe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004aca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ade:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d105      	bne.n	8004af2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f001 fae8 	bl	80060c8 <USB_CoreReset>
 8004af8:	4603      	mov	r3, r0
 8004afa:	73fb      	strb	r3, [r7, #15]
 8004afc:	e01b      	b.n	8004b36 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f001 fadc 	bl	80060c8 <USB_CoreReset>
 8004b10:	4603      	mov	r3, r0
 8004b12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b14:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b20:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b28:	e005      	b.n	8004b36 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b36:	7fbb      	ldrb	r3, [r7, #30]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d10b      	bne.n	8004b54 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f043 0206 	orr.w	r2, r3, #6
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f043 0220 	orr.w	r2, r3, #32
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b60:	b004      	add	sp, #16
 8004b62:	4770      	bx	lr

08004b64 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d165      	bne.n	8004c44 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4a41      	ldr	r2, [pc, #260]	@ (8004c80 <USB_SetTurnaroundTime+0x11c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d906      	bls.n	8004b8e <USB_SetTurnaroundTime+0x2a>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4a40      	ldr	r2, [pc, #256]	@ (8004c84 <USB_SetTurnaroundTime+0x120>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d202      	bcs.n	8004b8e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b88:	230f      	movs	r3, #15
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	e062      	b.n	8004c54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	4a3c      	ldr	r2, [pc, #240]	@ (8004c84 <USB_SetTurnaroundTime+0x120>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d306      	bcc.n	8004ba4 <USB_SetTurnaroundTime+0x40>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	4a3b      	ldr	r2, [pc, #236]	@ (8004c88 <USB_SetTurnaroundTime+0x124>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d202      	bcs.n	8004ba4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b9e:	230e      	movs	r3, #14
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	e057      	b.n	8004c54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4a38      	ldr	r2, [pc, #224]	@ (8004c88 <USB_SetTurnaroundTime+0x124>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d306      	bcc.n	8004bba <USB_SetTurnaroundTime+0x56>
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4a37      	ldr	r2, [pc, #220]	@ (8004c8c <USB_SetTurnaroundTime+0x128>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d202      	bcs.n	8004bba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004bb4:	230d      	movs	r3, #13
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	e04c      	b.n	8004c54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	4a33      	ldr	r2, [pc, #204]	@ (8004c8c <USB_SetTurnaroundTime+0x128>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d306      	bcc.n	8004bd0 <USB_SetTurnaroundTime+0x6c>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	4a32      	ldr	r2, [pc, #200]	@ (8004c90 <USB_SetTurnaroundTime+0x12c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d802      	bhi.n	8004bd0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004bca:	230c      	movs	r3, #12
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	e041      	b.n	8004c54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	4a2f      	ldr	r2, [pc, #188]	@ (8004c90 <USB_SetTurnaroundTime+0x12c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d906      	bls.n	8004be6 <USB_SetTurnaroundTime+0x82>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4a2e      	ldr	r2, [pc, #184]	@ (8004c94 <USB_SetTurnaroundTime+0x130>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d802      	bhi.n	8004be6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004be0:	230b      	movs	r3, #11
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	e036      	b.n	8004c54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	4a2a      	ldr	r2, [pc, #168]	@ (8004c94 <USB_SetTurnaroundTime+0x130>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d906      	bls.n	8004bfc <USB_SetTurnaroundTime+0x98>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	4a29      	ldr	r2, [pc, #164]	@ (8004c98 <USB_SetTurnaroundTime+0x134>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d802      	bhi.n	8004bfc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004bf6:	230a      	movs	r3, #10
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	e02b      	b.n	8004c54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4a26      	ldr	r2, [pc, #152]	@ (8004c98 <USB_SetTurnaroundTime+0x134>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d906      	bls.n	8004c12 <USB_SetTurnaroundTime+0xae>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	4a25      	ldr	r2, [pc, #148]	@ (8004c9c <USB_SetTurnaroundTime+0x138>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d202      	bcs.n	8004c12 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004c0c:	2309      	movs	r3, #9
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	e020      	b.n	8004c54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	4a21      	ldr	r2, [pc, #132]	@ (8004c9c <USB_SetTurnaroundTime+0x138>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d306      	bcc.n	8004c28 <USB_SetTurnaroundTime+0xc4>
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	4a20      	ldr	r2, [pc, #128]	@ (8004ca0 <USB_SetTurnaroundTime+0x13c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d802      	bhi.n	8004c28 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c22:	2308      	movs	r3, #8
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	e015      	b.n	8004c54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ca0 <USB_SetTurnaroundTime+0x13c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d906      	bls.n	8004c3e <USB_SetTurnaroundTime+0xda>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca4 <USB_SetTurnaroundTime+0x140>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d202      	bcs.n	8004c3e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c38:	2307      	movs	r3, #7
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	e00a      	b.n	8004c54 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c3e:	2306      	movs	r3, #6
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	e007      	b.n	8004c54 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d102      	bne.n	8004c50 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004c4a:	2309      	movs	r3, #9
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	e001      	b.n	8004c54 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c50:	2309      	movs	r3, #9
 8004c52:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	029b      	lsls	r3, r3, #10
 8004c68:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	00d8acbf 	.word	0x00d8acbf
 8004c84:	00e4e1c0 	.word	0x00e4e1c0
 8004c88:	00f42400 	.word	0x00f42400
 8004c8c:	01067380 	.word	0x01067380
 8004c90:	011a499f 	.word	0x011a499f
 8004c94:	01312cff 	.word	0x01312cff
 8004c98:	014ca43f 	.word	0x014ca43f
 8004c9c:	016e3600 	.word	0x016e3600
 8004ca0:	01a6ab1f 	.word	0x01a6ab1f
 8004ca4:	01e84800 	.word	0x01e84800

08004ca8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f043 0201 	orr.w	r2, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f023 0201 	bic.w	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d115      	bne.n	8004d3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d1a:	200a      	movs	r0, #10
 8004d1c:	f7fc fc04 	bl	8001528 <HAL_Delay>
      ms += 10U;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	330a      	adds	r3, #10
 8004d24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f001 f93f 	bl	8005faa <USB_GetMode>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d01e      	beq.n	8004d70 <USB_SetCurrentMode+0x84>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d36:	d9f0      	bls.n	8004d1a <USB_SetCurrentMode+0x2e>
 8004d38:	e01a      	b.n	8004d70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d3a:	78fb      	ldrb	r3, [r7, #3]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d115      	bne.n	8004d6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d4c:	200a      	movs	r0, #10
 8004d4e:	f7fc fbeb 	bl	8001528 <HAL_Delay>
      ms += 10U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	330a      	adds	r3, #10
 8004d56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f001 f926 	bl	8005faa <USB_GetMode>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <USB_SetCurrentMode+0x84>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d68:	d9f0      	bls.n	8004d4c <USB_SetCurrentMode+0x60>
 8004d6a:	e001      	b.n	8004d70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e005      	b.n	8004d7c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2bc8      	cmp	r3, #200	@ 0xc8
 8004d74:	d101      	bne.n	8004d7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d84:	b084      	sub	sp, #16
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b086      	sub	sp, #24
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004d92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d9e:	2300      	movs	r3, #0
 8004da0:	613b      	str	r3, [r7, #16]
 8004da2:	e009      	b.n	8004db8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	3340      	adds	r3, #64	@ 0x40
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	2200      	movs	r2, #0
 8004db0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	3301      	adds	r3, #1
 8004db6:	613b      	str	r3, [r7, #16]
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	2b0e      	cmp	r3, #14
 8004dbc:	d9f2      	bls.n	8004da4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004dbe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d11c      	bne.n	8004e00 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dd4:	f043 0302 	orr.w	r3, r3, #2
 8004dd8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dde:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dea:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	639a      	str	r2, [r3, #56]	@ 0x38
 8004dfe:	e00b      	b.n	8004e18 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e04:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e10:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e1e:	461a      	mov	r2, r3
 8004e20:	2300      	movs	r3, #0
 8004e22:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e24:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d10d      	bne.n	8004e48 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d104      	bne.n	8004e3e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e34:	2100      	movs	r1, #0
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f968 	bl	800510c <USB_SetDevSpeed>
 8004e3c:	e008      	b.n	8004e50 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e3e:	2101      	movs	r1, #1
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f963 	bl	800510c <USB_SetDevSpeed>
 8004e46:	e003      	b.n	8004e50 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e48:	2103      	movs	r1, #3
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f95e 	bl	800510c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e50:	2110      	movs	r1, #16
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f8fa 	bl	800504c <USB_FlushTxFifo>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f924 	bl	80050b0 <USB_FlushRxFifo>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e78:	461a      	mov	r2, r3
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e84:	461a      	mov	r2, r3
 8004e86:	2300      	movs	r3, #0
 8004e88:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e90:	461a      	mov	r2, r3
 8004e92:	2300      	movs	r3, #0
 8004e94:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e96:	2300      	movs	r3, #0
 8004e98:	613b      	str	r3, [r7, #16]
 8004e9a:	e043      	b.n	8004f24 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004eae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004eb2:	d118      	bne.n	8004ee6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10a      	bne.n	8004ed0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	e013      	b.n	8004ef8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004edc:	461a      	mov	r2, r3
 8004ede:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	e008      	b.n	8004ef8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f04:	461a      	mov	r2, r3
 8004f06:	2300      	movs	r3, #0
 8004f08:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f16:	461a      	mov	r2, r3
 8004f18:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	3301      	adds	r3, #1
 8004f22:	613b      	str	r3, [r7, #16]
 8004f24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f28:	461a      	mov	r2, r3
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d3b5      	bcc.n	8004e9c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f30:	2300      	movs	r3, #0
 8004f32:	613b      	str	r3, [r7, #16]
 8004f34:	e043      	b.n	8004fbe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f4c:	d118      	bne.n	8004f80 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10a      	bne.n	8004f6a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f60:	461a      	mov	r2, r3
 8004f62:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	e013      	b.n	8004f92 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f76:	461a      	mov	r2, r3
 8004f78:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	e008      	b.n	8004f92 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	2300      	movs	r3, #0
 8004f90:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004fb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	613b      	str	r3, [r7, #16]
 8004fbe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d3b5      	bcc.n	8004f36 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fdc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004fea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004fec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d105      	bne.n	8005000 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	f043 0210 	orr.w	r2, r3, #16
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699a      	ldr	r2, [r3, #24]
 8005004:	4b10      	ldr	r3, [pc, #64]	@ (8005048 <USB_DevInit+0x2c4>)
 8005006:	4313      	orrs	r3, r2
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800500c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005010:	2b00      	cmp	r3, #0
 8005012:	d005      	beq.n	8005020 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	f043 0208 	orr.w	r2, r3, #8
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005020:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005024:	2b01      	cmp	r3, #1
 8005026:	d107      	bne.n	8005038 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005030:	f043 0304 	orr.w	r3, r3, #4
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005038:	7dfb      	ldrb	r3, [r7, #23]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005044:	b004      	add	sp, #16
 8005046:	4770      	bx	lr
 8005048:	803c3800 	.word	0x803c3800

0800504c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3301      	adds	r3, #1
 800505e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005066:	d901      	bls.n	800506c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e01b      	b.n	80050a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	daf2      	bge.n	800505a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	019b      	lsls	r3, r3, #6
 800507c:	f043 0220 	orr.w	r2, r3, #32
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	3301      	adds	r3, #1
 8005088:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005090:	d901      	bls.n	8005096 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e006      	b.n	80050a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d0f0      	beq.n	8005084 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	3301      	adds	r3, #1
 80050c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050c8:	d901      	bls.n	80050ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e018      	b.n	8005100 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	daf2      	bge.n	80050bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2210      	movs	r2, #16
 80050de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3301      	adds	r3, #1
 80050e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050ec:	d901      	bls.n	80050f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e006      	b.n	8005100 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0310 	and.w	r3, r3, #16
 80050fa:	2b10      	cmp	r3, #16
 80050fc:	d0f0      	beq.n	80050e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	460b      	mov	r3, r1
 8005116:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	78fb      	ldrb	r3, [r7, #3]
 8005126:	68f9      	ldr	r1, [r7, #12]
 8005128:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800512c:	4313      	orrs	r3, r2
 800512e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800513e:	b480      	push	{r7}
 8005140:	b087      	sub	sp, #28
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 0306 	and.w	r3, r3, #6
 8005156:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d102      	bne.n	8005164 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800515e:	2300      	movs	r3, #0
 8005160:	75fb      	strb	r3, [r7, #23]
 8005162:	e00a      	b.n	800517a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b02      	cmp	r3, #2
 8005168:	d002      	beq.n	8005170 <USB_GetDevSpeed+0x32>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b06      	cmp	r3, #6
 800516e:	d102      	bne.n	8005176 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005170:	2302      	movs	r3, #2
 8005172:	75fb      	strb	r3, [r7, #23]
 8005174:	e001      	b.n	800517a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005176:	230f      	movs	r3, #15
 8005178:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800517a:	7dfb      	ldrb	r3, [r7, #23]
}
 800517c:	4618      	mov	r0, r3
 800517e:	371c      	adds	r7, #28
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	785b      	ldrb	r3, [r3, #1]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d13a      	bne.n	800521a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051aa:	69da      	ldr	r2, [r3, #28]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	f003 030f 	and.w	r3, r3, #15
 80051b4:	2101      	movs	r1, #1
 80051b6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	68f9      	ldr	r1, [r7, #12]
 80051be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051c2:	4313      	orrs	r3, r2
 80051c4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d155      	bne.n	8005288 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	791b      	ldrb	r3, [r3, #4]
 80051f6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051f8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	059b      	lsls	r3, r3, #22
 80051fe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005200:	4313      	orrs	r3, r2
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	440a      	add	r2, r1
 800520a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800520e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	e036      	b.n	8005288 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005220:	69da      	ldr	r2, [r3, #28]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	2101      	movs	r1, #1
 800522c:	fa01 f303 	lsl.w	r3, r1, r3
 8005230:	041b      	lsls	r3, r3, #16
 8005232:	68f9      	ldr	r1, [r7, #12]
 8005234:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005238:	4313      	orrs	r3, r2
 800523a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d11a      	bne.n	8005288 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	791b      	ldrb	r3, [r3, #4]
 800526c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800526e:	430b      	orrs	r3, r1
 8005270:	4313      	orrs	r3, r2
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	0151      	lsls	r1, r2, #5
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	440a      	add	r2, r1
 800527a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800527e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005286:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
	...

08005298 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	785b      	ldrb	r3, [r3, #1]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d161      	bne.n	8005378 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052ca:	d11f      	bne.n	800530c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80052ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	0151      	lsls	r1, r2, #5
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	440a      	add	r2, r1
 8005302:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005306:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800530a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005312:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	f003 030f 	and.w	r3, r3, #15
 800531c:	2101      	movs	r1, #1
 800531e:	fa01 f303 	lsl.w	r3, r1, r3
 8005322:	b29b      	uxth	r3, r3
 8005324:	43db      	mvns	r3, r3
 8005326:	68f9      	ldr	r1, [r7, #12]
 8005328:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800532c:	4013      	ands	r3, r2
 800532e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005336:	69da      	ldr	r2, [r3, #28]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	f003 030f 	and.w	r3, r3, #15
 8005340:	2101      	movs	r1, #1
 8005342:	fa01 f303 	lsl.w	r3, r1, r3
 8005346:	b29b      	uxth	r3, r3
 8005348:	43db      	mvns	r3, r3
 800534a:	68f9      	ldr	r1, [r7, #12]
 800534c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005350:	4013      	ands	r3, r2
 8005352:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	0159      	lsls	r1, r3, #5
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	440b      	add	r3, r1
 800536a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800536e:	4619      	mov	r1, r3
 8005370:	4b35      	ldr	r3, [pc, #212]	@ (8005448 <USB_DeactivateEndpoint+0x1b0>)
 8005372:	4013      	ands	r3, r2
 8005374:	600b      	str	r3, [r1, #0]
 8005376:	e060      	b.n	800543a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800538a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800538e:	d11f      	bne.n	80053d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	0151      	lsls	r1, r2, #5
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	440a      	add	r2, r1
 80053a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80053ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	0151      	lsls	r1, r2, #5
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	440a      	add	r2, r1
 80053c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	2101      	movs	r1, #1
 80053e2:	fa01 f303 	lsl.w	r3, r1, r3
 80053e6:	041b      	lsls	r3, r3, #16
 80053e8:	43db      	mvns	r3, r3
 80053ea:	68f9      	ldr	r1, [r7, #12]
 80053ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053f0:	4013      	ands	r3, r2
 80053f2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053fa:	69da      	ldr	r2, [r3, #28]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	2101      	movs	r1, #1
 8005406:	fa01 f303 	lsl.w	r3, r1, r3
 800540a:	041b      	lsls	r3, r3, #16
 800540c:	43db      	mvns	r3, r3
 800540e:	68f9      	ldr	r1, [r7, #12]
 8005410:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005414:	4013      	ands	r3, r2
 8005416:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	0159      	lsls	r1, r3, #5
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	440b      	add	r3, r1
 800542e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005432:	4619      	mov	r1, r3
 8005434:	4b05      	ldr	r3, [pc, #20]	@ (800544c <USB_DeactivateEndpoint+0x1b4>)
 8005436:	4013      	ands	r3, r2
 8005438:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	ec337800 	.word	0xec337800
 800544c:	eff37800 	.word	0xeff37800

08005450 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b08a      	sub	sp, #40	@ 0x28
 8005454:	af02      	add	r7, sp, #8
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	4613      	mov	r3, r2
 800545c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	785b      	ldrb	r3, [r3, #1]
 800546c:	2b01      	cmp	r3, #1
 800546e:	f040 817f 	bne.w	8005770 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d132      	bne.n	80054e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	0151      	lsls	r1, r2, #5
 800548c:	69fa      	ldr	r2, [r7, #28]
 800548e:	440a      	add	r2, r1
 8005490:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005494:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005498:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800549c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	0151      	lsls	r1, r2, #5
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	440a      	add	r2, r1
 80054b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	0151      	lsls	r1, r2, #5
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	440a      	add	r2, r1
 80054d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054d8:	0cdb      	lsrs	r3, r3, #19
 80054da:	04db      	lsls	r3, r3, #19
 80054dc:	6113      	str	r3, [r2, #16]
 80054de:	e097      	b.n	8005610 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054fa:	0cdb      	lsrs	r3, r3, #19
 80054fc:	04db      	lsls	r3, r3, #19
 80054fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	0151      	lsls	r1, r2, #5
 8005512:	69fa      	ldr	r2, [r7, #28]
 8005514:	440a      	add	r2, r1
 8005516:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800551a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800551e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005522:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d11a      	bne.n	8005560 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	691a      	ldr	r2, [r3, #16]
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	429a      	cmp	r2, r3
 8005534:	d903      	bls.n	800553e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	0151      	lsls	r1, r2, #5
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	440a      	add	r2, r1
 8005554:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005558:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800555c:	6113      	str	r3, [r2, #16]
 800555e:	e044      	b.n	80055ea <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	4413      	add	r3, r2
 800556a:	1e5a      	subs	r2, r3, #1
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	fbb2 f3f3 	udiv	r3, r2, r3
 8005574:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	8afb      	ldrh	r3, [r7, #22]
 8005586:	04d9      	lsls	r1, r3, #19
 8005588:	4ba4      	ldr	r3, [pc, #656]	@ (800581c <USB_EPStartXfer+0x3cc>)
 800558a:	400b      	ands	r3, r1
 800558c:	69b9      	ldr	r1, [r7, #24]
 800558e:	0148      	lsls	r0, r1, #5
 8005590:	69f9      	ldr	r1, [r7, #28]
 8005592:	4401      	add	r1, r0
 8005594:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005598:	4313      	orrs	r3, r2
 800559a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	791b      	ldrb	r3, [r3, #4]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d122      	bne.n	80055ea <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	0151      	lsls	r1, r2, #5
 80055b6:	69fa      	ldr	r2, [r7, #28]
 80055b8:	440a      	add	r2, r1
 80055ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055be:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80055c2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055d0:	691a      	ldr	r2, [r3, #16]
 80055d2:	8afb      	ldrh	r3, [r7, #22]
 80055d4:	075b      	lsls	r3, r3, #29
 80055d6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80055da:	69b9      	ldr	r1, [r7, #24]
 80055dc:	0148      	lsls	r0, r1, #5
 80055de:	69f9      	ldr	r1, [r7, #28]
 80055e0:	4401      	add	r1, r0
 80055e2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80055e6:	4313      	orrs	r3, r2
 80055e8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055f6:	691a      	ldr	r2, [r3, #16]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005600:	69b9      	ldr	r1, [r7, #24]
 8005602:	0148      	lsls	r0, r1, #5
 8005604:	69f9      	ldr	r1, [r7, #28]
 8005606:	4401      	add	r1, r0
 8005608:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800560c:	4313      	orrs	r3, r2
 800560e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005610:	79fb      	ldrb	r3, [r7, #7]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d14b      	bne.n	80056ae <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d009      	beq.n	8005632 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	4413      	add	r3, r2
 8005626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800562a:	461a      	mov	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	791b      	ldrb	r3, [r3, #4]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d128      	bne.n	800568c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005646:	2b00      	cmp	r3, #0
 8005648:	d110      	bne.n	800566c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	0151      	lsls	r1, r2, #5
 800565c:	69fa      	ldr	r2, [r7, #28]
 800565e:	440a      	add	r2, r1
 8005660:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005664:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	e00f      	b.n	800568c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	015a      	lsls	r2, r3, #5
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	4413      	add	r3, r2
 8005674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	0151      	lsls	r1, r2, #5
 800567e:	69fa      	ldr	r2, [r7, #28]
 8005680:	440a      	add	r2, r1
 8005682:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800568a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	0151      	lsls	r1, r2, #5
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	440a      	add	r2, r1
 80056a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056a6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	e166      	b.n	800597c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	0151      	lsls	r1, r2, #5
 80056c0:	69fa      	ldr	r2, [r7, #28]
 80056c2:	440a      	add	r2, r1
 80056c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056c8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80056cc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	791b      	ldrb	r3, [r3, #4]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d015      	beq.n	8005702 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 814e 	beq.w	800597c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	2101      	movs	r1, #1
 80056f2:	fa01 f303 	lsl.w	r3, r1, r3
 80056f6:	69f9      	ldr	r1, [r7, #28]
 80056f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056fc:	4313      	orrs	r3, r2
 80056fe:	634b      	str	r3, [r1, #52]	@ 0x34
 8005700:	e13c      	b.n	800597c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800570e:	2b00      	cmp	r3, #0
 8005710:	d110      	bne.n	8005734 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	0151      	lsls	r1, r2, #5
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	440a      	add	r2, r1
 8005728:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800572c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	e00f      	b.n	8005754 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	0151      	lsls	r1, r2, #5
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	440a      	add	r2, r1
 800574a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800574e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005752:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	68d9      	ldr	r1, [r3, #12]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	781a      	ldrb	r2, [r3, #0]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	b298      	uxth	r0, r3
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	4603      	mov	r3, r0
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 f9b9 	bl	8005ae0 <USB_WritePacket>
 800576e:	e105      	b.n	800597c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	0151      	lsls	r1, r2, #5
 8005782:	69fa      	ldr	r2, [r7, #28]
 8005784:	440a      	add	r2, r1
 8005786:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800578a:	0cdb      	lsrs	r3, r3, #19
 800578c:	04db      	lsls	r3, r3, #19
 800578e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	0151      	lsls	r1, r2, #5
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	440a      	add	r2, r1
 80057a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057aa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80057ae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80057b2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d132      	bne.n	8005820 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057de:	691a      	ldr	r2, [r3, #16]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057e8:	69b9      	ldr	r1, [r7, #24]
 80057ea:	0148      	lsls	r0, r1, #5
 80057ec:	69f9      	ldr	r1, [r7, #28]
 80057ee:	4401      	add	r1, r0
 80057f0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80057f4:	4313      	orrs	r3, r2
 80057f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	0151      	lsls	r1, r2, #5
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	440a      	add	r2, r1
 800580e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005812:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005816:	6113      	str	r3, [r2, #16]
 8005818:	e062      	b.n	80058e0 <USB_EPStartXfer+0x490>
 800581a:	bf00      	nop
 800581c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d123      	bne.n	8005870 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800583e:	69b9      	ldr	r1, [r7, #24]
 8005840:	0148      	lsls	r0, r1, #5
 8005842:	69f9      	ldr	r1, [r7, #28]
 8005844:	4401      	add	r1, r0
 8005846:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800584a:	4313      	orrs	r3, r2
 800584c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	0151      	lsls	r1, r2, #5
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	440a      	add	r2, r1
 8005864:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005868:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800586c:	6113      	str	r3, [r2, #16]
 800586e:	e037      	b.n	80058e0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	691a      	ldr	r2, [r3, #16]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	4413      	add	r3, r2
 800587a:	1e5a      	subs	r2, r3, #1
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	fbb2 f3f3 	udiv	r3, r2, r3
 8005884:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	8afa      	ldrh	r2, [r7, #22]
 800588c:	fb03 f202 	mul.w	r2, r3, r2
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058a0:	691a      	ldr	r2, [r3, #16]
 80058a2:	8afb      	ldrh	r3, [r7, #22]
 80058a4:	04d9      	lsls	r1, r3, #19
 80058a6:	4b38      	ldr	r3, [pc, #224]	@ (8005988 <USB_EPStartXfer+0x538>)
 80058a8:	400b      	ands	r3, r1
 80058aa:	69b9      	ldr	r1, [r7, #24]
 80058ac:	0148      	lsls	r0, r1, #5
 80058ae:	69f9      	ldr	r1, [r7, #28]
 80058b0:	4401      	add	r1, r0
 80058b2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80058b6:	4313      	orrs	r3, r2
 80058b8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c6:	691a      	ldr	r2, [r3, #16]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058d0:	69b9      	ldr	r1, [r7, #24]
 80058d2:	0148      	lsls	r0, r1, #5
 80058d4:	69f9      	ldr	r1, [r7, #28]
 80058d6:	4401      	add	r1, r0
 80058d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80058dc:	4313      	orrs	r3, r2
 80058de:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80058e0:	79fb      	ldrb	r3, [r7, #7]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d10d      	bne.n	8005902 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d009      	beq.n	8005902 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	68d9      	ldr	r1, [r3, #12]
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058fe:	460a      	mov	r2, r1
 8005900:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	791b      	ldrb	r3, [r3, #4]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d128      	bne.n	800595c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005916:	2b00      	cmp	r3, #0
 8005918:	d110      	bne.n	800593c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	0151      	lsls	r1, r2, #5
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	440a      	add	r2, r1
 8005930:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005934:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	e00f      	b.n	800595c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	0151      	lsls	r1, r2, #5
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	440a      	add	r2, r1
 8005952:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005956:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800595a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	0151      	lsls	r1, r2, #5
 800596e:	69fa      	ldr	r2, [r7, #28]
 8005970:	440a      	add	r2, r1
 8005972:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005976:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800597a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3720      	adds	r7, #32
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	1ff80000 	.word	0x1ff80000

0800598c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	785b      	ldrb	r3, [r3, #1]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d14a      	bne.n	8005a40 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059c2:	f040 8086 	bne.w	8005ad2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	7812      	ldrb	r2, [r2, #0]
 80059da:	0151      	lsls	r1, r2, #5
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	440a      	add	r2, r1
 80059e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80059e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	7812      	ldrb	r2, [r2, #0]
 80059fe:	0151      	lsls	r1, r2, #5
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	440a      	add	r2, r1
 8005a04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3301      	adds	r3, #1
 8005a12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d902      	bls.n	8005a24 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	75fb      	strb	r3, [r7, #23]
          break;
 8005a22:	e056      	b.n	8005ad2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a3c:	d0e7      	beq.n	8005a0e <USB_EPStopXfer+0x82>
 8005a3e:	e048      	b.n	8005ad2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a58:	d13b      	bne.n	8005ad2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	7812      	ldrb	r2, [r2, #0]
 8005a6e:	0151      	lsls	r1, r2, #5
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	440a      	add	r2, r1
 8005a74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a78:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a7c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	7812      	ldrb	r2, [r2, #0]
 8005a92:	0151      	lsls	r1, r2, #5
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	440a      	add	r2, r1
 8005a98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005aa0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d902      	bls.n	8005ab8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ab6:	e00c      	b.n	8005ad2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005acc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ad0:	d0e7      	beq.n	8005aa2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	371c      	adds	r7, #28
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b089      	sub	sp, #36	@ 0x24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	4611      	mov	r1, r2
 8005aec:	461a      	mov	r2, r3
 8005aee:	460b      	mov	r3, r1
 8005af0:	71fb      	strb	r3, [r7, #7]
 8005af2:	4613      	mov	r3, r2
 8005af4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005afe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d123      	bne.n	8005b4e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b06:	88bb      	ldrh	r3, [r7, #4]
 8005b08:	3303      	adds	r3, #3
 8005b0a:	089b      	lsrs	r3, r3, #2
 8005b0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b0e:	2300      	movs	r3, #0
 8005b10:	61bb      	str	r3, [r7, #24]
 8005b12:	e018      	b.n	8005b46 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b14:	79fb      	ldrb	r3, [r7, #7]
 8005b16:	031a      	lsls	r2, r3, #12
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b20:	461a      	mov	r2, r3
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	3301      	adds	r3, #1
 8005b32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	3301      	adds	r3, #1
 8005b38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	3301      	adds	r3, #1
 8005b44:	61bb      	str	r3, [r7, #24]
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d3e2      	bcc.n	8005b14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3724      	adds	r7, #36	@ 0x24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b08b      	sub	sp, #44	@ 0x2c
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	4613      	mov	r3, r2
 8005b68:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b72:	88fb      	ldrh	r3, [r7, #6]
 8005b74:	089b      	lsrs	r3, r3, #2
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b7a:	88fb      	ldrh	r3, [r7, #6]
 8005b7c:	f003 0303 	and.w	r3, r3, #3
 8005b80:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b82:	2300      	movs	r3, #0
 8005b84:	623b      	str	r3, [r7, #32]
 8005b86:	e014      	b.n	8005bb2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b92:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b96:	3301      	adds	r3, #1
 8005b98:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba8:	3301      	adds	r3, #1
 8005baa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	623b      	str	r3, [r7, #32]
 8005bb2:	6a3a      	ldr	r2, [r7, #32]
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d3e6      	bcc.n	8005b88 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005bba:	8bfb      	ldrh	r3, [r7, #30]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01e      	beq.n	8005bfe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f107 0310 	add.w	r3, r7, #16
 8005bd0:	6812      	ldr	r2, [r2, #0]
 8005bd2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	701a      	strb	r2, [r3, #0]
      i++;
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	3301      	adds	r3, #1
 8005bea:	623b      	str	r3, [r7, #32]
      pDest++;
 8005bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bee:	3301      	adds	r3, #1
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005bf2:	8bfb      	ldrh	r3, [r7, #30]
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005bf8:	8bfb      	ldrh	r3, [r7, #30]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1ea      	bne.n	8005bd4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	372c      	adds	r7, #44	@ 0x2c
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	785b      	ldrb	r3, [r3, #1]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d12c      	bne.n	8005c82 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	db12      	blt.n	8005c60 <USB_EPSetStall+0x54>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00f      	beq.n	8005c60 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	0151      	lsls	r1, r2, #5
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	440a      	add	r2, r1
 8005c56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c5a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c5e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	0151      	lsls	r1, r2, #5
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	440a      	add	r2, r1
 8005c76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005c7e:	6013      	str	r3, [r2, #0]
 8005c80:	e02b      	b.n	8005cda <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	db12      	blt.n	8005cba <USB_EPSetStall+0xae>
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00f      	beq.n	8005cba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cb4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005cb8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	0151      	lsls	r1, r2, #5
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	440a      	add	r2, r1
 8005cd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005cd8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	785b      	ldrb	r3, [r3, #1]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d128      	bne.n	8005d56 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	0151      	lsls	r1, r2, #5
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	440a      	add	r2, r1
 8005d1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d22:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	791b      	ldrb	r3, [r3, #4]
 8005d28:	2b03      	cmp	r3, #3
 8005d2a:	d003      	beq.n	8005d34 <USB_EPClearStall+0x4c>
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	791b      	ldrb	r3, [r3, #4]
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d138      	bne.n	8005da6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	0151      	lsls	r1, r2, #5
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	440a      	add	r2, r1
 8005d4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d52:	6013      	str	r3, [r2, #0]
 8005d54:	e027      	b.n	8005da6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	0151      	lsls	r1, r2, #5
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	440a      	add	r2, r1
 8005d6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d70:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d74:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	791b      	ldrb	r3, [r3, #4]
 8005d7a:	2b03      	cmp	r3, #3
 8005d7c:	d003      	beq.n	8005d86 <USB_EPClearStall+0x9e>
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	791b      	ldrb	r3, [r3, #4]
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d10f      	bne.n	8005da6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	0151      	lsls	r1, r2, #5
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	440a      	add	r2, r1
 8005d9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005da4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005dd2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005dd6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	78fb      	ldrb	r3, [r7, #3]
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005de8:	68f9      	ldr	r1, [r7, #12]
 8005dea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dee:	4313      	orrs	r3, r2
 8005df0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005e1a:	f023 0303 	bic.w	r3, r3, #3
 8005e1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e2e:	f023 0302 	bic.w	r3, r3, #2
 8005e32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b085      	sub	sp, #20
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005e5c:	f023 0303 	bic.w	r3, r3, #3
 8005e60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e70:	f043 0302 	orr.w	r3, r3, #2
 8005e74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b085      	sub	sp, #20
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	0c1b      	lsrs	r3, r3, #16
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b085      	sub	sp, #20
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	4013      	ands	r3, r2
 8005f00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	b29b      	uxth	r3, r3
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b085      	sub	sp, #20
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f22:	78fb      	ldrb	r3, [r7, #3]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f40:	68bb      	ldr	r3, [r7, #8]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b087      	sub	sp, #28
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	460b      	mov	r3, r1
 8005f58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f70:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005f72:	78fb      	ldrb	r3, [r7, #3]
 8005f74:	f003 030f 	and.w	r3, r3, #15
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7e:	01db      	lsls	r3, r3, #7
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b085      	sub	sp, #20
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fe0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005fe4:	f023 0307 	bic.w	r3, r3, #7
 8005fe8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ffc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	460b      	mov	r3, r1
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	333c      	adds	r3, #60	@ 0x3c
 8006022:	3304      	adds	r3, #4
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	4a26      	ldr	r2, [pc, #152]	@ (80060c4 <USB_EP0_OutStart+0xb8>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d90a      	bls.n	8006046 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800603c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006040:	d101      	bne.n	8006046 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	e037      	b.n	80060b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800604c:	461a      	mov	r2, r3
 800604e:	2300      	movs	r3, #0
 8006050:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006060:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006064:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006074:	f043 0318 	orr.w	r3, r3, #24
 8006078:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006088:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800608c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800608e:	7afb      	ldrb	r3, [r7, #11]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d10f      	bne.n	80060b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800609a:	461a      	mov	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060ae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80060b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	4f54300a 	.word	0x4f54300a

080060c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3301      	adds	r3, #1
 80060d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060e0:	d901      	bls.n	80060e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e01b      	b.n	800611e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	daf2      	bge.n	80060d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f043 0201 	orr.w	r2, r3, #1
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	3301      	adds	r3, #1
 8006102:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800610a:	d901      	bls.n	8006110 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e006      	b.n	800611e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b01      	cmp	r3, #1
 800611a:	d0f0      	beq.n	80060fe <USB_CoreReset+0x36>

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
	...

0800612c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	460b      	mov	r3, r1
 8006136:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006138:	2018      	movs	r0, #24
 800613a:	f002 fb31 	bl	80087a0 <USBD_static_malloc>
 800613e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d109      	bne.n	800615a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	32b0      	adds	r2, #176	@ 0xb0
 8006150:	2100      	movs	r1, #0
 8006152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006156:	2302      	movs	r3, #2
 8006158:	e08a      	b.n	8006270 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	32b0      	adds	r2, #176	@ 0xb0
 8006164:	68f9      	ldr	r1, [r7, #12]
 8006166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	32b0      	adds	r2, #176	@ 0xb0
 8006174:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	7c1b      	ldrb	r3, [r3, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d11b      	bne.n	80061be <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006186:	4b3c      	ldr	r3, [pc, #240]	@ (8006278 <USBD_CUSTOM_HID_Init+0x14c>)
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	f003 020f 	and.w	r2, r3, #15
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	4613      	mov	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	440b      	add	r3, r1
 800619a:	3326      	adds	r3, #38	@ 0x26
 800619c:	2205      	movs	r2, #5
 800619e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80061a0:	4b36      	ldr	r3, [pc, #216]	@ (800627c <USBD_CUSTOM_HID_Init+0x150>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	f003 020f 	and.w	r2, r3, #15
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	4613      	mov	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	440b      	add	r3, r1
 80061b4:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80061b8:	2205      	movs	r2, #5
 80061ba:	801a      	strh	r2, [r3, #0]
 80061bc:	e01a      	b.n	80061f4 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80061be:	4b2e      	ldr	r3, [pc, #184]	@ (8006278 <USBD_CUSTOM_HID_Init+0x14c>)
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	f003 020f 	and.w	r2, r3, #15
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	440b      	add	r3, r1
 80061d2:	3326      	adds	r3, #38	@ 0x26
 80061d4:	2205      	movs	r2, #5
 80061d6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80061d8:	4b28      	ldr	r3, [pc, #160]	@ (800627c <USBD_CUSTOM_HID_Init+0x150>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	f003 020f 	and.w	r2, r3, #15
 80061e0:	6879      	ldr	r1, [r7, #4]
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	440b      	add	r3, r1
 80061ec:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80061f0:	2205      	movs	r2, #5
 80061f2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80061f4:	4b20      	ldr	r3, [pc, #128]	@ (8006278 <USBD_CUSTOM_HID_Init+0x14c>)
 80061f6:	7819      	ldrb	r1, [r3, #0]
 80061f8:	2302      	movs	r3, #2
 80061fa:	2203      	movs	r2, #3
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f002 f9be 	bl	800857e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8006202:	4b1d      	ldr	r3, [pc, #116]	@ (8006278 <USBD_CUSTOM_HID_Init+0x14c>)
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	f003 020f 	and.w	r2, r3, #15
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	4613      	mov	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	440b      	add	r3, r1
 8006216:	3324      	adds	r3, #36	@ 0x24
 8006218:	2201      	movs	r2, #1
 800621a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800621c:	4b17      	ldr	r3, [pc, #92]	@ (800627c <USBD_CUSTOM_HID_Init+0x150>)
 800621e:	7819      	ldrb	r1, [r3, #0]
 8006220:	2302      	movs	r3, #2
 8006222:	2203      	movs	r2, #3
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f002 f9aa 	bl	800857e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800622a:	4b14      	ldr	r3, [pc, #80]	@ (800627c <USBD_CUSTOM_HID_Init+0x150>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	f003 020f 	and.w	r2, r3, #15
 8006232:	6879      	ldr	r1, [r7, #4]
 8006234:	4613      	mov	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	440b      	add	r3, r1
 800623e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006242:	2201      	movs	r2, #1
 8006244:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	33b0      	adds	r3, #176	@ 0xb0
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006260:	4b06      	ldr	r3, [pc, #24]	@ (800627c <USBD_CUSTOM_HID_Init+0x150>)
 8006262:	7819      	ldrb	r1, [r3, #0]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	2302      	movs	r3, #2
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f002 fa77 	bl	800875c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	2000008a 	.word	0x2000008a
 800627c:	2000008b 	.word	0x2000008b

08006280 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	460b      	mov	r3, r1
 800628a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800628c:	4b37      	ldr	r3, [pc, #220]	@ (800636c <USBD_CUSTOM_HID_DeInit+0xec>)
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	4619      	mov	r1, r3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f002 f999 	bl	80085ca <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006298:	4b34      	ldr	r3, [pc, #208]	@ (800636c <USBD_CUSTOM_HID_DeInit+0xec>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	f003 020f 	and.w	r2, r3, #15
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	4613      	mov	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	440b      	add	r3, r1
 80062ac:	3324      	adds	r3, #36	@ 0x24
 80062ae:	2200      	movs	r2, #0
 80062b0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80062b2:	4b2e      	ldr	r3, [pc, #184]	@ (800636c <USBD_CUSTOM_HID_DeInit+0xec>)
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	f003 020f 	and.w	r2, r3, #15
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	440b      	add	r3, r1
 80062c6:	3326      	adds	r3, #38	@ 0x26
 80062c8:	2200      	movs	r2, #0
 80062ca:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80062cc:	4b28      	ldr	r3, [pc, #160]	@ (8006370 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	4619      	mov	r1, r3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f002 f979 	bl	80085ca <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80062d8:	4b25      	ldr	r3, [pc, #148]	@ (8006370 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	f003 020f 	and.w	r2, r3, #15
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	440b      	add	r3, r1
 80062ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80062f0:	2200      	movs	r2, #0
 80062f2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80062f4:	4b1e      	ldr	r3, [pc, #120]	@ (8006370 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	f003 020f 	and.w	r2, r3, #15
 80062fc:	6879      	ldr	r1, [r7, #4]
 80062fe:	4613      	mov	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	440b      	add	r3, r1
 8006308:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800630c:	2200      	movs	r2, #0
 800630e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	32b0      	adds	r2, #176	@ 0xb0
 800631a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d01f      	beq.n	8006362 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	33b0      	adds	r3, #176	@ 0xb0
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	32b0      	adds	r2, #176	@ 0xb0
 8006340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006344:	4618      	mov	r0, r3
 8006346:	f002 fa39 	bl	80087bc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	32b0      	adds	r2, #176	@ 0xb0
 8006354:	2100      	movs	r1, #0
 8006356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	2000008a 	.word	0x2000008a
 8006370:	2000008b 	.word	0x2000008b

08006374 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b088      	sub	sp, #32
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	32b0      	adds	r2, #176	@ 0xb0
 8006388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800638c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
 8006392:	2300      	movs	r3, #0
 8006394:	81fb      	strh	r3, [r7, #14]
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8006396:	2300      	movs	r3, #0
 8006398:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <USBD_CUSTOM_HID_Setup+0x38>
  {
    return (uint8_t)USBD_FAIL;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e13c      	b.n	8006626 <USBD_CUSTOM_HID_Setup+0x2b2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 808f 	beq.w	80064d8 <USBD_CUSTOM_HID_Setup+0x164>
 80063ba:	2b20      	cmp	r3, #32
 80063bc:	f040 812b 	bne.w	8006616 <USBD_CUSTOM_HID_Setup+0x2a2>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	785b      	ldrb	r3, [r3, #1]
 80063c4:	3b01      	subs	r3, #1
 80063c6:	2b0a      	cmp	r3, #10
 80063c8:	d87e      	bhi.n	80064c8 <USBD_CUSTOM_HID_Setup+0x154>
 80063ca:	a201      	add	r2, pc, #4	@ (adr r2, 80063d0 <USBD_CUSTOM_HID_Setup+0x5c>)
 80063cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d0:	0800645b 	.word	0x0800645b
 80063d4:	0800642d 	.word	0x0800642d
 80063d8:	0800640b 	.word	0x0800640b
 80063dc:	080064c9 	.word	0x080064c9
 80063e0:	080064c9 	.word	0x080064c9
 80063e4:	080064c9 	.word	0x080064c9
 80063e8:	080064c9 	.word	0x080064c9
 80063ec:	080064c9 	.word	0x080064c9
 80063f0:	0800643d 	.word	0x0800643d
 80063f4:	0800641b 	.word	0x0800641b
 80063f8:	080063fd 	.word	0x080063fd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	885b      	ldrh	r3, [r3, #2]
 8006400:	b2db      	uxtb	r3, r3
 8006402:	461a      	mov	r2, r3
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	605a      	str	r2, [r3, #4]
          break;
 8006408:	e065      	b.n	80064d6 <USBD_CUSTOM_HID_Setup+0x162>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	3304      	adds	r3, #4
 800640e:	2201      	movs	r2, #1
 8006410:	4619      	mov	r1, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f001 fcc6 	bl	8007da4 <USBD_CtlSendData>
          break;
 8006418:	e05d      	b.n	80064d6 <USBD_CUSTOM_HID_Setup+0x162>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	885b      	ldrh	r3, [r3, #2]
 800641e:	0a1b      	lsrs	r3, r3, #8
 8006420:	b29b      	uxth	r3, r3
 8006422:	b2db      	uxtb	r3, r3
 8006424:	461a      	mov	r2, r3
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	609a      	str	r2, [r3, #8]
          break;
 800642a:	e054      	b.n	80064d6 <USBD_CUSTOM_HID_Setup+0x162>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	3308      	adds	r3, #8
 8006430:	2201      	movs	r2, #1
 8006432:	4619      	mov	r1, r3
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 fcb5 	bl	8007da4 <USBD_CtlSendData>
          break;
 800643a:	e04c      	b.n	80064d6 <USBD_CUSTOM_HID_Setup+0x162>
                                                                                            req->wLength,
																							pdev);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	2201      	movs	r2, #1
 8006440:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006442:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	88db      	ldrh	r3, [r3, #6]
 8006448:	2b02      	cmp	r3, #2
 800644a:	bf28      	it	cs
 800644c:	2302      	movcs	r3, #2
 800644e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006450:	461a      	mov	r2, r3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f001 fcd2 	bl	8007dfc <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8006458:	e03d      	b.n	80064d6 <USBD_CUSTOM_HID_Setup+0x162>
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
        case CUSTOM_HID_REQ_GET_REPORT:
          if (((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->GetReport != NULL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	33b0      	adds	r3, #176	@ 0xb0
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d011      	beq.n	8006494 <USBD_CUSTOM_HID_Setup+0x120>
          {
            ReportLength = req->wLength;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	88db      	ldrh	r3, [r3, #6]
 8006474:	81fb      	strh	r3, [r7, #14]

            /* Get report data buffer */
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->GetReport(req, &ReportLength, pdev);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	33b0      	adds	r3, #176	@ 0xb0
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	f107 010e 	add.w	r1, r7, #14
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	6838      	ldr	r0, [r7, #0]
 8006490:	4798      	blx	r3
 8006492:	61b8      	str	r0, [r7, #24]
          }

          if ((pbuf != NULL) && (ReportLength != 0U))
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d011      	beq.n	80064be <USBD_CUSTOM_HID_Setup+0x14a>
 800649a:	89fb      	ldrh	r3, [r7, #14]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00e      	beq.n	80064be <USBD_CUSTOM_HID_Setup+0x14a>
          {
            len = MIN(ReportLength, req->wLength);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	88da      	ldrh	r2, [r3, #6]
 80064a4:	89fb      	ldrh	r3, [r7, #14]
 80064a6:	4293      	cmp	r3, r2
 80064a8:	bf28      	it	cs
 80064aa:	4613      	movcs	r3, r2
 80064ac:	83fb      	strh	r3, [r7, #30]

            /* Send the report data over EP0 */
            (void)USBD_CtlSendData(pdev, pbuf, len);
 80064ae:	8bfb      	ldrh	r3, [r7, #30]
 80064b0:	461a      	mov	r2, r3
 80064b2:	69b9      	ldr	r1, [r7, #24]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f001 fc75 	bl	8007da4 <USBD_CtlSendData>
 80064ba:	bf00      	nop
#else
            /* Stall EP0 if no data available */
            USBD_CtlError(pdev, req);
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
          }
          break;
 80064bc:	e00b      	b.n	80064d6 <USBD_CUSTOM_HID_Setup+0x162>
            USBD_CtlError(pdev, req);
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f001 fbf2 	bl	8007caa <USBD_CtlError>
          break;
 80064c6:	e006      	b.n	80064d6 <USBD_CUSTOM_HID_Setup+0x162>
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 80064c8:	6839      	ldr	r1, [r7, #0]
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f001 fbed 	bl	8007caa <USBD_CtlError>
          ret = USBD_FAIL;
 80064d0:	2303      	movs	r3, #3
 80064d2:	75fb      	strb	r3, [r7, #23]
          break;
 80064d4:	bf00      	nop
      }
      break;
 80064d6:	e0a5      	b.n	8006624 <USBD_CUSTOM_HID_Setup+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	785b      	ldrb	r3, [r3, #1]
 80064dc:	2b0b      	cmp	r3, #11
 80064de:	f200 8091 	bhi.w	8006604 <USBD_CUSTOM_HID_Setup+0x290>
 80064e2:	a201      	add	r2, pc, #4	@ (adr r2, 80064e8 <USBD_CUSTOM_HID_Setup+0x174>)
 80064e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e8:	08006519 	.word	0x08006519
 80064ec:	08006613 	.word	0x08006613
 80064f0:	08006605 	.word	0x08006605
 80064f4:	08006605 	.word	0x08006605
 80064f8:	08006605 	.word	0x08006605
 80064fc:	08006605 	.word	0x08006605
 8006500:	08006543 	.word	0x08006543
 8006504:	08006605 	.word	0x08006605
 8006508:	08006605 	.word	0x08006605
 800650c:	08006605 	.word	0x08006605
 8006510:	080065b3 	.word	0x080065b3
 8006514:	080065dd 	.word	0x080065dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b03      	cmp	r3, #3
 8006522:	d107      	bne.n	8006534 <USBD_CUSTOM_HID_Setup+0x1c0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006524:	f107 030c 	add.w	r3, r7, #12
 8006528:	2202      	movs	r2, #2
 800652a:	4619      	mov	r1, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 fc39 	bl	8007da4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006532:	e06f      	b.n	8006614 <USBD_CUSTOM_HID_Setup+0x2a0>
            USBD_CtlError(pdev, req);
 8006534:	6839      	ldr	r1, [r7, #0]
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f001 fbb7 	bl	8007caa <USBD_CtlError>
            ret = USBD_FAIL;
 800653c:	2303      	movs	r3, #3
 800653e:	75fb      	strb	r3, [r7, #23]
          break;
 8006540:	e068      	b.n	8006614 <USBD_CUSTOM_HID_Setup+0x2a0>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	885b      	ldrh	r3, [r3, #2]
 8006546:	0a1b      	lsrs	r3, r3, #8
 8006548:	b29b      	uxth	r3, r3
 800654a:	2b22      	cmp	r3, #34	@ 0x22
 800654c:	d112      	bne.n	8006574 <USBD_CUSTOM_HID_Setup+0x200>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	88db      	ldrh	r3, [r3, #6]
 8006552:	f240 5244 	movw	r2, #1348	@ 0x544
 8006556:	4293      	cmp	r3, r2
 8006558:	bf28      	it	cs
 800655a:	4613      	movcs	r3, r2
 800655c:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	33b0      	adds	r3, #176	@ 0xb0
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	61bb      	str	r3, [r7, #24]
 8006572:	e00d      	b.n	8006590 <USBD_CUSTOM_HID_Setup+0x21c>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	885b      	ldrh	r3, [r3, #2]
 8006578:	0a1b      	lsrs	r3, r3, #8
 800657a:	b29b      	uxth	r3, r3
 800657c:	2b21      	cmp	r3, #33	@ 0x21
 800657e:	d107      	bne.n	8006590 <USBD_CUSTOM_HID_Setup+0x21c>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006580:	4b2b      	ldr	r3, [pc, #172]	@ (8006630 <USBD_CUSTOM_HID_Setup+0x2bc>)
 8006582:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	88db      	ldrh	r3, [r3, #6]
 8006588:	2b09      	cmp	r3, #9
 800658a:	bf28      	it	cs
 800658c:	2309      	movcs	r3, #9
 800658e:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d006      	beq.n	80065a4 <USBD_CUSTOM_HID_Setup+0x230>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 8006596:	8bfb      	ldrh	r3, [r7, #30]
 8006598:	461a      	mov	r2, r3
 800659a:	69b9      	ldr	r1, [r7, #24]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 fc01 	bl	8007da4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065a2:	e037      	b.n	8006614 <USBD_CUSTOM_HID_Setup+0x2a0>
            USBD_CtlError(pdev, req);
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f001 fb7f 	bl	8007caa <USBD_CtlError>
            ret = USBD_FAIL;
 80065ac:	2303      	movs	r3, #3
 80065ae:	75fb      	strb	r3, [r7, #23]
          break;
 80065b0:	e030      	b.n	8006614 <USBD_CUSTOM_HID_Setup+0x2a0>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	d107      	bne.n	80065ce <USBD_CUSTOM_HID_Setup+0x25a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	330c      	adds	r3, #12
 80065c2:	2201      	movs	r2, #1
 80065c4:	4619      	mov	r1, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f001 fbec 	bl	8007da4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065cc:	e022      	b.n	8006614 <USBD_CUSTOM_HID_Setup+0x2a0>
            USBD_CtlError(pdev, req);
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f001 fb6a 	bl	8007caa <USBD_CtlError>
            ret = USBD_FAIL;
 80065d6:	2303      	movs	r3, #3
 80065d8:	75fb      	strb	r3, [r7, #23]
          break;
 80065da:	e01b      	b.n	8006614 <USBD_CUSTOM_HID_Setup+0x2a0>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d106      	bne.n	80065f6 <USBD_CUSTOM_HID_Setup+0x282>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	885b      	ldrh	r3, [r3, #2]
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	461a      	mov	r2, r3
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065f4:	e00e      	b.n	8006614 <USBD_CUSTOM_HID_Setup+0x2a0>
            USBD_CtlError(pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 fb56 	bl	8007caa <USBD_CtlError>
            ret = USBD_FAIL;
 80065fe:	2303      	movs	r3, #3
 8006600:	75fb      	strb	r3, [r7, #23]
          break;
 8006602:	e007      	b.n	8006614 <USBD_CUSTOM_HID_Setup+0x2a0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006604:	6839      	ldr	r1, [r7, #0]
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f001 fb4f 	bl	8007caa <USBD_CtlError>
          ret = USBD_FAIL;
 800660c:	2303      	movs	r3, #3
 800660e:	75fb      	strb	r3, [r7, #23]
          break;
 8006610:	e000      	b.n	8006614 <USBD_CUSTOM_HID_Setup+0x2a0>
          break;
 8006612:	bf00      	nop
      }
      break;
 8006614:	e006      	b.n	8006624 <USBD_CUSTOM_HID_Setup+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006616:	6839      	ldr	r1, [r7, #0]
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 fb46 	bl	8007caa <USBD_CtlError>
      ret = USBD_FAIL;
 800661e:	2303      	movs	r3, #3
 8006620:	75fb      	strb	r3, [r7, #23]
      break;
 8006622:	bf00      	nop
  }
  return (uint8_t)ret;
 8006624:	7dfb      	ldrb	r3, [r7, #23]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3720      	adds	r7, #32
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20000074 	.word	0x20000074

08006634 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800663c:	2181      	movs	r1, #129	@ 0x81
 800663e:	4815      	ldr	r0, [pc, #84]	@ (8006694 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006640:	f000 fcfd 	bl	800703e <USBD_GetEpDesc>
 8006644:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006646:	2101      	movs	r1, #1
 8006648:	4812      	ldr	r0, [pc, #72]	@ (8006694 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800664a:	f000 fcf8 	bl	800703e <USBD_GetEpDesc>
 800664e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d009      	beq.n	800666a <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f042 0202 	orr.w	r2, r2, #2
 800665e:	711a      	strb	r2, [r3, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2205      	movs	r2, #5
 8006668:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d009      	beq.n	8006684 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2200      	movs	r2, #0
 8006674:	f042 0202 	orr.w	r2, r2, #2
 8006678:	711a      	strb	r2, [r3, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	2205      	movs	r2, #5
 8006682:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2229      	movs	r2, #41	@ 0x29
 8006688:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800668a:	4b02      	ldr	r3, [pc, #8]	@ (8006694 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	20000048 	.word	0x20000048

08006698 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80066a0:	2181      	movs	r1, #129	@ 0x81
 80066a2:	4815      	ldr	r0, [pc, #84]	@ (80066f8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80066a4:	f000 fccb 	bl	800703e <USBD_GetEpDesc>
 80066a8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80066aa:	2101      	movs	r1, #1
 80066ac:	4812      	ldr	r0, [pc, #72]	@ (80066f8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80066ae:	f000 fcc6 	bl	800703e <USBD_GetEpDesc>
 80066b2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d009      	beq.n	80066ce <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f042 0202 	orr.w	r2, r2, #2
 80066c2:	711a      	strb	r2, [r3, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2205      	movs	r2, #5
 80066cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d009      	beq.n	80066e8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f042 0202 	orr.w	r2, r2, #2
 80066dc:	711a      	strb	r2, [r3, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2205      	movs	r2, #5
 80066e6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2229      	movs	r2, #41	@ 0x29
 80066ec:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80066ee:	4b02      	ldr	r3, [pc, #8]	@ (80066f8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	20000048 	.word	0x20000048

080066fc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006704:	2181      	movs	r1, #129	@ 0x81
 8006706:	4815      	ldr	r0, [pc, #84]	@ (800675c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006708:	f000 fc99 	bl	800703e <USBD_GetEpDesc>
 800670c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800670e:	2101      	movs	r1, #1
 8006710:	4812      	ldr	r0, [pc, #72]	@ (800675c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006712:	f000 fc94 	bl	800703e <USBD_GetEpDesc>
 8006716:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d009      	beq.n	8006732 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f042 0202 	orr.w	r2, r2, #2
 8006726:	711a      	strb	r2, [r3, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2205      	movs	r2, #5
 8006730:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d009      	beq.n	800674c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2200      	movs	r2, #0
 800673c:	f042 0202 	orr.w	r2, r2, #2
 8006740:	711a      	strb	r2, [r3, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	2205      	movs	r2, #5
 800674a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2229      	movs	r2, #41	@ 0x29
 8006750:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006752:	4b02      	ldr	r3, [pc, #8]	@ (800675c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	20000048 	.word	0x20000048

08006760 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	460b      	mov	r3, r1
 800676a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	32b0      	adds	r2, #176	@ 0xb0
 8006776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800677a:	2200      	movs	r2, #0
 800677c:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	460b      	mov	r3, r1
 8006796:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	32b0      	adds	r2, #176	@ 0xb0
 80067a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e01d      	b.n	80067ea <USBD_CUSTOM_HID_DataOut+0x5e>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	32b0      	adds	r2, #176	@ 0xb0
 80067b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067bc:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	33b0      	adds	r3, #176	@ 0xb0
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	7810      	ldrb	r0, [r2, #0]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	7851      	ldrb	r1, [r2, #1]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	4798      	blx	r3
                                                                           hhid->Report_buf[1],
																		   pdev);
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,  CUSTOM_HID_EPOUT_SIZE);
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	2302      	movs	r3, #2
 80067e0:	2101      	movs	r1, #1
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f001 ffba 	bl	800875c <USBD_LL_PrepareReceive>

  return (uint8_t)USBD_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	32b0      	adds	r2, #176	@ 0xb0
 8006804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006808:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006810:	2303      	movs	r3, #3
 8006812:	e016      	b.n	8006842 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d111      	bne.n	8006840 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	33b0      	adds	r3, #176	@ 0xb0
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	7810      	ldrb	r0, [r2, #0]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	7851      	ldrb	r1, [r2, #1]
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	4798      	blx	r3
                                                                             hhid->Report_buf[1],
																			 pdev);
    hhid->IsReportAvailable = 0U;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	220a      	movs	r2, #10
 8006858:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800685a:	4b03      	ldr	r3, [pc, #12]	@ (8006868 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800685c:	4618      	mov	r0, r3
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	20000080 	.word	0x20000080

0800686c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800687c:	2303      	movs	r3, #3
 800687e:	e009      	b.n	8006894 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	33b0      	adds	r3, #176	@ 0xb0
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	4613      	mov	r3, r2
 80068ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e01f      	b.n	80068f8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	79fa      	ldrb	r2, [r7, #7]
 80068ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f001 fddf 	bl	80084b0 <USBD_LL_Init>
 80068f2:	4603      	mov	r3, r0
 80068f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80068f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3718      	adds	r7, #24
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006914:	2303      	movs	r3, #3
 8006916:	e025      	b.n	8006964 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	32ae      	adds	r2, #174	@ 0xae
 800692a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00f      	beq.n	8006954 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	32ae      	adds	r2, #174	@ 0xae
 800693e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006944:	f107 020e 	add.w	r2, r7, #14
 8006948:	4610      	mov	r0, r2
 800694a:	4798      	blx	r3
 800694c:	4602      	mov	r2, r0
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f001 fde7 	bl	8008548 <USBD_LL_Start>
 800697a:	4603      	mov	r3, r0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800698c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800698e:	4618      	mov	r0, r3
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b084      	sub	sp, #16
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	460b      	mov	r3, r1
 80069a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d009      	beq.n	80069c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	78fa      	ldrb	r2, [r7, #3]
 80069be:	4611      	mov	r1, r2
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	4798      	blx	r3
 80069c4:	4603      	mov	r3, r0
 80069c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	460b      	mov	r3, r1
 80069dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	78fa      	ldrb	r2, [r7, #3]
 80069ec:	4611      	mov	r1, r2
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	4798      	blx	r3
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80069f8:	2303      	movs	r3, #3
 80069fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b084      	sub	sp, #16
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f001 f90c 	bl	8007c36 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006a3a:	f003 031f 	and.w	r3, r3, #31
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d01a      	beq.n	8006a78 <USBD_LL_SetupStage+0x72>
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d822      	bhi.n	8006a8c <USBD_LL_SetupStage+0x86>
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d002      	beq.n	8006a50 <USBD_LL_SetupStage+0x4a>
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d00a      	beq.n	8006a64 <USBD_LL_SetupStage+0x5e>
 8006a4e:	e01d      	b.n	8006a8c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a56:	4619      	mov	r1, r3
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fb63 	bl	8007124 <USBD_StdDevReq>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	73fb      	strb	r3, [r7, #15]
      break;
 8006a62:	e020      	b.n	8006aa6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fbcb 	bl	8007208 <USBD_StdItfReq>
 8006a72:	4603      	mov	r3, r0
 8006a74:	73fb      	strb	r3, [r7, #15]
      break;
 8006a76:	e016      	b.n	8006aa6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fc2d 	bl	80072e0 <USBD_StdEPReq>
 8006a86:	4603      	mov	r3, r0
 8006a88:	73fb      	strb	r3, [r7, #15]
      break;
 8006a8a:	e00c      	b.n	8006aa6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006a92:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f001 fdb4 	bl	8008608 <USBD_LL_StallEP>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8006aa4:	bf00      	nop
  }

  return ret;
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006ac2:	7afb      	ldrb	r3, [r7, #11]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d16e      	bne.n	8006ba6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006ace:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006ad6:	2b03      	cmp	r3, #3
 8006ad8:	f040 8098 	bne.w	8006c0c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	689a      	ldr	r2, [r3, #8]
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d913      	bls.n	8006b10 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	689a      	ldr	r2, [r3, #8]
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	1ad2      	subs	r2, r2, r3
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	68da      	ldr	r2, [r3, #12]
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	4293      	cmp	r3, r2
 8006b00:	bf28      	it	cs
 8006b02:	4613      	movcs	r3, r2
 8006b04:	461a      	mov	r2, r3
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f001 f994 	bl	8007e36 <USBD_CtlContinueRx>
 8006b0e:	e07d      	b.n	8006c0c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006b16:	f003 031f 	and.w	r3, r3, #31
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d014      	beq.n	8006b48 <USBD_LL_DataOutStage+0x98>
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d81d      	bhi.n	8006b5e <USBD_LL_DataOutStage+0xae>
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d002      	beq.n	8006b2c <USBD_LL_DataOutStage+0x7c>
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d003      	beq.n	8006b32 <USBD_LL_DataOutStage+0x82>
 8006b2a:	e018      	b.n	8006b5e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	75bb      	strb	r3, [r7, #22]
            break;
 8006b30:	e018      	b.n	8006b64 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f000 fa64 	bl	800700a <USBD_CoreFindIF>
 8006b42:	4603      	mov	r3, r0
 8006b44:	75bb      	strb	r3, [r7, #22]
            break;
 8006b46:	e00d      	b.n	8006b64 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	4619      	mov	r1, r3
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 fa66 	bl	8007024 <USBD_CoreFindEP>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	75bb      	strb	r3, [r7, #22]
            break;
 8006b5c:	e002      	b.n	8006b64 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	75bb      	strb	r3, [r7, #22]
            break;
 8006b62:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006b64:	7dbb      	ldrb	r3, [r7, #22]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d119      	bne.n	8006b9e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b03      	cmp	r3, #3
 8006b74:	d113      	bne.n	8006b9e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006b76:	7dba      	ldrb	r2, [r7, #22]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	32ae      	adds	r2, #174	@ 0xae
 8006b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00b      	beq.n	8006b9e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006b86:	7dba      	ldrb	r2, [r7, #22]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006b8e:	7dba      	ldrb	r2, [r7, #22]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	32ae      	adds	r2, #174	@ 0xae
 8006b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f001 f95a 	bl	8007e58 <USBD_CtlSendStatus>
 8006ba4:	e032      	b.n	8006c0c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006ba6:	7afb      	ldrb	r3, [r7, #11]
 8006ba8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	4619      	mov	r1, r3
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 fa37 	bl	8007024 <USBD_CoreFindEP>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bba:	7dbb      	ldrb	r3, [r7, #22]
 8006bbc:	2bff      	cmp	r3, #255	@ 0xff
 8006bbe:	d025      	beq.n	8006c0c <USBD_LL_DataOutStage+0x15c>
 8006bc0:	7dbb      	ldrb	r3, [r7, #22]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d122      	bne.n	8006c0c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d117      	bne.n	8006c02 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006bd2:	7dba      	ldrb	r2, [r7, #22]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	32ae      	adds	r2, #174	@ 0xae
 8006bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00f      	beq.n	8006c02 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006be2:	7dba      	ldrb	r2, [r7, #22]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006bea:	7dba      	ldrb	r2, [r7, #22]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	32ae      	adds	r2, #174	@ 0xae
 8006bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	7afa      	ldrb	r2, [r7, #11]
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	4798      	blx	r3
 8006bfe:	4603      	mov	r3, r0
 8006c00:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006c08:	7dfb      	ldrb	r3, [r7, #23]
 8006c0a:	e000      	b.n	8006c0e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b086      	sub	sp, #24
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	60f8      	str	r0, [r7, #12]
 8006c1e:	460b      	mov	r3, r1
 8006c20:	607a      	str	r2, [r7, #4]
 8006c22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006c24:	7afb      	ldrb	r3, [r7, #11]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d16f      	bne.n	8006d0a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3314      	adds	r3, #20
 8006c2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d15a      	bne.n	8006cf0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	689a      	ldr	r2, [r3, #8]
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d914      	bls.n	8006c70 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	689a      	ldr	r2, [r3, #8]
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	1ad2      	subs	r2, r2, r3
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	6879      	ldr	r1, [r7, #4]
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f001 f8bc 	bl	8007dda <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c62:	2300      	movs	r3, #0
 8006c64:	2200      	movs	r2, #0
 8006c66:	2100      	movs	r1, #0
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f001 fd77 	bl	800875c <USBD_LL_PrepareReceive>
 8006c6e:	e03f      	b.n	8006cf0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	68da      	ldr	r2, [r3, #12]
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d11c      	bne.n	8006cb6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d316      	bcc.n	8006cb6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d20f      	bcs.n	8006cb6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c96:	2200      	movs	r2, #0
 8006c98:	2100      	movs	r1, #0
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f001 f89d 	bl	8007dda <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ca8:	2300      	movs	r3, #0
 8006caa:	2200      	movs	r2, #0
 8006cac:	2100      	movs	r1, #0
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f001 fd54 	bl	800875c <USBD_LL_PrepareReceive>
 8006cb4:	e01c      	b.n	8006cf0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d10f      	bne.n	8006ce2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d009      	beq.n	8006ce2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ce2:	2180      	movs	r1, #128	@ 0x80
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f001 fc8f 	bl	8008608 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f001 f8c7 	bl	8007e7e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d03a      	beq.n	8006d70 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f7ff fe42 	bl	8006984 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006d08:	e032      	b.n	8006d70 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006d0a:	7afb      	ldrb	r3, [r7, #11]
 8006d0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	4619      	mov	r1, r3
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 f985 	bl	8007024 <USBD_CoreFindEP>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d1e:	7dfb      	ldrb	r3, [r7, #23]
 8006d20:	2bff      	cmp	r3, #255	@ 0xff
 8006d22:	d025      	beq.n	8006d70 <USBD_LL_DataInStage+0x15a>
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d122      	bne.n	8006d70 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d11c      	bne.n	8006d70 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006d36:	7dfa      	ldrb	r2, [r7, #23]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	32ae      	adds	r2, #174	@ 0xae
 8006d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d014      	beq.n	8006d70 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006d46:	7dfa      	ldrb	r2, [r7, #23]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006d4e:	7dfa      	ldrb	r2, [r7, #23]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	32ae      	adds	r2, #174	@ 0xae
 8006d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	7afa      	ldrb	r2, [r7, #11]
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	4798      	blx	r3
 8006d62:	4603      	mov	r3, r0
 8006d64:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006d66:	7dbb      	ldrb	r3, [r7, #22]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006d6c:	7dbb      	ldrb	r3, [r7, #22]
 8006d6e:	e000      	b.n	8006d72 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d014      	beq.n	8006de0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00e      	beq.n	8006de0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	6852      	ldr	r2, [r2, #4]
 8006dce:	b2d2      	uxtb	r2, r2
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	4798      	blx	r3
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006de0:	2340      	movs	r3, #64	@ 0x40
 8006de2:	2200      	movs	r2, #0
 8006de4:	2100      	movs	r1, #0
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f001 fbc9 	bl	800857e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2240      	movs	r2, #64	@ 0x40
 8006df8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dfc:	2340      	movs	r3, #64	@ 0x40
 8006dfe:	2200      	movs	r2, #0
 8006e00:	2180      	movs	r1, #128	@ 0x80
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f001 fbbb 	bl	800857e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2240      	movs	r2, #64	@ 0x40
 8006e12:	621a      	str	r2, [r3, #32]

  return ret;
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	460b      	mov	r3, r1
 8006e28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	78fa      	ldrb	r2, [r7, #3]
 8006e2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b083      	sub	sp, #12
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	d006      	beq.n	8006e60 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e58:	b2da      	uxtb	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2204      	movs	r2, #4
 8006e64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b083      	sub	sp, #12
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	d106      	bne.n	8006e98 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b082      	sub	sp, #8
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	d110      	bne.n	8006edc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00b      	beq.n	8006edc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d005      	beq.n	8006edc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	460b      	mov	r3, r1
 8006ef0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	32ae      	adds	r2, #174	@ 0xae
 8006efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e01c      	b.n	8006f42 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d115      	bne.n	8006f40 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	32ae      	adds	r2, #174	@ 0xae
 8006f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00b      	beq.n	8006f40 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	32ae      	adds	r2, #174	@ 0xae
 8006f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	78fa      	ldrb	r2, [r7, #3]
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b082      	sub	sp, #8
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	460b      	mov	r3, r1
 8006f54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	32ae      	adds	r2, #174	@ 0xae
 8006f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e01c      	b.n	8006fa6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b03      	cmp	r3, #3
 8006f76:	d115      	bne.n	8006fa4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	32ae      	adds	r2, #174	@ 0xae
 8006f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00b      	beq.n	8006fa4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	32ae      	adds	r2, #174	@ 0xae
 8006f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9c:	78fa      	ldrb	r2, [r7, #3]
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b083      	sub	sp, #12
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00e      	beq.n	8007000 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6852      	ldr	r2, [r2, #4]
 8006fee:	b2d2      	uxtb	r2, r2
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	4798      	blx	r3
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007000:	7bfb      	ldrb	r3, [r7, #15]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800700a:	b480      	push	{r7}
 800700c:	b083      	sub	sp, #12
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	460b      	mov	r3, r1
 8007014:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007016:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007018:	4618      	mov	r0, r3
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	460b      	mov	r3, r1
 800702e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007030:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007032:	4618      	mov	r0, r3
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b086      	sub	sp, #24
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	460b      	mov	r3, r1
 8007048:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007052:	2300      	movs	r3, #0
 8007054:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	885b      	ldrh	r3, [r3, #2]
 800705a:	b29b      	uxth	r3, r3
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	7812      	ldrb	r2, [r2, #0]
 8007060:	4293      	cmp	r3, r2
 8007062:	d91f      	bls.n	80070a4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800706a:	e013      	b.n	8007094 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800706c:	f107 030a 	add.w	r3, r7, #10
 8007070:	4619      	mov	r1, r3
 8007072:	6978      	ldr	r0, [r7, #20]
 8007074:	f000 f81b 	bl	80070ae <USBD_GetNextDesc>
 8007078:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	785b      	ldrb	r3, [r3, #1]
 800707e:	2b05      	cmp	r3, #5
 8007080:	d108      	bne.n	8007094 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	789b      	ldrb	r3, [r3, #2]
 800708a:	78fa      	ldrb	r2, [r7, #3]
 800708c:	429a      	cmp	r2, r3
 800708e:	d008      	beq.n	80070a2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007090:	2300      	movs	r3, #0
 8007092:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	885b      	ldrh	r3, [r3, #2]
 8007098:	b29a      	uxth	r2, r3
 800709a:	897b      	ldrh	r3, [r7, #10]
 800709c:	429a      	cmp	r2, r3
 800709e:	d8e5      	bhi.n	800706c <USBD_GetEpDesc+0x2e>
 80070a0:	e000      	b.n	80070a4 <USBD_GetEpDesc+0x66>
          break;
 80070a2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80070a4:	693b      	ldr	r3, [r7, #16]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3718      	adds	r7, #24
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b085      	sub	sp, #20
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	881b      	ldrh	r3, [r3, #0]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	7812      	ldrb	r2, [r2, #0]
 80070c4:	4413      	add	r3, r2
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	461a      	mov	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4413      	add	r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80070d8:	68fb      	ldr	r3, [r7, #12]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b087      	sub	sp, #28
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	3301      	adds	r3, #1
 80070fc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007104:	8a3b      	ldrh	r3, [r7, #16]
 8007106:	021b      	lsls	r3, r3, #8
 8007108:	b21a      	sxth	r2, r3
 800710a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800710e:	4313      	orrs	r3, r2
 8007110:	b21b      	sxth	r3, r3
 8007112:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007114:	89fb      	ldrh	r3, [r7, #14]
}
 8007116:	4618      	mov	r0, r3
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
	...

08007124 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800713a:	2b40      	cmp	r3, #64	@ 0x40
 800713c:	d005      	beq.n	800714a <USBD_StdDevReq+0x26>
 800713e:	2b40      	cmp	r3, #64	@ 0x40
 8007140:	d857      	bhi.n	80071f2 <USBD_StdDevReq+0xce>
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00f      	beq.n	8007166 <USBD_StdDevReq+0x42>
 8007146:	2b20      	cmp	r3, #32
 8007148:	d153      	bne.n	80071f2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	32ae      	adds	r2, #174	@ 0xae
 8007154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	4798      	blx	r3
 8007160:	4603      	mov	r3, r0
 8007162:	73fb      	strb	r3, [r7, #15]
      break;
 8007164:	e04a      	b.n	80071fc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	785b      	ldrb	r3, [r3, #1]
 800716a:	2b09      	cmp	r3, #9
 800716c:	d83b      	bhi.n	80071e6 <USBD_StdDevReq+0xc2>
 800716e:	a201      	add	r2, pc, #4	@ (adr r2, 8007174 <USBD_StdDevReq+0x50>)
 8007170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007174:	080071c9 	.word	0x080071c9
 8007178:	080071dd 	.word	0x080071dd
 800717c:	080071e7 	.word	0x080071e7
 8007180:	080071d3 	.word	0x080071d3
 8007184:	080071e7 	.word	0x080071e7
 8007188:	080071a7 	.word	0x080071a7
 800718c:	0800719d 	.word	0x0800719d
 8007190:	080071e7 	.word	0x080071e7
 8007194:	080071bf 	.word	0x080071bf
 8007198:	080071b1 	.word	0x080071b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800719c:	6839      	ldr	r1, [r7, #0]
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fa3c 	bl	800761c <USBD_GetDescriptor>
          break;
 80071a4:	e024      	b.n	80071f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fba1 	bl	80078f0 <USBD_SetAddress>
          break;
 80071ae:	e01f      	b.n	80071f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fbe0 	bl	8007978 <USBD_SetConfig>
 80071b8:	4603      	mov	r3, r0
 80071ba:	73fb      	strb	r3, [r7, #15]
          break;
 80071bc:	e018      	b.n	80071f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fc83 	bl	8007acc <USBD_GetConfig>
          break;
 80071c6:	e013      	b.n	80071f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fcb4 	bl	8007b38 <USBD_GetStatus>
          break;
 80071d0:	e00e      	b.n	80071f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fce3 	bl	8007ba0 <USBD_SetFeature>
          break;
 80071da:	e009      	b.n	80071f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fd07 	bl	8007bf2 <USBD_ClrFeature>
          break;
 80071e4:	e004      	b.n	80071f0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fd5e 	bl	8007caa <USBD_CtlError>
          break;
 80071ee:	bf00      	nop
      }
      break;
 80071f0:	e004      	b.n	80071fc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fd58 	bl	8007caa <USBD_CtlError>
      break;
 80071fa:	bf00      	nop
  }

  return ret;
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop

08007208 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007212:	2300      	movs	r3, #0
 8007214:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800721e:	2b40      	cmp	r3, #64	@ 0x40
 8007220:	d005      	beq.n	800722e <USBD_StdItfReq+0x26>
 8007222:	2b40      	cmp	r3, #64	@ 0x40
 8007224:	d852      	bhi.n	80072cc <USBD_StdItfReq+0xc4>
 8007226:	2b00      	cmp	r3, #0
 8007228:	d001      	beq.n	800722e <USBD_StdItfReq+0x26>
 800722a:	2b20      	cmp	r3, #32
 800722c:	d14e      	bne.n	80072cc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007234:	b2db      	uxtb	r3, r3
 8007236:	3b01      	subs	r3, #1
 8007238:	2b02      	cmp	r3, #2
 800723a:	d840      	bhi.n	80072be <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	889b      	ldrh	r3, [r3, #4]
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b01      	cmp	r3, #1
 8007244:	d836      	bhi.n	80072b4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	889b      	ldrh	r3, [r3, #4]
 800724a:	b2db      	uxtb	r3, r3
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7ff fedb 	bl	800700a <USBD_CoreFindIF>
 8007254:	4603      	mov	r3, r0
 8007256:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007258:	7bbb      	ldrb	r3, [r7, #14]
 800725a:	2bff      	cmp	r3, #255	@ 0xff
 800725c:	d01d      	beq.n	800729a <USBD_StdItfReq+0x92>
 800725e:	7bbb      	ldrb	r3, [r7, #14]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d11a      	bne.n	800729a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007264:	7bba      	ldrb	r2, [r7, #14]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	32ae      	adds	r2, #174	@ 0xae
 800726a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00f      	beq.n	8007294 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007274:	7bba      	ldrb	r2, [r7, #14]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800727c:	7bba      	ldrb	r2, [r7, #14]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	32ae      	adds	r2, #174	@ 0xae
 8007282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	4798      	blx	r3
 800728e:	4603      	mov	r3, r0
 8007290:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007292:	e004      	b.n	800729e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007294:	2303      	movs	r3, #3
 8007296:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007298:	e001      	b.n	800729e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800729a:	2303      	movs	r3, #3
 800729c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	88db      	ldrh	r3, [r3, #6]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d110      	bne.n	80072c8 <USBD_StdItfReq+0xc0>
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10d      	bne.n	80072c8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fdd3 	bl	8007e58 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072b2:	e009      	b.n	80072c8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fcf7 	bl	8007caa <USBD_CtlError>
          break;
 80072bc:	e004      	b.n	80072c8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fcf2 	bl	8007caa <USBD_CtlError>
          break;
 80072c6:	e000      	b.n	80072ca <USBD_StdItfReq+0xc2>
          break;
 80072c8:	bf00      	nop
      }
      break;
 80072ca:	e004      	b.n	80072d6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fceb 	bl	8007caa <USBD_CtlError>
      break;
 80072d4:	bf00      	nop
  }

  return ret;
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	889b      	ldrh	r3, [r3, #4]
 80072f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072fc:	2b40      	cmp	r3, #64	@ 0x40
 80072fe:	d007      	beq.n	8007310 <USBD_StdEPReq+0x30>
 8007300:	2b40      	cmp	r3, #64	@ 0x40
 8007302:	f200 817f 	bhi.w	8007604 <USBD_StdEPReq+0x324>
 8007306:	2b00      	cmp	r3, #0
 8007308:	d02a      	beq.n	8007360 <USBD_StdEPReq+0x80>
 800730a:	2b20      	cmp	r3, #32
 800730c:	f040 817a 	bne.w	8007604 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007310:	7bbb      	ldrb	r3, [r7, #14]
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7ff fe85 	bl	8007024 <USBD_CoreFindEP>
 800731a:	4603      	mov	r3, r0
 800731c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800731e:	7b7b      	ldrb	r3, [r7, #13]
 8007320:	2bff      	cmp	r3, #255	@ 0xff
 8007322:	f000 8174 	beq.w	800760e <USBD_StdEPReq+0x32e>
 8007326:	7b7b      	ldrb	r3, [r7, #13]
 8007328:	2b00      	cmp	r3, #0
 800732a:	f040 8170 	bne.w	800760e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800732e:	7b7a      	ldrb	r2, [r7, #13]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007336:	7b7a      	ldrb	r2, [r7, #13]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	32ae      	adds	r2, #174	@ 0xae
 800733c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	f000 8163 	beq.w	800760e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007348:	7b7a      	ldrb	r2, [r7, #13]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	32ae      	adds	r2, #174	@ 0xae
 800734e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	6839      	ldr	r1, [r7, #0]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	4798      	blx	r3
 800735a:	4603      	mov	r3, r0
 800735c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800735e:	e156      	b.n	800760e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	785b      	ldrb	r3, [r3, #1]
 8007364:	2b03      	cmp	r3, #3
 8007366:	d008      	beq.n	800737a <USBD_StdEPReq+0x9a>
 8007368:	2b03      	cmp	r3, #3
 800736a:	f300 8145 	bgt.w	80075f8 <USBD_StdEPReq+0x318>
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 809b 	beq.w	80074aa <USBD_StdEPReq+0x1ca>
 8007374:	2b01      	cmp	r3, #1
 8007376:	d03c      	beq.n	80073f2 <USBD_StdEPReq+0x112>
 8007378:	e13e      	b.n	80075f8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b02      	cmp	r3, #2
 8007384:	d002      	beq.n	800738c <USBD_StdEPReq+0xac>
 8007386:	2b03      	cmp	r3, #3
 8007388:	d016      	beq.n	80073b8 <USBD_StdEPReq+0xd8>
 800738a:	e02c      	b.n	80073e6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00d      	beq.n	80073ae <USBD_StdEPReq+0xce>
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	2b80      	cmp	r3, #128	@ 0x80
 8007396:	d00a      	beq.n	80073ae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007398:	7bbb      	ldrb	r3, [r7, #14]
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f001 f933 	bl	8008608 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073a2:	2180      	movs	r1, #128	@ 0x80
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f001 f92f 	bl	8008608 <USBD_LL_StallEP>
 80073aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073ac:	e020      	b.n	80073f0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fc7a 	bl	8007caa <USBD_CtlError>
              break;
 80073b6:	e01b      	b.n	80073f0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	885b      	ldrh	r3, [r3, #2]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10e      	bne.n	80073de <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073c0:	7bbb      	ldrb	r3, [r7, #14]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00b      	beq.n	80073de <USBD_StdEPReq+0xfe>
 80073c6:	7bbb      	ldrb	r3, [r7, #14]
 80073c8:	2b80      	cmp	r3, #128	@ 0x80
 80073ca:	d008      	beq.n	80073de <USBD_StdEPReq+0xfe>
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	88db      	ldrh	r3, [r3, #6]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d104      	bne.n	80073de <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
 80073d6:	4619      	mov	r1, r3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f001 f915 	bl	8008608 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fd3a 	bl	8007e58 <USBD_CtlSendStatus>

              break;
 80073e4:	e004      	b.n	80073f0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fc5e 	bl	8007caa <USBD_CtlError>
              break;
 80073ee:	bf00      	nop
          }
          break;
 80073f0:	e107      	b.n	8007602 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d002      	beq.n	8007404 <USBD_StdEPReq+0x124>
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d016      	beq.n	8007430 <USBD_StdEPReq+0x150>
 8007402:	e04b      	b.n	800749c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007404:	7bbb      	ldrb	r3, [r7, #14]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00d      	beq.n	8007426 <USBD_StdEPReq+0x146>
 800740a:	7bbb      	ldrb	r3, [r7, #14]
 800740c:	2b80      	cmp	r3, #128	@ 0x80
 800740e:	d00a      	beq.n	8007426 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007410:	7bbb      	ldrb	r3, [r7, #14]
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f001 f8f7 	bl	8008608 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800741a:	2180      	movs	r1, #128	@ 0x80
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f001 f8f3 	bl	8008608 <USBD_LL_StallEP>
 8007422:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007424:	e040      	b.n	80074a8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fc3e 	bl	8007caa <USBD_CtlError>
              break;
 800742e:	e03b      	b.n	80074a8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	885b      	ldrh	r3, [r3, #2]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d136      	bne.n	80074a6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800743e:	2b00      	cmp	r3, #0
 8007440:	d004      	beq.n	800744c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007442:	7bbb      	ldrb	r3, [r7, #14]
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f001 f8fd 	bl	8008646 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fd03 	bl	8007e58 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007452:	7bbb      	ldrb	r3, [r7, #14]
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7ff fde4 	bl	8007024 <USBD_CoreFindEP>
 800745c:	4603      	mov	r3, r0
 800745e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007460:	7b7b      	ldrb	r3, [r7, #13]
 8007462:	2bff      	cmp	r3, #255	@ 0xff
 8007464:	d01f      	beq.n	80074a6 <USBD_StdEPReq+0x1c6>
 8007466:	7b7b      	ldrb	r3, [r7, #13]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d11c      	bne.n	80074a6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800746c:	7b7a      	ldrb	r2, [r7, #13]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007474:	7b7a      	ldrb	r2, [r7, #13]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	32ae      	adds	r2, #174	@ 0xae
 800747a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d010      	beq.n	80074a6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007484:	7b7a      	ldrb	r2, [r7, #13]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	32ae      	adds	r2, #174	@ 0xae
 800748a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	4798      	blx	r3
 8007496:	4603      	mov	r3, r0
 8007498:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800749a:	e004      	b.n	80074a6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800749c:	6839      	ldr	r1, [r7, #0]
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fc03 	bl	8007caa <USBD_CtlError>
              break;
 80074a4:	e000      	b.n	80074a8 <USBD_StdEPReq+0x1c8>
              break;
 80074a6:	bf00      	nop
          }
          break;
 80074a8:	e0ab      	b.n	8007602 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d002      	beq.n	80074bc <USBD_StdEPReq+0x1dc>
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d032      	beq.n	8007520 <USBD_StdEPReq+0x240>
 80074ba:	e097      	b.n	80075ec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074bc:	7bbb      	ldrb	r3, [r7, #14]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d007      	beq.n	80074d2 <USBD_StdEPReq+0x1f2>
 80074c2:	7bbb      	ldrb	r3, [r7, #14]
 80074c4:	2b80      	cmp	r3, #128	@ 0x80
 80074c6:	d004      	beq.n	80074d2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fbed 	bl	8007caa <USBD_CtlError>
                break;
 80074d0:	e091      	b.n	80075f6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	da0b      	bge.n	80074f2 <USBD_StdEPReq+0x212>
 80074da:	7bbb      	ldrb	r3, [r7, #14]
 80074dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074e0:	4613      	mov	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	3310      	adds	r3, #16
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	4413      	add	r3, r2
 80074ee:	3304      	adds	r3, #4
 80074f0:	e00b      	b.n	800750a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074f2:	7bbb      	ldrb	r3, [r7, #14]
 80074f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074f8:	4613      	mov	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	4413      	add	r3, r2
 8007508:	3304      	adds	r3, #4
 800750a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2202      	movs	r2, #2
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fc43 	bl	8007da4 <USBD_CtlSendData>
              break;
 800751e:	e06a      	b.n	80075f6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007520:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007524:	2b00      	cmp	r3, #0
 8007526:	da11      	bge.n	800754c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	f003 020f 	and.w	r2, r3, #15
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	4613      	mov	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	440b      	add	r3, r1
 800753a:	3324      	adds	r3, #36	@ 0x24
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d117      	bne.n	8007572 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fbb0 	bl	8007caa <USBD_CtlError>
                  break;
 800754a:	e054      	b.n	80075f6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800754c:	7bbb      	ldrb	r3, [r7, #14]
 800754e:	f003 020f 	and.w	r2, r3, #15
 8007552:	6879      	ldr	r1, [r7, #4]
 8007554:	4613      	mov	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	440b      	add	r3, r1
 800755e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d104      	bne.n	8007572 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fb9d 	bl	8007caa <USBD_CtlError>
                  break;
 8007570:	e041      	b.n	80075f6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007572:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007576:	2b00      	cmp	r3, #0
 8007578:	da0b      	bge.n	8007592 <USBD_StdEPReq+0x2b2>
 800757a:	7bbb      	ldrb	r3, [r7, #14]
 800757c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007580:	4613      	mov	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	3310      	adds	r3, #16
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	4413      	add	r3, r2
 800758e:	3304      	adds	r3, #4
 8007590:	e00b      	b.n	80075aa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007592:	7bbb      	ldrb	r3, [r7, #14]
 8007594:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007598:	4613      	mov	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	4413      	add	r3, r2
 80075a8:	3304      	adds	r3, #4
 80075aa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80075ac:	7bbb      	ldrb	r3, [r7, #14]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d002      	beq.n	80075b8 <USBD_StdEPReq+0x2d8>
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
 80075b4:	2b80      	cmp	r3, #128	@ 0x80
 80075b6:	d103      	bne.n	80075c0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2200      	movs	r2, #0
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	e00e      	b.n	80075de <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80075c0:	7bbb      	ldrb	r3, [r7, #14]
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f001 f85d 	bl	8008684 <USBD_LL_IsStallEP>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d003      	beq.n	80075d8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2201      	movs	r2, #1
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	e002      	b.n	80075de <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	2200      	movs	r2, #0
 80075dc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	2202      	movs	r2, #2
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fbdd 	bl	8007da4 <USBD_CtlSendData>
              break;
 80075ea:	e004      	b.n	80075f6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80075ec:	6839      	ldr	r1, [r7, #0]
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fb5b 	bl	8007caa <USBD_CtlError>
              break;
 80075f4:	bf00      	nop
          }
          break;
 80075f6:	e004      	b.n	8007602 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fb55 	bl	8007caa <USBD_CtlError>
          break;
 8007600:	bf00      	nop
      }
      break;
 8007602:	e005      	b.n	8007610 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fb4f 	bl	8007caa <USBD_CtlError>
      break;
 800760c:	e000      	b.n	8007610 <USBD_StdEPReq+0x330>
      break;
 800760e:	bf00      	nop
  }

  return ret;
 8007610:	7bfb      	ldrb	r3, [r7, #15]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
	...

0800761c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800762a:	2300      	movs	r3, #0
 800762c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	885b      	ldrh	r3, [r3, #2]
 8007636:	0a1b      	lsrs	r3, r3, #8
 8007638:	b29b      	uxth	r3, r3
 800763a:	3b01      	subs	r3, #1
 800763c:	2b06      	cmp	r3, #6
 800763e:	f200 8128 	bhi.w	8007892 <USBD_GetDescriptor+0x276>
 8007642:	a201      	add	r2, pc, #4	@ (adr r2, 8007648 <USBD_GetDescriptor+0x2c>)
 8007644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007648:	08007665 	.word	0x08007665
 800764c:	0800767d 	.word	0x0800767d
 8007650:	080076bd 	.word	0x080076bd
 8007654:	08007893 	.word	0x08007893
 8007658:	08007893 	.word	0x08007893
 800765c:	08007833 	.word	0x08007833
 8007660:	0800785f 	.word	0x0800785f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	7c12      	ldrb	r2, [r2, #16]
 8007670:	f107 0108 	add.w	r1, r7, #8
 8007674:	4610      	mov	r0, r2
 8007676:	4798      	blx	r3
 8007678:	60f8      	str	r0, [r7, #12]
      break;
 800767a:	e112      	b.n	80078a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	7c1b      	ldrb	r3, [r3, #16]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10d      	bne.n	80076a0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800768a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800768c:	f107 0208 	add.w	r2, r7, #8
 8007690:	4610      	mov	r0, r2
 8007692:	4798      	blx	r3
 8007694:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	3301      	adds	r3, #1
 800769a:	2202      	movs	r2, #2
 800769c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800769e:	e100      	b.n	80078a2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a8:	f107 0208 	add.w	r2, r7, #8
 80076ac:	4610      	mov	r0, r2
 80076ae:	4798      	blx	r3
 80076b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3301      	adds	r3, #1
 80076b6:	2202      	movs	r2, #2
 80076b8:	701a      	strb	r2, [r3, #0]
      break;
 80076ba:	e0f2      	b.n	80078a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	885b      	ldrh	r3, [r3, #2]
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b05      	cmp	r3, #5
 80076c4:	f200 80ac 	bhi.w	8007820 <USBD_GetDescriptor+0x204>
 80076c8:	a201      	add	r2, pc, #4	@ (adr r2, 80076d0 <USBD_GetDescriptor+0xb4>)
 80076ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ce:	bf00      	nop
 80076d0:	080076e9 	.word	0x080076e9
 80076d4:	0800771d 	.word	0x0800771d
 80076d8:	08007751 	.word	0x08007751
 80076dc:	08007785 	.word	0x08007785
 80076e0:	080077b9 	.word	0x080077b9
 80076e4:	080077ed 	.word	0x080077ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00b      	beq.n	800770c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	7c12      	ldrb	r2, [r2, #16]
 8007700:	f107 0108 	add.w	r1, r7, #8
 8007704:	4610      	mov	r0, r2
 8007706:	4798      	blx	r3
 8007708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800770a:	e091      	b.n	8007830 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 facb 	bl	8007caa <USBD_CtlError>
            err++;
 8007714:	7afb      	ldrb	r3, [r7, #11]
 8007716:	3301      	adds	r3, #1
 8007718:	72fb      	strb	r3, [r7, #11]
          break;
 800771a:	e089      	b.n	8007830 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00b      	beq.n	8007740 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	7c12      	ldrb	r2, [r2, #16]
 8007734:	f107 0108 	add.w	r1, r7, #8
 8007738:	4610      	mov	r0, r2
 800773a:	4798      	blx	r3
 800773c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800773e:	e077      	b.n	8007830 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fab1 	bl	8007caa <USBD_CtlError>
            err++;
 8007748:	7afb      	ldrb	r3, [r7, #11]
 800774a:	3301      	adds	r3, #1
 800774c:	72fb      	strb	r3, [r7, #11]
          break;
 800774e:	e06f      	b.n	8007830 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00b      	beq.n	8007774 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	7c12      	ldrb	r2, [r2, #16]
 8007768:	f107 0108 	add.w	r1, r7, #8
 800776c:	4610      	mov	r0, r2
 800776e:	4798      	blx	r3
 8007770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007772:	e05d      	b.n	8007830 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fa97 	bl	8007caa <USBD_CtlError>
            err++;
 800777c:	7afb      	ldrb	r3, [r7, #11]
 800777e:	3301      	adds	r3, #1
 8007780:	72fb      	strb	r3, [r7, #11]
          break;
 8007782:	e055      	b.n	8007830 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00b      	beq.n	80077a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	7c12      	ldrb	r2, [r2, #16]
 800779c:	f107 0108 	add.w	r1, r7, #8
 80077a0:	4610      	mov	r0, r2
 80077a2:	4798      	blx	r3
 80077a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077a6:	e043      	b.n	8007830 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fa7d 	bl	8007caa <USBD_CtlError>
            err++;
 80077b0:	7afb      	ldrb	r3, [r7, #11]
 80077b2:	3301      	adds	r3, #1
 80077b4:	72fb      	strb	r3, [r7, #11]
          break;
 80077b6:	e03b      	b.n	8007830 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00b      	beq.n	80077dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077ca:	695b      	ldr	r3, [r3, #20]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	7c12      	ldrb	r2, [r2, #16]
 80077d0:	f107 0108 	add.w	r1, r7, #8
 80077d4:	4610      	mov	r0, r2
 80077d6:	4798      	blx	r3
 80077d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077da:	e029      	b.n	8007830 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fa63 	bl	8007caa <USBD_CtlError>
            err++;
 80077e4:	7afb      	ldrb	r3, [r7, #11]
 80077e6:	3301      	adds	r3, #1
 80077e8:	72fb      	strb	r3, [r7, #11]
          break;
 80077ea:	e021      	b.n	8007830 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00b      	beq.n	8007810 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	7c12      	ldrb	r2, [r2, #16]
 8007804:	f107 0108 	add.w	r1, r7, #8
 8007808:	4610      	mov	r0, r2
 800780a:	4798      	blx	r3
 800780c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800780e:	e00f      	b.n	8007830 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fa49 	bl	8007caa <USBD_CtlError>
            err++;
 8007818:	7afb      	ldrb	r3, [r7, #11]
 800781a:	3301      	adds	r3, #1
 800781c:	72fb      	strb	r3, [r7, #11]
          break;
 800781e:	e007      	b.n	8007830 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fa41 	bl	8007caa <USBD_CtlError>
          err++;
 8007828:	7afb      	ldrb	r3, [r7, #11]
 800782a:	3301      	adds	r3, #1
 800782c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800782e:	bf00      	nop
      }
      break;
 8007830:	e037      	b.n	80078a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	7c1b      	ldrb	r3, [r3, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d109      	bne.n	800784e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007842:	f107 0208 	add.w	r2, r7, #8
 8007846:	4610      	mov	r0, r2
 8007848:	4798      	blx	r3
 800784a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800784c:	e029      	b.n	80078a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fa2a 	bl	8007caa <USBD_CtlError>
        err++;
 8007856:	7afb      	ldrb	r3, [r7, #11]
 8007858:	3301      	adds	r3, #1
 800785a:	72fb      	strb	r3, [r7, #11]
      break;
 800785c:	e021      	b.n	80078a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	7c1b      	ldrb	r3, [r3, #16]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10d      	bne.n	8007882 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800786c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800786e:	f107 0208 	add.w	r2, r7, #8
 8007872:	4610      	mov	r0, r2
 8007874:	4798      	blx	r3
 8007876:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	3301      	adds	r3, #1
 800787c:	2207      	movs	r2, #7
 800787e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007880:	e00f      	b.n	80078a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fa10 	bl	8007caa <USBD_CtlError>
        err++;
 800788a:	7afb      	ldrb	r3, [r7, #11]
 800788c:	3301      	adds	r3, #1
 800788e:	72fb      	strb	r3, [r7, #11]
      break;
 8007890:	e007      	b.n	80078a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fa08 	bl	8007caa <USBD_CtlError>
      err++;
 800789a:	7afb      	ldrb	r3, [r7, #11]
 800789c:	3301      	adds	r3, #1
 800789e:	72fb      	strb	r3, [r7, #11]
      break;
 80078a0:	bf00      	nop
  }

  if (err != 0U)
 80078a2:	7afb      	ldrb	r3, [r7, #11]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d11e      	bne.n	80078e6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	88db      	ldrh	r3, [r3, #6]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d016      	beq.n	80078de <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80078b0:	893b      	ldrh	r3, [r7, #8]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00e      	beq.n	80078d4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	88da      	ldrh	r2, [r3, #6]
 80078ba:	893b      	ldrh	r3, [r7, #8]
 80078bc:	4293      	cmp	r3, r2
 80078be:	bf28      	it	cs
 80078c0:	4613      	movcs	r3, r2
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078c6:	893b      	ldrh	r3, [r7, #8]
 80078c8:	461a      	mov	r2, r3
 80078ca:	68f9      	ldr	r1, [r7, #12]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fa69 	bl	8007da4 <USBD_CtlSendData>
 80078d2:	e009      	b.n	80078e8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f9e7 	bl	8007caa <USBD_CtlError>
 80078dc:	e004      	b.n	80078e8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 faba 	bl	8007e58 <USBD_CtlSendStatus>
 80078e4:	e000      	b.n	80078e8 <USBD_GetDescriptor+0x2cc>
    return;
 80078e6:	bf00      	nop
  }
}
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop

080078f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	889b      	ldrh	r3, [r3, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d131      	bne.n	8007966 <USBD_SetAddress+0x76>
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	88db      	ldrh	r3, [r3, #6]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d12d      	bne.n	8007966 <USBD_SetAddress+0x76>
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	885b      	ldrh	r3, [r3, #2]
 800790e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007910:	d829      	bhi.n	8007966 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	885b      	ldrh	r3, [r3, #2]
 8007916:	b2db      	uxtb	r3, r3
 8007918:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800791c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b03      	cmp	r3, #3
 8007928:	d104      	bne.n	8007934 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f9bc 	bl	8007caa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007932:	e01d      	b.n	8007970 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	7bfa      	ldrb	r2, [r7, #15]
 8007938:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fecb 	bl	80086dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fa86 	bl	8007e58 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800794c:	7bfb      	ldrb	r3, [r7, #15]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d004      	beq.n	800795c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2202      	movs	r2, #2
 8007956:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800795a:	e009      	b.n	8007970 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007964:	e004      	b.n	8007970 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007966:	6839      	ldr	r1, [r7, #0]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f99e 	bl	8007caa <USBD_CtlError>
  }
}
 800796e:	bf00      	nop
 8007970:	bf00      	nop
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	885b      	ldrh	r3, [r3, #2]
 800798a:	b2da      	uxtb	r2, r3
 800798c:	4b4e      	ldr	r3, [pc, #312]	@ (8007ac8 <USBD_SetConfig+0x150>)
 800798e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007990:	4b4d      	ldr	r3, [pc, #308]	@ (8007ac8 <USBD_SetConfig+0x150>)
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d905      	bls.n	80079a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f985 	bl	8007caa <USBD_CtlError>
    return USBD_FAIL;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e08c      	b.n	8007abe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d002      	beq.n	80079b6 <USBD_SetConfig+0x3e>
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d029      	beq.n	8007a08 <USBD_SetConfig+0x90>
 80079b4:	e075      	b.n	8007aa2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80079b6:	4b44      	ldr	r3, [pc, #272]	@ (8007ac8 <USBD_SetConfig+0x150>)
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d020      	beq.n	8007a00 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80079be:	4b42      	ldr	r3, [pc, #264]	@ (8007ac8 <USBD_SetConfig+0x150>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079c8:	4b3f      	ldr	r3, [pc, #252]	@ (8007ac8 <USBD_SetConfig+0x150>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7fe ffe3 	bl	800699a <USBD_SetClassConfig>
 80079d4:	4603      	mov	r3, r0
 80079d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d008      	beq.n	80079f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f962 	bl	8007caa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2202      	movs	r2, #2
 80079ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079ee:	e065      	b.n	8007abc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fa31 	bl	8007e58 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2203      	movs	r2, #3
 80079fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80079fe:	e05d      	b.n	8007abc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fa29 	bl	8007e58 <USBD_CtlSendStatus>
      break;
 8007a06:	e059      	b.n	8007abc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a08:	4b2f      	ldr	r3, [pc, #188]	@ (8007ac8 <USBD_SetConfig+0x150>)
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d112      	bne.n	8007a36 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007a18:	4b2b      	ldr	r3, [pc, #172]	@ (8007ac8 <USBD_SetConfig+0x150>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a22:	4b29      	ldr	r3, [pc, #164]	@ (8007ac8 <USBD_SetConfig+0x150>)
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	4619      	mov	r1, r3
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7fe ffd2 	bl	80069d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa12 	bl	8007e58 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a34:	e042      	b.n	8007abc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007a36:	4b24      	ldr	r3, [pc, #144]	@ (8007ac8 <USBD_SetConfig+0x150>)
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d02a      	beq.n	8007a9a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7fe ffc0 	bl	80069d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a52:	4b1d      	ldr	r3, [pc, #116]	@ (8007ac8 <USBD_SetConfig+0x150>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ac8 <USBD_SetConfig+0x150>)
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7fe ff99 	bl	800699a <USBD_SetClassConfig>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00f      	beq.n	8007a92 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f918 	bl	8007caa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7fe ffa5 	bl	80069d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007a90:	e014      	b.n	8007abc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f9e0 	bl	8007e58 <USBD_CtlSendStatus>
      break;
 8007a98:	e010      	b.n	8007abc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f9dc 	bl	8007e58 <USBD_CtlSendStatus>
      break;
 8007aa0:	e00c      	b.n	8007abc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f900 	bl	8007caa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007aaa:	4b07      	ldr	r3, [pc, #28]	@ (8007ac8 <USBD_SetConfig+0x150>)
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7fe ff8e 	bl	80069d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8007aba:	bf00      	nop
  }

  return ret;
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20002068 	.word	0x20002068

08007acc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	88db      	ldrh	r3, [r3, #6]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d004      	beq.n	8007ae8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f8e2 	bl	8007caa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ae6:	e023      	b.n	8007b30 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	dc02      	bgt.n	8007afa <USBD_GetConfig+0x2e>
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	dc03      	bgt.n	8007b00 <USBD_GetConfig+0x34>
 8007af8:	e015      	b.n	8007b26 <USBD_GetConfig+0x5a>
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	d00b      	beq.n	8007b16 <USBD_GetConfig+0x4a>
 8007afe:	e012      	b.n	8007b26 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	3308      	adds	r3, #8
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f948 	bl	8007da4 <USBD_CtlSendData>
        break;
 8007b14:	e00c      	b.n	8007b30 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f940 	bl	8007da4 <USBD_CtlSendData>
        break;
 8007b24:	e004      	b.n	8007b30 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007b26:	6839      	ldr	r1, [r7, #0]
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f8be 	bl	8007caa <USBD_CtlError>
        break;
 8007b2e:	bf00      	nop
}
 8007b30:	bf00      	nop
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d81e      	bhi.n	8007b8e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	88db      	ldrh	r3, [r3, #6]
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d004      	beq.n	8007b62 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f8a5 	bl	8007caa <USBD_CtlError>
        break;
 8007b60:	e01a      	b.n	8007b98 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d005      	beq.n	8007b7e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	f043 0202 	orr.w	r2, r3, #2
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	330c      	adds	r3, #12
 8007b82:	2202      	movs	r2, #2
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f90c 	bl	8007da4 <USBD_CtlSendData>
      break;
 8007b8c:	e004      	b.n	8007b98 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f88a 	bl	8007caa <USBD_CtlError>
      break;
 8007b96:	bf00      	nop
  }
}
 8007b98:	bf00      	nop
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	885b      	ldrh	r3, [r3, #2]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d107      	bne.n	8007bc2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f94c 	bl	8007e58 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007bc0:	e013      	b.n	8007bea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	885b      	ldrh	r3, [r3, #2]
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d10b      	bne.n	8007be2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	889b      	ldrh	r3, [r3, #4]
 8007bce:	0a1b      	lsrs	r3, r3, #8
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	b2da      	uxtb	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f93c 	bl	8007e58 <USBD_CtlSendStatus>
}
 8007be0:	e003      	b.n	8007bea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f860 	bl	8007caa <USBD_CtlError>
}
 8007bea:	bf00      	nop
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b082      	sub	sp, #8
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	3b01      	subs	r3, #1
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d80b      	bhi.n	8007c22 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	885b      	ldrh	r3, [r3, #2]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d10c      	bne.n	8007c2c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f91c 	bl	8007e58 <USBD_CtlSendStatus>
      }
      break;
 8007c20:	e004      	b.n	8007c2c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f840 	bl	8007caa <USBD_CtlError>
      break;
 8007c2a:	e000      	b.n	8007c2e <USBD_ClrFeature+0x3c>
      break;
 8007c2c:	bf00      	nop
  }
}
 8007c2e:	bf00      	nop
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b084      	sub	sp, #16
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	781a      	ldrb	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	781a      	ldrb	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f7ff fa40 	bl	80070e6 <SWAPBYTE>
 8007c66:	4603      	mov	r3, r0
 8007c68:	461a      	mov	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3301      	adds	r3, #1
 8007c72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3301      	adds	r3, #1
 8007c78:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f7ff fa33 	bl	80070e6 <SWAPBYTE>
 8007c80:	4603      	mov	r3, r0
 8007c82:	461a      	mov	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3301      	adds	r3, #1
 8007c92:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f7ff fa26 	bl	80070e6 <SWAPBYTE>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	80da      	strh	r2, [r3, #6]
}
 8007ca2:	bf00      	nop
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b082      	sub	sp, #8
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cb4:	2180      	movs	r1, #128	@ 0x80
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fca6 	bl	8008608 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fca2 	bl	8008608 <USBD_LL_StallEP>
}
 8007cc4:	bf00      	nop
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d042      	beq.n	8007d68 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007ce6:	6938      	ldr	r0, [r7, #16]
 8007ce8:	f000 f842 	bl	8007d70 <USBD_GetLen>
 8007cec:	4603      	mov	r3, r0
 8007cee:	3301      	adds	r3, #1
 8007cf0:	005b      	lsls	r3, r3, #1
 8007cf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cf6:	d808      	bhi.n	8007d0a <USBD_GetString+0x3e>
 8007cf8:	6938      	ldr	r0, [r7, #16]
 8007cfa:	f000 f839 	bl	8007d70 <USBD_GetLen>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	3301      	adds	r3, #1
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	005b      	lsls	r3, r3, #1
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	e001      	b.n	8007d0e <USBD_GetString+0x42>
 8007d0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	4413      	add	r3, r2
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	7812      	ldrb	r2, [r2, #0]
 8007d1c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
 8007d20:	3301      	adds	r3, #1
 8007d22:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d24:	7dfb      	ldrb	r3, [r7, #23]
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	4413      	add	r3, r2
 8007d2a:	2203      	movs	r2, #3
 8007d2c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d2e:	7dfb      	ldrb	r3, [r7, #23]
 8007d30:	3301      	adds	r3, #1
 8007d32:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007d34:	e013      	b.n	8007d5e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007d36:	7dfb      	ldrb	r3, [r7, #23]
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	7812      	ldrb	r2, [r2, #0]
 8007d40:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	3301      	adds	r3, #1
 8007d46:	613b      	str	r3, [r7, #16]
    idx++;
 8007d48:	7dfb      	ldrb	r3, [r7, #23]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	4413      	add	r3, r2
 8007d54:	2200      	movs	r2, #0
 8007d56:	701a      	strb	r2, [r3, #0]
    idx++;
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1e7      	bne.n	8007d36 <USBD_GetString+0x6a>
 8007d66:	e000      	b.n	8007d6a <USBD_GetString+0x9e>
    return;
 8007d68:	bf00      	nop
  }
}
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d80:	e005      	b.n	8007d8e <USBD_GetLen+0x1e>
  {
    len++;
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	3301      	adds	r3, #1
 8007d86:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1f5      	bne.n	8007d82 <USBD_GetLen+0x12>
  }

  return len;
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2202      	movs	r2, #2
 8007db4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	2100      	movs	r1, #0
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f000 fca5 	bl	800871a <USBD_LL_Transmit>

  return USBD_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	60f8      	str	r0, [r7, #12]
 8007de2:	60b9      	str	r1, [r7, #8]
 8007de4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	2100      	movs	r1, #0
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f000 fc94 	bl	800871a <USBD_LL_Transmit>

  return USBD_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2203      	movs	r2, #3
 8007e0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	2100      	movs	r1, #0
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 fc98 	bl	800875c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	2100      	movs	r1, #0
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 fc87 	bl	800875c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2204      	movs	r2, #4
 8007e64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e68:	2300      	movs	r3, #0
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fc53 	bl	800871a <USBD_LL_Transmit>

  return USBD_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b082      	sub	sp, #8
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2205      	movs	r2, #5
 8007e8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e8e:	2300      	movs	r3, #0
 8007e90:	2200      	movs	r2, #0
 8007e92:	2100      	movs	r1, #0
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fc61 	bl	800875c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	4912      	ldr	r1, [pc, #72]	@ (8007ef4 <MX_USB_DEVICE_Init+0x50>)
 8007eac:	4812      	ldr	r0, [pc, #72]	@ (8007ef8 <MX_USB_DEVICE_Init+0x54>)
 8007eae:	f7fe fcf7 	bl	80068a0 <USBD_Init>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007eb8:	f7f8 ffcc 	bl	8000e54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007ebc:	490f      	ldr	r1, [pc, #60]	@ (8007efc <MX_USB_DEVICE_Init+0x58>)
 8007ebe:	480e      	ldr	r0, [pc, #56]	@ (8007ef8 <MX_USB_DEVICE_Init+0x54>)
 8007ec0:	f7fe fd1e 	bl	8006900 <USBD_RegisterClass>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007eca:	f7f8 ffc3 	bl	8000e54 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007ece:	490c      	ldr	r1, [pc, #48]	@ (8007f00 <MX_USB_DEVICE_Init+0x5c>)
 8007ed0:	4809      	ldr	r0, [pc, #36]	@ (8007ef8 <MX_USB_DEVICE_Init+0x54>)
 8007ed2:	f7fe fccb 	bl	800686c <USBD_CUSTOM_HID_RegisterInterface>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d001      	beq.n	8007ee0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007edc:	f7f8 ffba 	bl	8000e54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ee0:	4805      	ldr	r0, [pc, #20]	@ (8007ef8 <MX_USB_DEVICE_Init+0x54>)
 8007ee2:	f7fe fd43 	bl	800696c <USBD_Start>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007eec:	f7f8 ffb2 	bl	8000e54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ef0:	bf00      	nop
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	200005e4 	.word	0x200005e4
 8007ef8:	2000206c 	.word	0x2000206c
 8007efc:	20000010 	.word	0x20000010
 8007f00:	200005d0 	.word	0x200005d0

08007f04 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007f04:	b480      	push	{r7}
 8007f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007f08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
	log_message("CUSTOM_HID_DeInit_FS Called");
 8007f18:	4802      	ldr	r0, [pc, #8]	@ (8007f24 <CUSTOM_HID_DeInit_FS+0x10>)
 8007f1a:	f7f8 fd63 	bl	80009e4 <log_message>
  return (USBD_OK);
 8007f1e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	080093ec 	.word	0x080093ec

08007f28 <CUSTOM_HID_OutEvent_FS>:

/* OutEvent: Handle and log outgoing HID reports */
int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state, USBD_HandleTypeDef *pdev) {
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	4603      	mov	r3, r0
 8007f30:	603a      	str	r2, [r7, #0]
 8007f32:	71fb      	strb	r3, [r7, #7]
 8007f34:	460b      	mov	r3, r1
 8007f36:	71bb      	strb	r3, [r7, #6]
    uint8_t *report_buf = ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->Report_buf;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f3e:	60fb      	str	r3, [r7, #12]

    if (report_buf) {
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d044      	beq.n	8007fd0 <CUSTOM_HID_OutEvent_FS+0xa8>
        uint8_t report_id = report_buf[0];
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	72fb      	strb	r3, [r7, #11]
//        log_message("OutEvent: Event ID = %u, State = %u, Report ID = 0x%02X", event_idx, state, report_id);

        switch (report_id) {
 8007f4c:	7afb      	ldrb	r3, [r7, #11]
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	2b0b      	cmp	r3, #11
 8007f52:	d836      	bhi.n	8007fc2 <CUSTOM_HID_OutEvent_FS+0x9a>
 8007f54:	a201      	add	r2, pc, #4	@ (adr r2, 8007f5c <CUSTOM_HID_OutEvent_FS+0x34>)
 8007f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5a:	bf00      	nop
 8007f5c:	08007fcf 	.word	0x08007fcf
 8007f60:	08007fcf 	.word	0x08007fcf
 8007f64:	08007fc3 	.word	0x08007fc3
 8007f68:	08007fc3 	.word	0x08007fc3
 8007f6c:	08007f8d 	.word	0x08007f8d
 8007f70:	08007fc3 	.word	0x08007fc3
 8007f74:	08007fc3 	.word	0x08007fc3
 8007f78:	08007fc3 	.word	0x08007fc3
 8007f7c:	08007fc3 	.word	0x08007fc3
 8007f80:	08007fc3 	.word	0x08007fc3
 8007f84:	08007fc3 	.word	0x08007fc3
 8007f88:	08007fab 	.word	0x08007fab
            case 0x02: // Example for PID State Report
//                log_message("Processing PID State Report");
                // Add handling logic for Report ID 0x02
                break;
            case 0x05: // Create New Effect Report
            	memcpy(&create_new_effect_report, report_buf, sizeof(USB_FFBReport_CreateNewEffect_Feature_Data_t));
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	461a      	mov	r2, r3
 8007f92:	4b12      	ldr	r3, [pc, #72]	@ (8007fdc <CUSTOM_HID_OutEvent_FS+0xb4>)
 8007f94:	601a      	str	r2, [r3, #0]
            	log_message("Create New Effect Report Request Received");
 8007f96:	4812      	ldr	r0, [pc, #72]	@ (8007fe0 <CUSTOM_HID_OutEvent_FS+0xb8>)
 8007f98:	f7f8 fd24 	bl	80009e4 <log_message>
            	log_message("Testing memcpy, create_new_effect_report effectType =0x%02X", create_new_effect_report.effectType);
 8007f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8007fdc <CUSTOM_HID_OutEvent_FS+0xb4>)
 8007f9e:	785b      	ldrb	r3, [r3, #1]
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	4810      	ldr	r0, [pc, #64]	@ (8007fe4 <CUSTOM_HID_OutEvent_FS+0xbc>)
 8007fa4:	f7f8 fd1e 	bl	80009e4 <log_message>
            	break;
 8007fa8:	e012      	b.n	8007fd0 <CUSTOM_HID_OutEvent_FS+0xa8>

            case 0x0C: // Device Control Report
            	device_control_report.reportId = report_buf[0];
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	781a      	ldrb	r2, [r3, #0]
 8007fae:	4b0e      	ldr	r3, [pc, #56]	@ (8007fe8 <CUSTOM_HID_OutEvent_FS+0xc0>)
 8007fb0:	701a      	strb	r2, [r3, #0]
            	device_control_report.control = report_buf[1];
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	785a      	ldrb	r2, [r3, #1]
 8007fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8007fe8 <CUSTOM_HID_OutEvent_FS+0xc0>)
 8007fb8:	705a      	strb	r2, [r3, #1]
            	log_message("Device Control Report Received");
 8007fba:	480c      	ldr	r0, [pc, #48]	@ (8007fec <CUSTOM_HID_OutEvent_FS+0xc4>)
 8007fbc:	f7f8 fd12 	bl	80009e4 <log_message>
				break;
 8007fc0:	e006      	b.n	8007fd0 <CUSTOM_HID_OutEvent_FS+0xa8>

            // Add cases for other Report IDs as needed
            default:
                log_message("Unknown Report ID: 0x%02X", report_id);
 8007fc2:	7afb      	ldrb	r3, [r7, #11]
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	480a      	ldr	r0, [pc, #40]	@ (8007ff0 <CUSTOM_HID_OutEvent_FS+0xc8>)
 8007fc8:	f7f8 fd0c 	bl	80009e4 <log_message>
                break;
 8007fcc:	e000      	b.n	8007fd0 <CUSTOM_HID_OutEvent_FS+0xa8>
                break;
 8007fce:	bf00      	nop

        }
    } else {
//        log_message("OutEvent: Null report buffer.");
    }
    return USBD_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	2000234c 	.word	0x2000234c
 8007fe0:	08009408 	.word	0x08009408
 8007fe4:	08009434 	.word	0x08009434
 8007fe8:	20002348 	.word	0x20002348
 8007fec:	08009470 	.word	0x08009470
 8007ff0:	08009490 	.word	0x08009490

08007ff4 <CUSTOM_HID_GetReport>:
    }
    return USBD_OK;
}
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */

uint8_t* CUSTOM_HID_GetReport(USBD_SetupReqTypedef *req, uint16_t *length, USBD_HandleTypeDef *pdev) {
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
    static uint8_t report[64];
    uint8_t report_id = req->wValue & 0xFF;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	885b      	ldrh	r3, [r3, #2]
 8008004:	75fb      	strb	r3, [r7, #23]
    uint8_t report_type = (req->wValue >> 8) & 0xFF;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	885b      	ldrh	r3, [r3, #2]
 800800a:	0a1b      	lsrs	r3, r3, #8
 800800c:	b29b      	uxth	r3, r3
 800800e:	75bb      	strb	r3, [r7, #22]

//    log_message("GetReport: Request Type = 0x%02X, Report ID = 0x%02X, Length = %u", report_type, report_id, *length);

    switch (report_type) {
 8008010:	7dbb      	ldrb	r3, [r7, #22]
 8008012:	2b03      	cmp	r3, #3
 8008014:	d13b      	bne.n	800808e <CUSTOM_HID_GetReport+0x9a>
		case FEATURE:
			switch (report_id) {
 8008016:	7dfb      	ldrb	r3, [r7, #23]
 8008018:	2b06      	cmp	r3, #6
 800801a:	d016      	beq.n	800804a <CUSTOM_HID_GetReport+0x56>
 800801c:	2b07      	cmp	r3, #7
 800801e:	d12d      	bne.n	800807c <CUSTOM_HID_GetReport+0x88>
				case 0x07: // GET PID Pool Report
					pool_report.reportId = 0x07; // Report ID
 8008020:	4b1d      	ldr	r3, [pc, #116]	@ (8008098 <CUSTOM_HID_GetReport+0xa4>)
 8008022:	2207      	movs	r2, #7
 8008024:	701a      	strb	r2, [r3, #0]
					pool_report.ramPoolSize = 0xFFFF;
 8008026:	4b1c      	ldr	r3, [pc, #112]	@ (8008098 <CUSTOM_HID_GetReport+0xa4>)
 8008028:	f04f 32ff 	mov.w	r2, #4294967295
 800802c:	705a      	strb	r2, [r3, #1]
 800802e:	f04f 32ff 	mov.w	r2, #4294967295
 8008032:	709a      	strb	r2, [r3, #2]
					pool_report.maxSimultaneousEffects = 0x10;	// FFP supports playing up to 16 simultaneous effects
 8008034:	4b18      	ldr	r3, [pc, #96]	@ (8008098 <CUSTOM_HID_GetReport+0xa4>)
 8008036:	2210      	movs	r2, #16
 8008038:	70da      	strb	r2, [r3, #3]
					pool_report.memoryManagement = 0x03; // 0b00000011
 800803a:	4b17      	ldr	r3, [pc, #92]	@ (8008098 <CUSTOM_HID_GetReport+0xa4>)
 800803c:	2203      	movs	r2, #3
 800803e:	711a      	strb	r2, [r3, #4]
					*length = 5;
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2205      	movs	r2, #5
 8008044:	801a      	strh	r2, [r3, #0]
//					log_message("Returning Pool Report: ID:%02X %02X %02X", pool_report.reportId,
//																			pool_report.ramPoolSize,
//																			*length);
					return (uint8_t *) &pool_report;
 8008046:	4b14      	ldr	r3, [pc, #80]	@ (8008098 <CUSTOM_HID_GetReport+0xa4>)
 8008048:	e022      	b.n	8008090 <CUSTOM_HID_GetReport+0x9c>

				case 0x06:
					log_message("PID Block Load Report Request");
 800804a:	4814      	ldr	r0, [pc, #80]	@ (800809c <CUSTOM_HID_GetReport+0xa8>)
 800804c:	f7f8 fcca 	bl	80009e4 <log_message>
					block_load_report.reportId = 0x06;
 8008050:	4b13      	ldr	r3, [pc, #76]	@ (80080a0 <CUSTOM_HID_GetReport+0xac>)
 8008052:	2206      	movs	r2, #6
 8008054:	701a      	strb	r2, [r3, #0]
					block_load_report.effectBlockIndex = create_new_effect_report.effectType;
 8008056:	4b13      	ldr	r3, [pc, #76]	@ (80080a4 <CUSTOM_HID_GetReport+0xb0>)
 8008058:	785a      	ldrb	r2, [r3, #1]
 800805a:	4b11      	ldr	r3, [pc, #68]	@ (80080a0 <CUSTOM_HID_GetReport+0xac>)
 800805c:	705a      	strb	r2, [r3, #1]
					block_load_report.loadStatus = 0x04; // 0b00000100
 800805e:	4b10      	ldr	r3, [pc, #64]	@ (80080a0 <CUSTOM_HID_GetReport+0xac>)
 8008060:	2204      	movs	r2, #4
 8008062:	709a      	strb	r2, [r3, #2]
					block_load_report.ramPoolAvailable = 0xFFFF;
 8008064:	4b0e      	ldr	r3, [pc, #56]	@ (80080a0 <CUSTOM_HID_GetReport+0xac>)
 8008066:	f04f 32ff 	mov.w	r2, #4294967295
 800806a:	70da      	strb	r2, [r3, #3]
 800806c:	f04f 32ff 	mov.w	r2, #4294967295
 8008070:	711a      	strb	r2, [r3, #4]
					*length = 5;
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	2205      	movs	r2, #5
 8008076:	801a      	strh	r2, [r3, #0]

					return (uint8_t *) &block_load_report;
 8008078:	4b09      	ldr	r3, [pc, #36]	@ (80080a0 <CUSTOM_HID_GetReport+0xac>)
 800807a:	e009      	b.n	8008090 <CUSTOM_HID_GetReport+0x9c>

					break;
				default:
					log_message("Unknown Report ID: 0x%02X", report_id);
 800807c:	7dfb      	ldrb	r3, [r7, #23]
 800807e:	4619      	mov	r1, r3
 8008080:	4809      	ldr	r0, [pc, #36]	@ (80080a8 <CUSTOM_HID_GetReport+0xb4>)
 8008082:	f7f8 fcaf 	bl	80009e4 <log_message>
					*length = 0;
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	2200      	movs	r2, #0
 800808a:	801a      	strh	r2, [r3, #0]
					break;
 800808c:	bf00      	nop
			}
    }
    return report;
 800808e:	4b07      	ldr	r3, [pc, #28]	@ (80080ac <CUSTOM_HID_GetReport+0xb8>)
}
 8008090:	4618      	mov	r0, r3
 8008092:	3718      	adds	r7, #24
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	20002358 	.word	0x20002358
 800809c:	080094ac 	.word	0x080094ac
 80080a0:	20002350 	.word	0x20002350
 80080a4:	2000234c 	.word	0x2000234c
 80080a8:	08009490 	.word	0x08009490
 80080ac:	20002360 	.word	0x20002360

080080b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	4603      	mov	r3, r0
 80080b8:	6039      	str	r1, [r7, #0]
 80080ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	2212      	movs	r2, #18
 80080c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80080c2:	4b03      	ldr	r3, [pc, #12]	@ (80080d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	20000600 	.word	0x20000600

080080d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	6039      	str	r1, [r7, #0]
 80080de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	2204      	movs	r2, #4
 80080e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80080e6:	4b03      	ldr	r3, [pc, #12]	@ (80080f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	20000614 	.word	0x20000614

080080f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	4603      	mov	r3, r0
 8008100:	6039      	str	r1, [r7, #0]
 8008102:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008104:	79fb      	ldrb	r3, [r7, #7]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d105      	bne.n	8008116 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	4907      	ldr	r1, [pc, #28]	@ (800812c <USBD_FS_ProductStrDescriptor+0x34>)
 800810e:	4808      	ldr	r0, [pc, #32]	@ (8008130 <USBD_FS_ProductStrDescriptor+0x38>)
 8008110:	f7ff fddc 	bl	8007ccc <USBD_GetString>
 8008114:	e004      	b.n	8008120 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	4904      	ldr	r1, [pc, #16]	@ (800812c <USBD_FS_ProductStrDescriptor+0x34>)
 800811a:	4805      	ldr	r0, [pc, #20]	@ (8008130 <USBD_FS_ProductStrDescriptor+0x38>)
 800811c:	f7ff fdd6 	bl	8007ccc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008120:	4b02      	ldr	r3, [pc, #8]	@ (800812c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008122:	4618      	mov	r0, r3
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	200023a0 	.word	0x200023a0
 8008130:	080094cc 	.word	0x080094cc

08008134 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	6039      	str	r1, [r7, #0]
 800813e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	4904      	ldr	r1, [pc, #16]	@ (8008154 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008144:	4804      	ldr	r0, [pc, #16]	@ (8008158 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008146:	f7ff fdc1 	bl	8007ccc <USBD_GetString>
  return USBD_StrDesc;
 800814a:	4b02      	ldr	r3, [pc, #8]	@ (8008154 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800814c:	4618      	mov	r0, r3
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	200023a0 	.word	0x200023a0
 8008158:	080094ec 	.word	0x080094ec

0800815c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	4603      	mov	r3, r0
 8008164:	6039      	str	r1, [r7, #0]
 8008166:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	221a      	movs	r2, #26
 800816c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800816e:	f000 f843 	bl	80081f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008172:	4b02      	ldr	r3, [pc, #8]	@ (800817c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008174:	4618      	mov	r0, r3
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	20000618 	.word	0x20000618

08008180 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	4603      	mov	r3, r0
 8008188:	6039      	str	r1, [r7, #0]
 800818a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800818c:	79fb      	ldrb	r3, [r7, #7]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d105      	bne.n	800819e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	4907      	ldr	r1, [pc, #28]	@ (80081b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008196:	4808      	ldr	r0, [pc, #32]	@ (80081b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008198:	f7ff fd98 	bl	8007ccc <USBD_GetString>
 800819c:	e004      	b.n	80081a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	4904      	ldr	r1, [pc, #16]	@ (80081b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081a2:	4805      	ldr	r0, [pc, #20]	@ (80081b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081a4:	f7ff fd92 	bl	8007ccc <USBD_GetString>
  }
  return USBD_StrDesc;
 80081a8:	4b02      	ldr	r3, [pc, #8]	@ (80081b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	200023a0 	.word	0x200023a0
 80081b8:	08009500 	.word	0x08009500

080081bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	6039      	str	r1, [r7, #0]
 80081c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081c8:	79fb      	ldrb	r3, [r7, #7]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d105      	bne.n	80081da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	4907      	ldr	r1, [pc, #28]	@ (80081f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081d2:	4808      	ldr	r0, [pc, #32]	@ (80081f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081d4:	f7ff fd7a 	bl	8007ccc <USBD_GetString>
 80081d8:	e004      	b.n	80081e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	4904      	ldr	r1, [pc, #16]	@ (80081f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081de:	4805      	ldr	r0, [pc, #20]	@ (80081f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081e0:	f7ff fd74 	bl	8007ccc <USBD_GetString>
  }
  return USBD_StrDesc;
 80081e4:	4b02      	ldr	r3, [pc, #8]	@ (80081f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	200023a0 	.word	0x200023a0
 80081f4:	08009514 	.word	0x08009514

080081f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80081fe:	4b0f      	ldr	r3, [pc, #60]	@ (800823c <Get_SerialNum+0x44>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008204:	4b0e      	ldr	r3, [pc, #56]	@ (8008240 <Get_SerialNum+0x48>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800820a:	4b0e      	ldr	r3, [pc, #56]	@ (8008244 <Get_SerialNum+0x4c>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4413      	add	r3, r2
 8008216:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d009      	beq.n	8008232 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800821e:	2208      	movs	r2, #8
 8008220:	4909      	ldr	r1, [pc, #36]	@ (8008248 <Get_SerialNum+0x50>)
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f000 f814 	bl	8008250 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008228:	2204      	movs	r2, #4
 800822a:	4908      	ldr	r1, [pc, #32]	@ (800824c <Get_SerialNum+0x54>)
 800822c:	68b8      	ldr	r0, [r7, #8]
 800822e:	f000 f80f 	bl	8008250 <IntToUnicode>
  }
}
 8008232:	bf00      	nop
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	1fff7a10 	.word	0x1fff7a10
 8008240:	1fff7a14 	.word	0x1fff7a14
 8008244:	1fff7a18 	.word	0x1fff7a18
 8008248:	2000061a 	.word	0x2000061a
 800824c:	2000062a 	.word	0x2000062a

08008250 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	4613      	mov	r3, r2
 800825c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800825e:	2300      	movs	r3, #0
 8008260:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008262:	2300      	movs	r3, #0
 8008264:	75fb      	strb	r3, [r7, #23]
 8008266:	e027      	b.n	80082b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	0f1b      	lsrs	r3, r3, #28
 800826c:	2b09      	cmp	r3, #9
 800826e:	d80b      	bhi.n	8008288 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	0f1b      	lsrs	r3, r3, #28
 8008274:	b2da      	uxtb	r2, r3
 8008276:	7dfb      	ldrb	r3, [r7, #23]
 8008278:	005b      	lsls	r3, r3, #1
 800827a:	4619      	mov	r1, r3
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	440b      	add	r3, r1
 8008280:	3230      	adds	r2, #48	@ 0x30
 8008282:	b2d2      	uxtb	r2, r2
 8008284:	701a      	strb	r2, [r3, #0]
 8008286:	e00a      	b.n	800829e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	0f1b      	lsrs	r3, r3, #28
 800828c:	b2da      	uxtb	r2, r3
 800828e:	7dfb      	ldrb	r3, [r7, #23]
 8008290:	005b      	lsls	r3, r3, #1
 8008292:	4619      	mov	r1, r3
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	440b      	add	r3, r1
 8008298:	3237      	adds	r2, #55	@ 0x37
 800829a:	b2d2      	uxtb	r2, r2
 800829c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	011b      	lsls	r3, r3, #4
 80082a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80082a4:	7dfb      	ldrb	r3, [r7, #23]
 80082a6:	005b      	lsls	r3, r3, #1
 80082a8:	3301      	adds	r3, #1
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	4413      	add	r3, r2
 80082ae:	2200      	movs	r2, #0
 80082b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80082b2:	7dfb      	ldrb	r3, [r7, #23]
 80082b4:	3301      	adds	r3, #1
 80082b6:	75fb      	strb	r3, [r7, #23]
 80082b8:	7dfa      	ldrb	r2, [r7, #23]
 80082ba:	79fb      	ldrb	r3, [r7, #7]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d3d3      	bcc.n	8008268 <IntToUnicode+0x18>
  }
}
 80082c0:	bf00      	nop
 80082c2:	bf00      	nop
 80082c4:	371c      	adds	r7, #28
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80082e2:	4619      	mov	r1, r3
 80082e4:	4610      	mov	r0, r2
 80082e6:	f7fe fb8e 	bl	8006a06 <USBD_LL_SetupStage>
}
 80082ea:	bf00      	nop
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b082      	sub	sp, #8
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	460b      	mov	r3, r1
 80082fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008304:	78fa      	ldrb	r2, [r7, #3]
 8008306:	6879      	ldr	r1, [r7, #4]
 8008308:	4613      	mov	r3, r2
 800830a:	00db      	lsls	r3, r3, #3
 800830c:	4413      	add	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	440b      	add	r3, r1
 8008312:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	78fb      	ldrb	r3, [r7, #3]
 800831a:	4619      	mov	r1, r3
 800831c:	f7fe fbc8 	bl	8006ab0 <USBD_LL_DataOutStage>
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	460b      	mov	r3, r1
 8008332:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800833a:	78fa      	ldrb	r2, [r7, #3]
 800833c:	6879      	ldr	r1, [r7, #4]
 800833e:	4613      	mov	r3, r2
 8008340:	00db      	lsls	r3, r3, #3
 8008342:	4413      	add	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	440b      	add	r3, r1
 8008348:	3320      	adds	r3, #32
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	78fb      	ldrb	r3, [r7, #3]
 800834e:	4619      	mov	r1, r3
 8008350:	f7fe fc61 	bl	8006c16 <USBD_LL_DataInStage>
}
 8008354:	bf00      	nop
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800836a:	4618      	mov	r0, r3
 800836c:	f7fe fd9b 	bl	8006ea6 <USBD_LL_SOF>
}
 8008370:	bf00      	nop
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008380:	2301      	movs	r3, #1
 8008382:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	79db      	ldrb	r3, [r3, #7]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d102      	bne.n	8008392 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800838c:	2300      	movs	r3, #0
 800838e:	73fb      	strb	r3, [r7, #15]
 8008390:	e008      	b.n	80083a4 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	79db      	ldrb	r3, [r3, #7]
 8008396:	2b02      	cmp	r3, #2
 8008398:	d102      	bne.n	80083a0 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800839a:	2301      	movs	r3, #1
 800839c:	73fb      	strb	r3, [r7, #15]
 800839e:	e001      	b.n	80083a4 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80083a0:	f7f8 fd58 	bl	8000e54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083aa:	7bfa      	ldrb	r2, [r7, #15]
 80083ac:	4611      	mov	r1, r2
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fe fd35 	bl	8006e1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fe fcdd 	bl	8006d7a <USBD_LL_Reset>
}
 80083c0:	bf00      	nop
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fe fd31 	bl	8006e3e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	6812      	ldr	r2, [r2, #0]
 80083ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80083ee:	f043 0301 	orr.w	r3, r3, #1
 80083f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	7adb      	ldrb	r3, [r3, #11]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d005      	beq.n	8008408 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80083fc:	4b04      	ldr	r3, [pc, #16]	@ (8008410 <HAL_PCD_SuspendCallback+0x48>)
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	4a03      	ldr	r2, [pc, #12]	@ (8008410 <HAL_PCD_SuspendCallback+0x48>)
 8008402:	f043 0306 	orr.w	r3, r3, #6
 8008406:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008408:	bf00      	nop
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	e000ed00 	.word	0xe000ed00

08008414 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe fd27 	bl	8006e76 <USBD_LL_Resume>
}
 8008428:	bf00      	nop
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	460b      	mov	r3, r1
 800843a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008442:	78fa      	ldrb	r2, [r7, #3]
 8008444:	4611      	mov	r1, r2
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe fd7f 	bl	8006f4a <USBD_LL_IsoOUTIncomplete>
}
 800844c:	bf00      	nop
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008466:	78fa      	ldrb	r2, [r7, #3]
 8008468:	4611      	mov	r1, r2
 800846a:	4618      	mov	r0, r3
 800846c:	f7fe fd3b 	bl	8006ee6 <USBD_LL_IsoINIncomplete>
}
 8008470:	bf00      	nop
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe fd91 	bl	8006fae <USBD_LL_DevConnected>
}
 800848c:	bf00      	nop
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fe fd8e 	bl	8006fc4 <USBD_LL_DevDisconnected>
}
 80084a8:	bf00      	nop
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d13c      	bne.n	800853a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80084c0:	4a20      	ldr	r2, [pc, #128]	@ (8008544 <USBD_LL_Init+0x94>)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a1e      	ldr	r2, [pc, #120]	@ (8008544 <USBD_LL_Init+0x94>)
 80084cc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084d0:	4b1c      	ldr	r3, [pc, #112]	@ (8008544 <USBD_LL_Init+0x94>)
 80084d2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80084d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80084d8:	4b1a      	ldr	r3, [pc, #104]	@ (8008544 <USBD_LL_Init+0x94>)
 80084da:	2204      	movs	r2, #4
 80084dc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80084de:	4b19      	ldr	r3, [pc, #100]	@ (8008544 <USBD_LL_Init+0x94>)
 80084e0:	2202      	movs	r2, #2
 80084e2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80084e4:	4b17      	ldr	r3, [pc, #92]	@ (8008544 <USBD_LL_Init+0x94>)
 80084e6:	2200      	movs	r2, #0
 80084e8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80084ea:	4b16      	ldr	r3, [pc, #88]	@ (8008544 <USBD_LL_Init+0x94>)
 80084ec:	2202      	movs	r2, #2
 80084ee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80084f0:	4b14      	ldr	r3, [pc, #80]	@ (8008544 <USBD_LL_Init+0x94>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80084f6:	4b13      	ldr	r3, [pc, #76]	@ (8008544 <USBD_LL_Init+0x94>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80084fc:	4b11      	ldr	r3, [pc, #68]	@ (8008544 <USBD_LL_Init+0x94>)
 80084fe:	2200      	movs	r2, #0
 8008500:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008502:	4b10      	ldr	r3, [pc, #64]	@ (8008544 <USBD_LL_Init+0x94>)
 8008504:	2200      	movs	r2, #0
 8008506:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008508:	4b0e      	ldr	r3, [pc, #56]	@ (8008544 <USBD_LL_Init+0x94>)
 800850a:	2200      	movs	r2, #0
 800850c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800850e:	480d      	ldr	r0, [pc, #52]	@ (8008544 <USBD_LL_Init+0x94>)
 8008510:	f7f9 fb6f 	bl	8001bf2 <HAL_PCD_Init>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800851a:	f7f8 fc9b 	bl	8000e54 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800851e:	2180      	movs	r1, #128	@ 0x80
 8008520:	4808      	ldr	r0, [pc, #32]	@ (8008544 <USBD_LL_Init+0x94>)
 8008522:	f7fa fd84 	bl	800302e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008526:	2240      	movs	r2, #64	@ 0x40
 8008528:	2100      	movs	r1, #0
 800852a:	4806      	ldr	r0, [pc, #24]	@ (8008544 <USBD_LL_Init+0x94>)
 800852c:	f7fa fd38 	bl	8002fa0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008530:	2280      	movs	r2, #128	@ 0x80
 8008532:	2101      	movs	r1, #1
 8008534:	4803      	ldr	r0, [pc, #12]	@ (8008544 <USBD_LL_Init+0x94>)
 8008536:	f7fa fd33 	bl	8002fa0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	20001b7c 	.word	0x20001b7c

08008548 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008550:	2300      	movs	r3, #0
 8008552:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008554:	2300      	movs	r3, #0
 8008556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800855e:	4618      	mov	r0, r3
 8008560:	f7f9 fc56 	bl	8001e10 <HAL_PCD_Start>
 8008564:	4603      	mov	r3, r0
 8008566:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008568:	7bfb      	ldrb	r3, [r7, #15]
 800856a:	4618      	mov	r0, r3
 800856c:	f000 f930 	bl	80087d0 <USBD_Get_USB_Status>
 8008570:	4603      	mov	r3, r0
 8008572:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008574:	7bbb      	ldrb	r3, [r7, #14]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b084      	sub	sp, #16
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	4608      	mov	r0, r1
 8008588:	4611      	mov	r1, r2
 800858a:	461a      	mov	r2, r3
 800858c:	4603      	mov	r3, r0
 800858e:	70fb      	strb	r3, [r7, #3]
 8008590:	460b      	mov	r3, r1
 8008592:	70bb      	strb	r3, [r7, #2]
 8008594:	4613      	mov	r3, r2
 8008596:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80085a6:	78bb      	ldrb	r3, [r7, #2]
 80085a8:	883a      	ldrh	r2, [r7, #0]
 80085aa:	78f9      	ldrb	r1, [r7, #3]
 80085ac:	f7fa f92a 	bl	8002804 <HAL_PCD_EP_Open>
 80085b0:	4603      	mov	r3, r0
 80085b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 f90a 	bl	80087d0 <USBD_Get_USB_Status>
 80085bc:	4603      	mov	r3, r0
 80085be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b084      	sub	sp, #16
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	460b      	mov	r3, r1
 80085d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085e4:	78fa      	ldrb	r2, [r7, #3]
 80085e6:	4611      	mov	r1, r2
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fa f975 	bl	80028d8 <HAL_PCD_EP_Close>
 80085ee:	4603      	mov	r3, r0
 80085f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
 80085f4:	4618      	mov	r0, r3
 80085f6:	f000 f8eb 	bl	80087d0 <USBD_Get_USB_Status>
 80085fa:	4603      	mov	r3, r0
 80085fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	460b      	mov	r3, r1
 8008612:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008622:	78fa      	ldrb	r2, [r7, #3]
 8008624:	4611      	mov	r1, r2
 8008626:	4618      	mov	r0, r3
 8008628:	f7fa fa15 	bl	8002a56 <HAL_PCD_EP_SetStall>
 800862c:	4603      	mov	r3, r0
 800862e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008630:	7bfb      	ldrb	r3, [r7, #15]
 8008632:	4618      	mov	r0, r3
 8008634:	f000 f8cc 	bl	80087d0 <USBD_Get_USB_Status>
 8008638:	4603      	mov	r3, r0
 800863a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800863c:	7bbb      	ldrb	r3, [r7, #14]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	460b      	mov	r3, r1
 8008650:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008656:	2300      	movs	r3, #0
 8008658:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008660:	78fa      	ldrb	r2, [r7, #3]
 8008662:	4611      	mov	r1, r2
 8008664:	4618      	mov	r0, r3
 8008666:	f7fa fa59 	bl	8002b1c <HAL_PCD_EP_ClrStall>
 800866a:	4603      	mov	r3, r0
 800866c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	4618      	mov	r0, r3
 8008672:	f000 f8ad 	bl	80087d0 <USBD_Get_USB_Status>
 8008676:	4603      	mov	r3, r0
 8008678:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800867a:	7bbb      	ldrb	r3, [r7, #14]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	460b      	mov	r3, r1
 800868e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008696:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800869c:	2b00      	cmp	r3, #0
 800869e:	da0b      	bge.n	80086b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086a0:	78fb      	ldrb	r3, [r7, #3]
 80086a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086a6:	68f9      	ldr	r1, [r7, #12]
 80086a8:	4613      	mov	r3, r2
 80086aa:	00db      	lsls	r3, r3, #3
 80086ac:	4413      	add	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	440b      	add	r3, r1
 80086b2:	3316      	adds	r3, #22
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	e00b      	b.n	80086d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086b8:	78fb      	ldrb	r3, [r7, #3]
 80086ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086be:	68f9      	ldr	r1, [r7, #12]
 80086c0:	4613      	mov	r3, r2
 80086c2:	00db      	lsls	r3, r3, #3
 80086c4:	4413      	add	r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	440b      	add	r3, r1
 80086ca:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80086ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086f6:	78fa      	ldrb	r2, [r7, #3]
 80086f8:	4611      	mov	r1, r2
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fa f85e 	bl	80027bc <HAL_PCD_SetAddress>
 8008700:	4603      	mov	r3, r0
 8008702:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	4618      	mov	r0, r3
 8008708:	f000 f862 	bl	80087d0 <USBD_Get_USB_Status>
 800870c:	4603      	mov	r3, r0
 800870e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008710:	7bbb      	ldrb	r3, [r7, #14]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b086      	sub	sp, #24
 800871e:	af00      	add	r7, sp, #0
 8008720:	60f8      	str	r0, [r7, #12]
 8008722:	607a      	str	r2, [r7, #4]
 8008724:	603b      	str	r3, [r7, #0]
 8008726:	460b      	mov	r3, r1
 8008728:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008738:	7af9      	ldrb	r1, [r7, #11]
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	f7fa f950 	bl	80029e2 <HAL_PCD_EP_Transmit>
 8008742:	4603      	mov	r3, r0
 8008744:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008746:	7dfb      	ldrb	r3, [r7, #23]
 8008748:	4618      	mov	r0, r3
 800874a:	f000 f841 	bl	80087d0 <USBD_Get_USB_Status>
 800874e:	4603      	mov	r3, r0
 8008750:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008752:	7dbb      	ldrb	r3, [r7, #22]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3718      	adds	r7, #24
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b086      	sub	sp, #24
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	607a      	str	r2, [r7, #4]
 8008766:	603b      	str	r3, [r7, #0]
 8008768:	460b      	mov	r3, r1
 800876a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800876c:	2300      	movs	r3, #0
 800876e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800877a:	7af9      	ldrb	r1, [r7, #11]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	f7fa f8f4 	bl	800296c <HAL_PCD_EP_Receive>
 8008784:	4603      	mov	r3, r0
 8008786:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008788:	7dfb      	ldrb	r3, [r7, #23]
 800878a:	4618      	mov	r0, r3
 800878c:	f000 f820 	bl	80087d0 <USBD_Get_USB_Status>
 8008790:	4603      	mov	r3, r0
 8008792:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008794:	7dbb      	ldrb	r3, [r7, #22]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
	...

080087a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80087a8:	4b03      	ldr	r3, [pc, #12]	@ (80087b8 <USBD_static_malloc+0x18>)
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	200025a0 	.word	0x200025a0

080087bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]

}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	4603      	mov	r3, r0
 80087d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087de:	79fb      	ldrb	r3, [r7, #7]
 80087e0:	2b03      	cmp	r3, #3
 80087e2:	d817      	bhi.n	8008814 <USBD_Get_USB_Status+0x44>
 80087e4:	a201      	add	r2, pc, #4	@ (adr r2, 80087ec <USBD_Get_USB_Status+0x1c>)
 80087e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ea:	bf00      	nop
 80087ec:	080087fd 	.word	0x080087fd
 80087f0:	08008803 	.word	0x08008803
 80087f4:	08008809 	.word	0x08008809
 80087f8:	0800880f 	.word	0x0800880f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008800:	e00b      	b.n	800881a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008802:	2303      	movs	r3, #3
 8008804:	73fb      	strb	r3, [r7, #15]
    break;
 8008806:	e008      	b.n	800881a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008808:	2301      	movs	r3, #1
 800880a:	73fb      	strb	r3, [r7, #15]
    break;
 800880c:	e005      	b.n	800881a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800880e:	2303      	movs	r3, #3
 8008810:	73fb      	strb	r3, [r7, #15]
    break;
 8008812:	e002      	b.n	800881a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008814:	2303      	movs	r3, #3
 8008816:	73fb      	strb	r3, [r7, #15]
    break;
 8008818:	bf00      	nop
  }
  return usb_status;
 800881a:	7bfb      	ldrb	r3, [r7, #15]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <_vsniprintf_r>:
 8008828:	b530      	push	{r4, r5, lr}
 800882a:	4614      	mov	r4, r2
 800882c:	2c00      	cmp	r4, #0
 800882e:	b09b      	sub	sp, #108	@ 0x6c
 8008830:	4605      	mov	r5, r0
 8008832:	461a      	mov	r2, r3
 8008834:	da05      	bge.n	8008842 <_vsniprintf_r+0x1a>
 8008836:	238b      	movs	r3, #139	@ 0x8b
 8008838:	6003      	str	r3, [r0, #0]
 800883a:	f04f 30ff 	mov.w	r0, #4294967295
 800883e:	b01b      	add	sp, #108	@ 0x6c
 8008840:	bd30      	pop	{r4, r5, pc}
 8008842:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008846:	f8ad 300c 	strh.w	r3, [sp, #12]
 800884a:	bf14      	ite	ne
 800884c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008850:	4623      	moveq	r3, r4
 8008852:	9302      	str	r3, [sp, #8]
 8008854:	9305      	str	r3, [sp, #20]
 8008856:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800885a:	9100      	str	r1, [sp, #0]
 800885c:	9104      	str	r1, [sp, #16]
 800885e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008862:	4669      	mov	r1, sp
 8008864:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008866:	f000 f9cf 	bl	8008c08 <_svfiprintf_r>
 800886a:	1c43      	adds	r3, r0, #1
 800886c:	bfbc      	itt	lt
 800886e:	238b      	movlt	r3, #139	@ 0x8b
 8008870:	602b      	strlt	r3, [r5, #0]
 8008872:	2c00      	cmp	r4, #0
 8008874:	d0e3      	beq.n	800883e <_vsniprintf_r+0x16>
 8008876:	9b00      	ldr	r3, [sp, #0]
 8008878:	2200      	movs	r2, #0
 800887a:	701a      	strb	r2, [r3, #0]
 800887c:	e7df      	b.n	800883e <_vsniprintf_r+0x16>
	...

08008880 <vsniprintf>:
 8008880:	b507      	push	{r0, r1, r2, lr}
 8008882:	9300      	str	r3, [sp, #0]
 8008884:	4613      	mov	r3, r2
 8008886:	460a      	mov	r2, r1
 8008888:	4601      	mov	r1, r0
 800888a:	4803      	ldr	r0, [pc, #12]	@ (8008898 <vsniprintf+0x18>)
 800888c:	6800      	ldr	r0, [r0, #0]
 800888e:	f7ff ffcb 	bl	8008828 <_vsniprintf_r>
 8008892:	b003      	add	sp, #12
 8008894:	f85d fb04 	ldr.w	pc, [sp], #4
 8008898:	20000634 	.word	0x20000634

0800889c <memset>:
 800889c:	4402      	add	r2, r0
 800889e:	4603      	mov	r3, r0
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d100      	bne.n	80088a6 <memset+0xa>
 80088a4:	4770      	bx	lr
 80088a6:	f803 1b01 	strb.w	r1, [r3], #1
 80088aa:	e7f9      	b.n	80088a0 <memset+0x4>

080088ac <strsep>:
 80088ac:	4602      	mov	r2, r0
 80088ae:	2300      	movs	r3, #0
 80088b0:	6800      	ldr	r0, [r0, #0]
 80088b2:	f000 b800 	b.w	80088b6 <__strtok_r>

080088b6 <__strtok_r>:
 80088b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088b8:	4604      	mov	r4, r0
 80088ba:	b908      	cbnz	r0, 80088c0 <__strtok_r+0xa>
 80088bc:	6814      	ldr	r4, [r2, #0]
 80088be:	b144      	cbz	r4, 80088d2 <__strtok_r+0x1c>
 80088c0:	4620      	mov	r0, r4
 80088c2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80088c6:	460f      	mov	r7, r1
 80088c8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80088cc:	b91e      	cbnz	r6, 80088d6 <__strtok_r+0x20>
 80088ce:	b965      	cbnz	r5, 80088ea <__strtok_r+0x34>
 80088d0:	6015      	str	r5, [r2, #0]
 80088d2:	2000      	movs	r0, #0
 80088d4:	e005      	b.n	80088e2 <__strtok_r+0x2c>
 80088d6:	42b5      	cmp	r5, r6
 80088d8:	d1f6      	bne.n	80088c8 <__strtok_r+0x12>
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1f0      	bne.n	80088c0 <__strtok_r+0xa>
 80088de:	6014      	str	r4, [r2, #0]
 80088e0:	7003      	strb	r3, [r0, #0]
 80088e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088e4:	461c      	mov	r4, r3
 80088e6:	e00c      	b.n	8008902 <__strtok_r+0x4c>
 80088e8:	b915      	cbnz	r5, 80088f0 <__strtok_r+0x3a>
 80088ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 80088ee:	460e      	mov	r6, r1
 80088f0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80088f4:	42ab      	cmp	r3, r5
 80088f6:	d1f7      	bne.n	80088e8 <__strtok_r+0x32>
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d0f3      	beq.n	80088e4 <__strtok_r+0x2e>
 80088fc:	2300      	movs	r3, #0
 80088fe:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008902:	6014      	str	r4, [r2, #0]
 8008904:	e7ed      	b.n	80088e2 <__strtok_r+0x2c>
	...

08008908 <__errno>:
 8008908:	4b01      	ldr	r3, [pc, #4]	@ (8008910 <__errno+0x8>)
 800890a:	6818      	ldr	r0, [r3, #0]
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	20000634 	.word	0x20000634

08008914 <__libc_init_array>:
 8008914:	b570      	push	{r4, r5, r6, lr}
 8008916:	4d0d      	ldr	r5, [pc, #52]	@ (800894c <__libc_init_array+0x38>)
 8008918:	4c0d      	ldr	r4, [pc, #52]	@ (8008950 <__libc_init_array+0x3c>)
 800891a:	1b64      	subs	r4, r4, r5
 800891c:	10a4      	asrs	r4, r4, #2
 800891e:	2600      	movs	r6, #0
 8008920:	42a6      	cmp	r6, r4
 8008922:	d109      	bne.n	8008938 <__libc_init_array+0x24>
 8008924:	4d0b      	ldr	r5, [pc, #44]	@ (8008954 <__libc_init_array+0x40>)
 8008926:	4c0c      	ldr	r4, [pc, #48]	@ (8008958 <__libc_init_array+0x44>)
 8008928:	f000 fc66 	bl	80091f8 <_init>
 800892c:	1b64      	subs	r4, r4, r5
 800892e:	10a4      	asrs	r4, r4, #2
 8008930:	2600      	movs	r6, #0
 8008932:	42a6      	cmp	r6, r4
 8008934:	d105      	bne.n	8008942 <__libc_init_array+0x2e>
 8008936:	bd70      	pop	{r4, r5, r6, pc}
 8008938:	f855 3b04 	ldr.w	r3, [r5], #4
 800893c:	4798      	blx	r3
 800893e:	3601      	adds	r6, #1
 8008940:	e7ee      	b.n	8008920 <__libc_init_array+0xc>
 8008942:	f855 3b04 	ldr.w	r3, [r5], #4
 8008946:	4798      	blx	r3
 8008948:	3601      	adds	r6, #1
 800894a:	e7f2      	b.n	8008932 <__libc_init_array+0x1e>
 800894c:	080095bc 	.word	0x080095bc
 8008950:	080095bc 	.word	0x080095bc
 8008954:	080095bc 	.word	0x080095bc
 8008958:	080095c0 	.word	0x080095c0

0800895c <__retarget_lock_acquire_recursive>:
 800895c:	4770      	bx	lr

0800895e <__retarget_lock_release_recursive>:
 800895e:	4770      	bx	lr

08008960 <_free_r>:
 8008960:	b538      	push	{r3, r4, r5, lr}
 8008962:	4605      	mov	r5, r0
 8008964:	2900      	cmp	r1, #0
 8008966:	d041      	beq.n	80089ec <_free_r+0x8c>
 8008968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800896c:	1f0c      	subs	r4, r1, #4
 800896e:	2b00      	cmp	r3, #0
 8008970:	bfb8      	it	lt
 8008972:	18e4      	addlt	r4, r4, r3
 8008974:	f000 f8e0 	bl	8008b38 <__malloc_lock>
 8008978:	4a1d      	ldr	r2, [pc, #116]	@ (80089f0 <_free_r+0x90>)
 800897a:	6813      	ldr	r3, [r2, #0]
 800897c:	b933      	cbnz	r3, 800898c <_free_r+0x2c>
 800897e:	6063      	str	r3, [r4, #4]
 8008980:	6014      	str	r4, [r2, #0]
 8008982:	4628      	mov	r0, r5
 8008984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008988:	f000 b8dc 	b.w	8008b44 <__malloc_unlock>
 800898c:	42a3      	cmp	r3, r4
 800898e:	d908      	bls.n	80089a2 <_free_r+0x42>
 8008990:	6820      	ldr	r0, [r4, #0]
 8008992:	1821      	adds	r1, r4, r0
 8008994:	428b      	cmp	r3, r1
 8008996:	bf01      	itttt	eq
 8008998:	6819      	ldreq	r1, [r3, #0]
 800899a:	685b      	ldreq	r3, [r3, #4]
 800899c:	1809      	addeq	r1, r1, r0
 800899e:	6021      	streq	r1, [r4, #0]
 80089a0:	e7ed      	b.n	800897e <_free_r+0x1e>
 80089a2:	461a      	mov	r2, r3
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	b10b      	cbz	r3, 80089ac <_free_r+0x4c>
 80089a8:	42a3      	cmp	r3, r4
 80089aa:	d9fa      	bls.n	80089a2 <_free_r+0x42>
 80089ac:	6811      	ldr	r1, [r2, #0]
 80089ae:	1850      	adds	r0, r2, r1
 80089b0:	42a0      	cmp	r0, r4
 80089b2:	d10b      	bne.n	80089cc <_free_r+0x6c>
 80089b4:	6820      	ldr	r0, [r4, #0]
 80089b6:	4401      	add	r1, r0
 80089b8:	1850      	adds	r0, r2, r1
 80089ba:	4283      	cmp	r3, r0
 80089bc:	6011      	str	r1, [r2, #0]
 80089be:	d1e0      	bne.n	8008982 <_free_r+0x22>
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	6053      	str	r3, [r2, #4]
 80089c6:	4408      	add	r0, r1
 80089c8:	6010      	str	r0, [r2, #0]
 80089ca:	e7da      	b.n	8008982 <_free_r+0x22>
 80089cc:	d902      	bls.n	80089d4 <_free_r+0x74>
 80089ce:	230c      	movs	r3, #12
 80089d0:	602b      	str	r3, [r5, #0]
 80089d2:	e7d6      	b.n	8008982 <_free_r+0x22>
 80089d4:	6820      	ldr	r0, [r4, #0]
 80089d6:	1821      	adds	r1, r4, r0
 80089d8:	428b      	cmp	r3, r1
 80089da:	bf04      	itt	eq
 80089dc:	6819      	ldreq	r1, [r3, #0]
 80089de:	685b      	ldreq	r3, [r3, #4]
 80089e0:	6063      	str	r3, [r4, #4]
 80089e2:	bf04      	itt	eq
 80089e4:	1809      	addeq	r1, r1, r0
 80089e6:	6021      	streq	r1, [r4, #0]
 80089e8:	6054      	str	r4, [r2, #4]
 80089ea:	e7ca      	b.n	8008982 <_free_r+0x22>
 80089ec:	bd38      	pop	{r3, r4, r5, pc}
 80089ee:	bf00      	nop
 80089f0:	20002700 	.word	0x20002700

080089f4 <sbrk_aligned>:
 80089f4:	b570      	push	{r4, r5, r6, lr}
 80089f6:	4e0f      	ldr	r6, [pc, #60]	@ (8008a34 <sbrk_aligned+0x40>)
 80089f8:	460c      	mov	r4, r1
 80089fa:	6831      	ldr	r1, [r6, #0]
 80089fc:	4605      	mov	r5, r0
 80089fe:	b911      	cbnz	r1, 8008a06 <sbrk_aligned+0x12>
 8008a00:	f000 fba6 	bl	8009150 <_sbrk_r>
 8008a04:	6030      	str	r0, [r6, #0]
 8008a06:	4621      	mov	r1, r4
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f000 fba1 	bl	8009150 <_sbrk_r>
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	d103      	bne.n	8008a1a <sbrk_aligned+0x26>
 8008a12:	f04f 34ff 	mov.w	r4, #4294967295
 8008a16:	4620      	mov	r0, r4
 8008a18:	bd70      	pop	{r4, r5, r6, pc}
 8008a1a:	1cc4      	adds	r4, r0, #3
 8008a1c:	f024 0403 	bic.w	r4, r4, #3
 8008a20:	42a0      	cmp	r0, r4
 8008a22:	d0f8      	beq.n	8008a16 <sbrk_aligned+0x22>
 8008a24:	1a21      	subs	r1, r4, r0
 8008a26:	4628      	mov	r0, r5
 8008a28:	f000 fb92 	bl	8009150 <_sbrk_r>
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	d1f2      	bne.n	8008a16 <sbrk_aligned+0x22>
 8008a30:	e7ef      	b.n	8008a12 <sbrk_aligned+0x1e>
 8008a32:	bf00      	nop
 8008a34:	200026fc 	.word	0x200026fc

08008a38 <_malloc_r>:
 8008a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a3c:	1ccd      	adds	r5, r1, #3
 8008a3e:	f025 0503 	bic.w	r5, r5, #3
 8008a42:	3508      	adds	r5, #8
 8008a44:	2d0c      	cmp	r5, #12
 8008a46:	bf38      	it	cc
 8008a48:	250c      	movcc	r5, #12
 8008a4a:	2d00      	cmp	r5, #0
 8008a4c:	4606      	mov	r6, r0
 8008a4e:	db01      	blt.n	8008a54 <_malloc_r+0x1c>
 8008a50:	42a9      	cmp	r1, r5
 8008a52:	d904      	bls.n	8008a5e <_malloc_r+0x26>
 8008a54:	230c      	movs	r3, #12
 8008a56:	6033      	str	r3, [r6, #0]
 8008a58:	2000      	movs	r0, #0
 8008a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b34 <_malloc_r+0xfc>
 8008a62:	f000 f869 	bl	8008b38 <__malloc_lock>
 8008a66:	f8d8 3000 	ldr.w	r3, [r8]
 8008a6a:	461c      	mov	r4, r3
 8008a6c:	bb44      	cbnz	r4, 8008ac0 <_malloc_r+0x88>
 8008a6e:	4629      	mov	r1, r5
 8008a70:	4630      	mov	r0, r6
 8008a72:	f7ff ffbf 	bl	80089f4 <sbrk_aligned>
 8008a76:	1c43      	adds	r3, r0, #1
 8008a78:	4604      	mov	r4, r0
 8008a7a:	d158      	bne.n	8008b2e <_malloc_r+0xf6>
 8008a7c:	f8d8 4000 	ldr.w	r4, [r8]
 8008a80:	4627      	mov	r7, r4
 8008a82:	2f00      	cmp	r7, #0
 8008a84:	d143      	bne.n	8008b0e <_malloc_r+0xd6>
 8008a86:	2c00      	cmp	r4, #0
 8008a88:	d04b      	beq.n	8008b22 <_malloc_r+0xea>
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	4639      	mov	r1, r7
 8008a8e:	4630      	mov	r0, r6
 8008a90:	eb04 0903 	add.w	r9, r4, r3
 8008a94:	f000 fb5c 	bl	8009150 <_sbrk_r>
 8008a98:	4581      	cmp	r9, r0
 8008a9a:	d142      	bne.n	8008b22 <_malloc_r+0xea>
 8008a9c:	6821      	ldr	r1, [r4, #0]
 8008a9e:	1a6d      	subs	r5, r5, r1
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f7ff ffa6 	bl	80089f4 <sbrk_aligned>
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	d03a      	beq.n	8008b22 <_malloc_r+0xea>
 8008aac:	6823      	ldr	r3, [r4, #0]
 8008aae:	442b      	add	r3, r5
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	bb62      	cbnz	r2, 8008b14 <_malloc_r+0xdc>
 8008aba:	f8c8 7000 	str.w	r7, [r8]
 8008abe:	e00f      	b.n	8008ae0 <_malloc_r+0xa8>
 8008ac0:	6822      	ldr	r2, [r4, #0]
 8008ac2:	1b52      	subs	r2, r2, r5
 8008ac4:	d420      	bmi.n	8008b08 <_malloc_r+0xd0>
 8008ac6:	2a0b      	cmp	r2, #11
 8008ac8:	d917      	bls.n	8008afa <_malloc_r+0xc2>
 8008aca:	1961      	adds	r1, r4, r5
 8008acc:	42a3      	cmp	r3, r4
 8008ace:	6025      	str	r5, [r4, #0]
 8008ad0:	bf18      	it	ne
 8008ad2:	6059      	strne	r1, [r3, #4]
 8008ad4:	6863      	ldr	r3, [r4, #4]
 8008ad6:	bf08      	it	eq
 8008ad8:	f8c8 1000 	streq.w	r1, [r8]
 8008adc:	5162      	str	r2, [r4, r5]
 8008ade:	604b      	str	r3, [r1, #4]
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	f000 f82f 	bl	8008b44 <__malloc_unlock>
 8008ae6:	f104 000b 	add.w	r0, r4, #11
 8008aea:	1d23      	adds	r3, r4, #4
 8008aec:	f020 0007 	bic.w	r0, r0, #7
 8008af0:	1ac2      	subs	r2, r0, r3
 8008af2:	bf1c      	itt	ne
 8008af4:	1a1b      	subne	r3, r3, r0
 8008af6:	50a3      	strne	r3, [r4, r2]
 8008af8:	e7af      	b.n	8008a5a <_malloc_r+0x22>
 8008afa:	6862      	ldr	r2, [r4, #4]
 8008afc:	42a3      	cmp	r3, r4
 8008afe:	bf0c      	ite	eq
 8008b00:	f8c8 2000 	streq.w	r2, [r8]
 8008b04:	605a      	strne	r2, [r3, #4]
 8008b06:	e7eb      	b.n	8008ae0 <_malloc_r+0xa8>
 8008b08:	4623      	mov	r3, r4
 8008b0a:	6864      	ldr	r4, [r4, #4]
 8008b0c:	e7ae      	b.n	8008a6c <_malloc_r+0x34>
 8008b0e:	463c      	mov	r4, r7
 8008b10:	687f      	ldr	r7, [r7, #4]
 8008b12:	e7b6      	b.n	8008a82 <_malloc_r+0x4a>
 8008b14:	461a      	mov	r2, r3
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	42a3      	cmp	r3, r4
 8008b1a:	d1fb      	bne.n	8008b14 <_malloc_r+0xdc>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	6053      	str	r3, [r2, #4]
 8008b20:	e7de      	b.n	8008ae0 <_malloc_r+0xa8>
 8008b22:	230c      	movs	r3, #12
 8008b24:	6033      	str	r3, [r6, #0]
 8008b26:	4630      	mov	r0, r6
 8008b28:	f000 f80c 	bl	8008b44 <__malloc_unlock>
 8008b2c:	e794      	b.n	8008a58 <_malloc_r+0x20>
 8008b2e:	6005      	str	r5, [r0, #0]
 8008b30:	e7d6      	b.n	8008ae0 <_malloc_r+0xa8>
 8008b32:	bf00      	nop
 8008b34:	20002700 	.word	0x20002700

08008b38 <__malloc_lock>:
 8008b38:	4801      	ldr	r0, [pc, #4]	@ (8008b40 <__malloc_lock+0x8>)
 8008b3a:	f7ff bf0f 	b.w	800895c <__retarget_lock_acquire_recursive>
 8008b3e:	bf00      	nop
 8008b40:	200026f8 	.word	0x200026f8

08008b44 <__malloc_unlock>:
 8008b44:	4801      	ldr	r0, [pc, #4]	@ (8008b4c <__malloc_unlock+0x8>)
 8008b46:	f7ff bf0a 	b.w	800895e <__retarget_lock_release_recursive>
 8008b4a:	bf00      	nop
 8008b4c:	200026f8 	.word	0x200026f8

08008b50 <__ssputs_r>:
 8008b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b54:	688e      	ldr	r6, [r1, #8]
 8008b56:	461f      	mov	r7, r3
 8008b58:	42be      	cmp	r6, r7
 8008b5a:	680b      	ldr	r3, [r1, #0]
 8008b5c:	4682      	mov	sl, r0
 8008b5e:	460c      	mov	r4, r1
 8008b60:	4690      	mov	r8, r2
 8008b62:	d82d      	bhi.n	8008bc0 <__ssputs_r+0x70>
 8008b64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008b6c:	d026      	beq.n	8008bbc <__ssputs_r+0x6c>
 8008b6e:	6965      	ldr	r5, [r4, #20]
 8008b70:	6909      	ldr	r1, [r1, #16]
 8008b72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b76:	eba3 0901 	sub.w	r9, r3, r1
 8008b7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b7e:	1c7b      	adds	r3, r7, #1
 8008b80:	444b      	add	r3, r9
 8008b82:	106d      	asrs	r5, r5, #1
 8008b84:	429d      	cmp	r5, r3
 8008b86:	bf38      	it	cc
 8008b88:	461d      	movcc	r5, r3
 8008b8a:	0553      	lsls	r3, r2, #21
 8008b8c:	d527      	bpl.n	8008bde <__ssputs_r+0x8e>
 8008b8e:	4629      	mov	r1, r5
 8008b90:	f7ff ff52 	bl	8008a38 <_malloc_r>
 8008b94:	4606      	mov	r6, r0
 8008b96:	b360      	cbz	r0, 8008bf2 <__ssputs_r+0xa2>
 8008b98:	6921      	ldr	r1, [r4, #16]
 8008b9a:	464a      	mov	r2, r9
 8008b9c:	f000 fae8 	bl	8009170 <memcpy>
 8008ba0:	89a3      	ldrh	r3, [r4, #12]
 8008ba2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008baa:	81a3      	strh	r3, [r4, #12]
 8008bac:	6126      	str	r6, [r4, #16]
 8008bae:	6165      	str	r5, [r4, #20]
 8008bb0:	444e      	add	r6, r9
 8008bb2:	eba5 0509 	sub.w	r5, r5, r9
 8008bb6:	6026      	str	r6, [r4, #0]
 8008bb8:	60a5      	str	r5, [r4, #8]
 8008bba:	463e      	mov	r6, r7
 8008bbc:	42be      	cmp	r6, r7
 8008bbe:	d900      	bls.n	8008bc2 <__ssputs_r+0x72>
 8008bc0:	463e      	mov	r6, r7
 8008bc2:	6820      	ldr	r0, [r4, #0]
 8008bc4:	4632      	mov	r2, r6
 8008bc6:	4641      	mov	r1, r8
 8008bc8:	f000 faa8 	bl	800911c <memmove>
 8008bcc:	68a3      	ldr	r3, [r4, #8]
 8008bce:	1b9b      	subs	r3, r3, r6
 8008bd0:	60a3      	str	r3, [r4, #8]
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	4433      	add	r3, r6
 8008bd6:	6023      	str	r3, [r4, #0]
 8008bd8:	2000      	movs	r0, #0
 8008bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bde:	462a      	mov	r2, r5
 8008be0:	f000 fad4 	bl	800918c <_realloc_r>
 8008be4:	4606      	mov	r6, r0
 8008be6:	2800      	cmp	r0, #0
 8008be8:	d1e0      	bne.n	8008bac <__ssputs_r+0x5c>
 8008bea:	6921      	ldr	r1, [r4, #16]
 8008bec:	4650      	mov	r0, sl
 8008bee:	f7ff feb7 	bl	8008960 <_free_r>
 8008bf2:	230c      	movs	r3, #12
 8008bf4:	f8ca 3000 	str.w	r3, [sl]
 8008bf8:	89a3      	ldrh	r3, [r4, #12]
 8008bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bfe:	81a3      	strh	r3, [r4, #12]
 8008c00:	f04f 30ff 	mov.w	r0, #4294967295
 8008c04:	e7e9      	b.n	8008bda <__ssputs_r+0x8a>
	...

08008c08 <_svfiprintf_r>:
 8008c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0c:	4698      	mov	r8, r3
 8008c0e:	898b      	ldrh	r3, [r1, #12]
 8008c10:	061b      	lsls	r3, r3, #24
 8008c12:	b09d      	sub	sp, #116	@ 0x74
 8008c14:	4607      	mov	r7, r0
 8008c16:	460d      	mov	r5, r1
 8008c18:	4614      	mov	r4, r2
 8008c1a:	d510      	bpl.n	8008c3e <_svfiprintf_r+0x36>
 8008c1c:	690b      	ldr	r3, [r1, #16]
 8008c1e:	b973      	cbnz	r3, 8008c3e <_svfiprintf_r+0x36>
 8008c20:	2140      	movs	r1, #64	@ 0x40
 8008c22:	f7ff ff09 	bl	8008a38 <_malloc_r>
 8008c26:	6028      	str	r0, [r5, #0]
 8008c28:	6128      	str	r0, [r5, #16]
 8008c2a:	b930      	cbnz	r0, 8008c3a <_svfiprintf_r+0x32>
 8008c2c:	230c      	movs	r3, #12
 8008c2e:	603b      	str	r3, [r7, #0]
 8008c30:	f04f 30ff 	mov.w	r0, #4294967295
 8008c34:	b01d      	add	sp, #116	@ 0x74
 8008c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c3a:	2340      	movs	r3, #64	@ 0x40
 8008c3c:	616b      	str	r3, [r5, #20]
 8008c3e:	2300      	movs	r3, #0
 8008c40:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c42:	2320      	movs	r3, #32
 8008c44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c48:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c4c:	2330      	movs	r3, #48	@ 0x30
 8008c4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008dec <_svfiprintf_r+0x1e4>
 8008c52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c56:	f04f 0901 	mov.w	r9, #1
 8008c5a:	4623      	mov	r3, r4
 8008c5c:	469a      	mov	sl, r3
 8008c5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c62:	b10a      	cbz	r2, 8008c68 <_svfiprintf_r+0x60>
 8008c64:	2a25      	cmp	r2, #37	@ 0x25
 8008c66:	d1f9      	bne.n	8008c5c <_svfiprintf_r+0x54>
 8008c68:	ebba 0b04 	subs.w	fp, sl, r4
 8008c6c:	d00b      	beq.n	8008c86 <_svfiprintf_r+0x7e>
 8008c6e:	465b      	mov	r3, fp
 8008c70:	4622      	mov	r2, r4
 8008c72:	4629      	mov	r1, r5
 8008c74:	4638      	mov	r0, r7
 8008c76:	f7ff ff6b 	bl	8008b50 <__ssputs_r>
 8008c7a:	3001      	adds	r0, #1
 8008c7c:	f000 80a7 	beq.w	8008dce <_svfiprintf_r+0x1c6>
 8008c80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c82:	445a      	add	r2, fp
 8008c84:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c86:	f89a 3000 	ldrb.w	r3, [sl]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f000 809f 	beq.w	8008dce <_svfiprintf_r+0x1c6>
 8008c90:	2300      	movs	r3, #0
 8008c92:	f04f 32ff 	mov.w	r2, #4294967295
 8008c96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c9a:	f10a 0a01 	add.w	sl, sl, #1
 8008c9e:	9304      	str	r3, [sp, #16]
 8008ca0:	9307      	str	r3, [sp, #28]
 8008ca2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ca6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ca8:	4654      	mov	r4, sl
 8008caa:	2205      	movs	r2, #5
 8008cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cb0:	484e      	ldr	r0, [pc, #312]	@ (8008dec <_svfiprintf_r+0x1e4>)
 8008cb2:	f7f7 faad 	bl	8000210 <memchr>
 8008cb6:	9a04      	ldr	r2, [sp, #16]
 8008cb8:	b9d8      	cbnz	r0, 8008cf2 <_svfiprintf_r+0xea>
 8008cba:	06d0      	lsls	r0, r2, #27
 8008cbc:	bf44      	itt	mi
 8008cbe:	2320      	movmi	r3, #32
 8008cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cc4:	0711      	lsls	r1, r2, #28
 8008cc6:	bf44      	itt	mi
 8008cc8:	232b      	movmi	r3, #43	@ 0x2b
 8008cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cce:	f89a 3000 	ldrb.w	r3, [sl]
 8008cd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cd4:	d015      	beq.n	8008d02 <_svfiprintf_r+0xfa>
 8008cd6:	9a07      	ldr	r2, [sp, #28]
 8008cd8:	4654      	mov	r4, sl
 8008cda:	2000      	movs	r0, #0
 8008cdc:	f04f 0c0a 	mov.w	ip, #10
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ce6:	3b30      	subs	r3, #48	@ 0x30
 8008ce8:	2b09      	cmp	r3, #9
 8008cea:	d94b      	bls.n	8008d84 <_svfiprintf_r+0x17c>
 8008cec:	b1b0      	cbz	r0, 8008d1c <_svfiprintf_r+0x114>
 8008cee:	9207      	str	r2, [sp, #28]
 8008cf0:	e014      	b.n	8008d1c <_svfiprintf_r+0x114>
 8008cf2:	eba0 0308 	sub.w	r3, r0, r8
 8008cf6:	fa09 f303 	lsl.w	r3, r9, r3
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	9304      	str	r3, [sp, #16]
 8008cfe:	46a2      	mov	sl, r4
 8008d00:	e7d2      	b.n	8008ca8 <_svfiprintf_r+0xa0>
 8008d02:	9b03      	ldr	r3, [sp, #12]
 8008d04:	1d19      	adds	r1, r3, #4
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	9103      	str	r1, [sp, #12]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	bfbb      	ittet	lt
 8008d0e:	425b      	neglt	r3, r3
 8008d10:	f042 0202 	orrlt.w	r2, r2, #2
 8008d14:	9307      	strge	r3, [sp, #28]
 8008d16:	9307      	strlt	r3, [sp, #28]
 8008d18:	bfb8      	it	lt
 8008d1a:	9204      	strlt	r2, [sp, #16]
 8008d1c:	7823      	ldrb	r3, [r4, #0]
 8008d1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d20:	d10a      	bne.n	8008d38 <_svfiprintf_r+0x130>
 8008d22:	7863      	ldrb	r3, [r4, #1]
 8008d24:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d26:	d132      	bne.n	8008d8e <_svfiprintf_r+0x186>
 8008d28:	9b03      	ldr	r3, [sp, #12]
 8008d2a:	1d1a      	adds	r2, r3, #4
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	9203      	str	r2, [sp, #12]
 8008d30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d34:	3402      	adds	r4, #2
 8008d36:	9305      	str	r3, [sp, #20]
 8008d38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008dfc <_svfiprintf_r+0x1f4>
 8008d3c:	7821      	ldrb	r1, [r4, #0]
 8008d3e:	2203      	movs	r2, #3
 8008d40:	4650      	mov	r0, sl
 8008d42:	f7f7 fa65 	bl	8000210 <memchr>
 8008d46:	b138      	cbz	r0, 8008d58 <_svfiprintf_r+0x150>
 8008d48:	9b04      	ldr	r3, [sp, #16]
 8008d4a:	eba0 000a 	sub.w	r0, r0, sl
 8008d4e:	2240      	movs	r2, #64	@ 0x40
 8008d50:	4082      	lsls	r2, r0
 8008d52:	4313      	orrs	r3, r2
 8008d54:	3401      	adds	r4, #1
 8008d56:	9304      	str	r3, [sp, #16]
 8008d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d5c:	4824      	ldr	r0, [pc, #144]	@ (8008df0 <_svfiprintf_r+0x1e8>)
 8008d5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d62:	2206      	movs	r2, #6
 8008d64:	f7f7 fa54 	bl	8000210 <memchr>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	d036      	beq.n	8008dda <_svfiprintf_r+0x1d2>
 8008d6c:	4b21      	ldr	r3, [pc, #132]	@ (8008df4 <_svfiprintf_r+0x1ec>)
 8008d6e:	bb1b      	cbnz	r3, 8008db8 <_svfiprintf_r+0x1b0>
 8008d70:	9b03      	ldr	r3, [sp, #12]
 8008d72:	3307      	adds	r3, #7
 8008d74:	f023 0307 	bic.w	r3, r3, #7
 8008d78:	3308      	adds	r3, #8
 8008d7a:	9303      	str	r3, [sp, #12]
 8008d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d7e:	4433      	add	r3, r6
 8008d80:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d82:	e76a      	b.n	8008c5a <_svfiprintf_r+0x52>
 8008d84:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d88:	460c      	mov	r4, r1
 8008d8a:	2001      	movs	r0, #1
 8008d8c:	e7a8      	b.n	8008ce0 <_svfiprintf_r+0xd8>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	3401      	adds	r4, #1
 8008d92:	9305      	str	r3, [sp, #20]
 8008d94:	4619      	mov	r1, r3
 8008d96:	f04f 0c0a 	mov.w	ip, #10
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008da0:	3a30      	subs	r2, #48	@ 0x30
 8008da2:	2a09      	cmp	r2, #9
 8008da4:	d903      	bls.n	8008dae <_svfiprintf_r+0x1a6>
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d0c6      	beq.n	8008d38 <_svfiprintf_r+0x130>
 8008daa:	9105      	str	r1, [sp, #20]
 8008dac:	e7c4      	b.n	8008d38 <_svfiprintf_r+0x130>
 8008dae:	fb0c 2101 	mla	r1, ip, r1, r2
 8008db2:	4604      	mov	r4, r0
 8008db4:	2301      	movs	r3, #1
 8008db6:	e7f0      	b.n	8008d9a <_svfiprintf_r+0x192>
 8008db8:	ab03      	add	r3, sp, #12
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	462a      	mov	r2, r5
 8008dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8008df8 <_svfiprintf_r+0x1f0>)
 8008dc0:	a904      	add	r1, sp, #16
 8008dc2:	4638      	mov	r0, r7
 8008dc4:	f3af 8000 	nop.w
 8008dc8:	1c42      	adds	r2, r0, #1
 8008dca:	4606      	mov	r6, r0
 8008dcc:	d1d6      	bne.n	8008d7c <_svfiprintf_r+0x174>
 8008dce:	89ab      	ldrh	r3, [r5, #12]
 8008dd0:	065b      	lsls	r3, r3, #25
 8008dd2:	f53f af2d 	bmi.w	8008c30 <_svfiprintf_r+0x28>
 8008dd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008dd8:	e72c      	b.n	8008c34 <_svfiprintf_r+0x2c>
 8008dda:	ab03      	add	r3, sp, #12
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	462a      	mov	r2, r5
 8008de0:	4b05      	ldr	r3, [pc, #20]	@ (8008df8 <_svfiprintf_r+0x1f0>)
 8008de2:	a904      	add	r1, sp, #16
 8008de4:	4638      	mov	r0, r7
 8008de6:	f000 f879 	bl	8008edc <_printf_i>
 8008dea:	e7ed      	b.n	8008dc8 <_svfiprintf_r+0x1c0>
 8008dec:	08009580 	.word	0x08009580
 8008df0:	0800958a 	.word	0x0800958a
 8008df4:	00000000 	.word	0x00000000
 8008df8:	08008b51 	.word	0x08008b51
 8008dfc:	08009586 	.word	0x08009586

08008e00 <_printf_common>:
 8008e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e04:	4616      	mov	r6, r2
 8008e06:	4698      	mov	r8, r3
 8008e08:	688a      	ldr	r2, [r1, #8]
 8008e0a:	690b      	ldr	r3, [r1, #16]
 8008e0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e10:	4293      	cmp	r3, r2
 8008e12:	bfb8      	it	lt
 8008e14:	4613      	movlt	r3, r2
 8008e16:	6033      	str	r3, [r6, #0]
 8008e18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e1c:	4607      	mov	r7, r0
 8008e1e:	460c      	mov	r4, r1
 8008e20:	b10a      	cbz	r2, 8008e26 <_printf_common+0x26>
 8008e22:	3301      	adds	r3, #1
 8008e24:	6033      	str	r3, [r6, #0]
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	0699      	lsls	r1, r3, #26
 8008e2a:	bf42      	ittt	mi
 8008e2c:	6833      	ldrmi	r3, [r6, #0]
 8008e2e:	3302      	addmi	r3, #2
 8008e30:	6033      	strmi	r3, [r6, #0]
 8008e32:	6825      	ldr	r5, [r4, #0]
 8008e34:	f015 0506 	ands.w	r5, r5, #6
 8008e38:	d106      	bne.n	8008e48 <_printf_common+0x48>
 8008e3a:	f104 0a19 	add.w	sl, r4, #25
 8008e3e:	68e3      	ldr	r3, [r4, #12]
 8008e40:	6832      	ldr	r2, [r6, #0]
 8008e42:	1a9b      	subs	r3, r3, r2
 8008e44:	42ab      	cmp	r3, r5
 8008e46:	dc26      	bgt.n	8008e96 <_printf_common+0x96>
 8008e48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e4c:	6822      	ldr	r2, [r4, #0]
 8008e4e:	3b00      	subs	r3, #0
 8008e50:	bf18      	it	ne
 8008e52:	2301      	movne	r3, #1
 8008e54:	0692      	lsls	r2, r2, #26
 8008e56:	d42b      	bmi.n	8008eb0 <_printf_common+0xb0>
 8008e58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e5c:	4641      	mov	r1, r8
 8008e5e:	4638      	mov	r0, r7
 8008e60:	47c8      	blx	r9
 8008e62:	3001      	adds	r0, #1
 8008e64:	d01e      	beq.n	8008ea4 <_printf_common+0xa4>
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	6922      	ldr	r2, [r4, #16]
 8008e6a:	f003 0306 	and.w	r3, r3, #6
 8008e6e:	2b04      	cmp	r3, #4
 8008e70:	bf02      	ittt	eq
 8008e72:	68e5      	ldreq	r5, [r4, #12]
 8008e74:	6833      	ldreq	r3, [r6, #0]
 8008e76:	1aed      	subeq	r5, r5, r3
 8008e78:	68a3      	ldr	r3, [r4, #8]
 8008e7a:	bf0c      	ite	eq
 8008e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e80:	2500      	movne	r5, #0
 8008e82:	4293      	cmp	r3, r2
 8008e84:	bfc4      	itt	gt
 8008e86:	1a9b      	subgt	r3, r3, r2
 8008e88:	18ed      	addgt	r5, r5, r3
 8008e8a:	2600      	movs	r6, #0
 8008e8c:	341a      	adds	r4, #26
 8008e8e:	42b5      	cmp	r5, r6
 8008e90:	d11a      	bne.n	8008ec8 <_printf_common+0xc8>
 8008e92:	2000      	movs	r0, #0
 8008e94:	e008      	b.n	8008ea8 <_printf_common+0xa8>
 8008e96:	2301      	movs	r3, #1
 8008e98:	4652      	mov	r2, sl
 8008e9a:	4641      	mov	r1, r8
 8008e9c:	4638      	mov	r0, r7
 8008e9e:	47c8      	blx	r9
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	d103      	bne.n	8008eac <_printf_common+0xac>
 8008ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eac:	3501      	adds	r5, #1
 8008eae:	e7c6      	b.n	8008e3e <_printf_common+0x3e>
 8008eb0:	18e1      	adds	r1, r4, r3
 8008eb2:	1c5a      	adds	r2, r3, #1
 8008eb4:	2030      	movs	r0, #48	@ 0x30
 8008eb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008eba:	4422      	add	r2, r4
 8008ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ec0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ec4:	3302      	adds	r3, #2
 8008ec6:	e7c7      	b.n	8008e58 <_printf_common+0x58>
 8008ec8:	2301      	movs	r3, #1
 8008eca:	4622      	mov	r2, r4
 8008ecc:	4641      	mov	r1, r8
 8008ece:	4638      	mov	r0, r7
 8008ed0:	47c8      	blx	r9
 8008ed2:	3001      	adds	r0, #1
 8008ed4:	d0e6      	beq.n	8008ea4 <_printf_common+0xa4>
 8008ed6:	3601      	adds	r6, #1
 8008ed8:	e7d9      	b.n	8008e8e <_printf_common+0x8e>
	...

08008edc <_printf_i>:
 8008edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee0:	7e0f      	ldrb	r7, [r1, #24]
 8008ee2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ee4:	2f78      	cmp	r7, #120	@ 0x78
 8008ee6:	4691      	mov	r9, r2
 8008ee8:	4680      	mov	r8, r0
 8008eea:	460c      	mov	r4, r1
 8008eec:	469a      	mov	sl, r3
 8008eee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ef2:	d807      	bhi.n	8008f04 <_printf_i+0x28>
 8008ef4:	2f62      	cmp	r7, #98	@ 0x62
 8008ef6:	d80a      	bhi.n	8008f0e <_printf_i+0x32>
 8008ef8:	2f00      	cmp	r7, #0
 8008efa:	f000 80d2 	beq.w	80090a2 <_printf_i+0x1c6>
 8008efe:	2f58      	cmp	r7, #88	@ 0x58
 8008f00:	f000 80b9 	beq.w	8009076 <_printf_i+0x19a>
 8008f04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f0c:	e03a      	b.n	8008f84 <_printf_i+0xa8>
 8008f0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f12:	2b15      	cmp	r3, #21
 8008f14:	d8f6      	bhi.n	8008f04 <_printf_i+0x28>
 8008f16:	a101      	add	r1, pc, #4	@ (adr r1, 8008f1c <_printf_i+0x40>)
 8008f18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f1c:	08008f75 	.word	0x08008f75
 8008f20:	08008f89 	.word	0x08008f89
 8008f24:	08008f05 	.word	0x08008f05
 8008f28:	08008f05 	.word	0x08008f05
 8008f2c:	08008f05 	.word	0x08008f05
 8008f30:	08008f05 	.word	0x08008f05
 8008f34:	08008f89 	.word	0x08008f89
 8008f38:	08008f05 	.word	0x08008f05
 8008f3c:	08008f05 	.word	0x08008f05
 8008f40:	08008f05 	.word	0x08008f05
 8008f44:	08008f05 	.word	0x08008f05
 8008f48:	08009089 	.word	0x08009089
 8008f4c:	08008fb3 	.word	0x08008fb3
 8008f50:	08009043 	.word	0x08009043
 8008f54:	08008f05 	.word	0x08008f05
 8008f58:	08008f05 	.word	0x08008f05
 8008f5c:	080090ab 	.word	0x080090ab
 8008f60:	08008f05 	.word	0x08008f05
 8008f64:	08008fb3 	.word	0x08008fb3
 8008f68:	08008f05 	.word	0x08008f05
 8008f6c:	08008f05 	.word	0x08008f05
 8008f70:	0800904b 	.word	0x0800904b
 8008f74:	6833      	ldr	r3, [r6, #0]
 8008f76:	1d1a      	adds	r2, r3, #4
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	6032      	str	r2, [r6, #0]
 8008f7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f84:	2301      	movs	r3, #1
 8008f86:	e09d      	b.n	80090c4 <_printf_i+0x1e8>
 8008f88:	6833      	ldr	r3, [r6, #0]
 8008f8a:	6820      	ldr	r0, [r4, #0]
 8008f8c:	1d19      	adds	r1, r3, #4
 8008f8e:	6031      	str	r1, [r6, #0]
 8008f90:	0606      	lsls	r6, r0, #24
 8008f92:	d501      	bpl.n	8008f98 <_printf_i+0xbc>
 8008f94:	681d      	ldr	r5, [r3, #0]
 8008f96:	e003      	b.n	8008fa0 <_printf_i+0xc4>
 8008f98:	0645      	lsls	r5, r0, #25
 8008f9a:	d5fb      	bpl.n	8008f94 <_printf_i+0xb8>
 8008f9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008fa0:	2d00      	cmp	r5, #0
 8008fa2:	da03      	bge.n	8008fac <_printf_i+0xd0>
 8008fa4:	232d      	movs	r3, #45	@ 0x2d
 8008fa6:	426d      	negs	r5, r5
 8008fa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fac:	4859      	ldr	r0, [pc, #356]	@ (8009114 <_printf_i+0x238>)
 8008fae:	230a      	movs	r3, #10
 8008fb0:	e011      	b.n	8008fd6 <_printf_i+0xfa>
 8008fb2:	6821      	ldr	r1, [r4, #0]
 8008fb4:	6833      	ldr	r3, [r6, #0]
 8008fb6:	0608      	lsls	r0, r1, #24
 8008fb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008fbc:	d402      	bmi.n	8008fc4 <_printf_i+0xe8>
 8008fbe:	0649      	lsls	r1, r1, #25
 8008fc0:	bf48      	it	mi
 8008fc2:	b2ad      	uxthmi	r5, r5
 8008fc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008fc6:	4853      	ldr	r0, [pc, #332]	@ (8009114 <_printf_i+0x238>)
 8008fc8:	6033      	str	r3, [r6, #0]
 8008fca:	bf14      	ite	ne
 8008fcc:	230a      	movne	r3, #10
 8008fce:	2308      	moveq	r3, #8
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008fd6:	6866      	ldr	r6, [r4, #4]
 8008fd8:	60a6      	str	r6, [r4, #8]
 8008fda:	2e00      	cmp	r6, #0
 8008fdc:	bfa2      	ittt	ge
 8008fde:	6821      	ldrge	r1, [r4, #0]
 8008fe0:	f021 0104 	bicge.w	r1, r1, #4
 8008fe4:	6021      	strge	r1, [r4, #0]
 8008fe6:	b90d      	cbnz	r5, 8008fec <_printf_i+0x110>
 8008fe8:	2e00      	cmp	r6, #0
 8008fea:	d04b      	beq.n	8009084 <_printf_i+0x1a8>
 8008fec:	4616      	mov	r6, r2
 8008fee:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ff2:	fb03 5711 	mls	r7, r3, r1, r5
 8008ff6:	5dc7      	ldrb	r7, [r0, r7]
 8008ff8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ffc:	462f      	mov	r7, r5
 8008ffe:	42bb      	cmp	r3, r7
 8009000:	460d      	mov	r5, r1
 8009002:	d9f4      	bls.n	8008fee <_printf_i+0x112>
 8009004:	2b08      	cmp	r3, #8
 8009006:	d10b      	bne.n	8009020 <_printf_i+0x144>
 8009008:	6823      	ldr	r3, [r4, #0]
 800900a:	07df      	lsls	r7, r3, #31
 800900c:	d508      	bpl.n	8009020 <_printf_i+0x144>
 800900e:	6923      	ldr	r3, [r4, #16]
 8009010:	6861      	ldr	r1, [r4, #4]
 8009012:	4299      	cmp	r1, r3
 8009014:	bfde      	ittt	le
 8009016:	2330      	movle	r3, #48	@ 0x30
 8009018:	f806 3c01 	strble.w	r3, [r6, #-1]
 800901c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009020:	1b92      	subs	r2, r2, r6
 8009022:	6122      	str	r2, [r4, #16]
 8009024:	f8cd a000 	str.w	sl, [sp]
 8009028:	464b      	mov	r3, r9
 800902a:	aa03      	add	r2, sp, #12
 800902c:	4621      	mov	r1, r4
 800902e:	4640      	mov	r0, r8
 8009030:	f7ff fee6 	bl	8008e00 <_printf_common>
 8009034:	3001      	adds	r0, #1
 8009036:	d14a      	bne.n	80090ce <_printf_i+0x1f2>
 8009038:	f04f 30ff 	mov.w	r0, #4294967295
 800903c:	b004      	add	sp, #16
 800903e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	f043 0320 	orr.w	r3, r3, #32
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	4833      	ldr	r0, [pc, #204]	@ (8009118 <_printf_i+0x23c>)
 800904c:	2778      	movs	r7, #120	@ 0x78
 800904e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	6831      	ldr	r1, [r6, #0]
 8009056:	061f      	lsls	r7, r3, #24
 8009058:	f851 5b04 	ldr.w	r5, [r1], #4
 800905c:	d402      	bmi.n	8009064 <_printf_i+0x188>
 800905e:	065f      	lsls	r7, r3, #25
 8009060:	bf48      	it	mi
 8009062:	b2ad      	uxthmi	r5, r5
 8009064:	6031      	str	r1, [r6, #0]
 8009066:	07d9      	lsls	r1, r3, #31
 8009068:	bf44      	itt	mi
 800906a:	f043 0320 	orrmi.w	r3, r3, #32
 800906e:	6023      	strmi	r3, [r4, #0]
 8009070:	b11d      	cbz	r5, 800907a <_printf_i+0x19e>
 8009072:	2310      	movs	r3, #16
 8009074:	e7ac      	b.n	8008fd0 <_printf_i+0xf4>
 8009076:	4827      	ldr	r0, [pc, #156]	@ (8009114 <_printf_i+0x238>)
 8009078:	e7e9      	b.n	800904e <_printf_i+0x172>
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	f023 0320 	bic.w	r3, r3, #32
 8009080:	6023      	str	r3, [r4, #0]
 8009082:	e7f6      	b.n	8009072 <_printf_i+0x196>
 8009084:	4616      	mov	r6, r2
 8009086:	e7bd      	b.n	8009004 <_printf_i+0x128>
 8009088:	6833      	ldr	r3, [r6, #0]
 800908a:	6825      	ldr	r5, [r4, #0]
 800908c:	6961      	ldr	r1, [r4, #20]
 800908e:	1d18      	adds	r0, r3, #4
 8009090:	6030      	str	r0, [r6, #0]
 8009092:	062e      	lsls	r6, r5, #24
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	d501      	bpl.n	800909c <_printf_i+0x1c0>
 8009098:	6019      	str	r1, [r3, #0]
 800909a:	e002      	b.n	80090a2 <_printf_i+0x1c6>
 800909c:	0668      	lsls	r0, r5, #25
 800909e:	d5fb      	bpl.n	8009098 <_printf_i+0x1bc>
 80090a0:	8019      	strh	r1, [r3, #0]
 80090a2:	2300      	movs	r3, #0
 80090a4:	6123      	str	r3, [r4, #16]
 80090a6:	4616      	mov	r6, r2
 80090a8:	e7bc      	b.n	8009024 <_printf_i+0x148>
 80090aa:	6833      	ldr	r3, [r6, #0]
 80090ac:	1d1a      	adds	r2, r3, #4
 80090ae:	6032      	str	r2, [r6, #0]
 80090b0:	681e      	ldr	r6, [r3, #0]
 80090b2:	6862      	ldr	r2, [r4, #4]
 80090b4:	2100      	movs	r1, #0
 80090b6:	4630      	mov	r0, r6
 80090b8:	f7f7 f8aa 	bl	8000210 <memchr>
 80090bc:	b108      	cbz	r0, 80090c2 <_printf_i+0x1e6>
 80090be:	1b80      	subs	r0, r0, r6
 80090c0:	6060      	str	r0, [r4, #4]
 80090c2:	6863      	ldr	r3, [r4, #4]
 80090c4:	6123      	str	r3, [r4, #16]
 80090c6:	2300      	movs	r3, #0
 80090c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090cc:	e7aa      	b.n	8009024 <_printf_i+0x148>
 80090ce:	6923      	ldr	r3, [r4, #16]
 80090d0:	4632      	mov	r2, r6
 80090d2:	4649      	mov	r1, r9
 80090d4:	4640      	mov	r0, r8
 80090d6:	47d0      	blx	sl
 80090d8:	3001      	adds	r0, #1
 80090da:	d0ad      	beq.n	8009038 <_printf_i+0x15c>
 80090dc:	6823      	ldr	r3, [r4, #0]
 80090de:	079b      	lsls	r3, r3, #30
 80090e0:	d413      	bmi.n	800910a <_printf_i+0x22e>
 80090e2:	68e0      	ldr	r0, [r4, #12]
 80090e4:	9b03      	ldr	r3, [sp, #12]
 80090e6:	4298      	cmp	r0, r3
 80090e8:	bfb8      	it	lt
 80090ea:	4618      	movlt	r0, r3
 80090ec:	e7a6      	b.n	800903c <_printf_i+0x160>
 80090ee:	2301      	movs	r3, #1
 80090f0:	4632      	mov	r2, r6
 80090f2:	4649      	mov	r1, r9
 80090f4:	4640      	mov	r0, r8
 80090f6:	47d0      	blx	sl
 80090f8:	3001      	adds	r0, #1
 80090fa:	d09d      	beq.n	8009038 <_printf_i+0x15c>
 80090fc:	3501      	adds	r5, #1
 80090fe:	68e3      	ldr	r3, [r4, #12]
 8009100:	9903      	ldr	r1, [sp, #12]
 8009102:	1a5b      	subs	r3, r3, r1
 8009104:	42ab      	cmp	r3, r5
 8009106:	dcf2      	bgt.n	80090ee <_printf_i+0x212>
 8009108:	e7eb      	b.n	80090e2 <_printf_i+0x206>
 800910a:	2500      	movs	r5, #0
 800910c:	f104 0619 	add.w	r6, r4, #25
 8009110:	e7f5      	b.n	80090fe <_printf_i+0x222>
 8009112:	bf00      	nop
 8009114:	08009591 	.word	0x08009591
 8009118:	080095a2 	.word	0x080095a2

0800911c <memmove>:
 800911c:	4288      	cmp	r0, r1
 800911e:	b510      	push	{r4, lr}
 8009120:	eb01 0402 	add.w	r4, r1, r2
 8009124:	d902      	bls.n	800912c <memmove+0x10>
 8009126:	4284      	cmp	r4, r0
 8009128:	4623      	mov	r3, r4
 800912a:	d807      	bhi.n	800913c <memmove+0x20>
 800912c:	1e43      	subs	r3, r0, #1
 800912e:	42a1      	cmp	r1, r4
 8009130:	d008      	beq.n	8009144 <memmove+0x28>
 8009132:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009136:	f803 2f01 	strb.w	r2, [r3, #1]!
 800913a:	e7f8      	b.n	800912e <memmove+0x12>
 800913c:	4402      	add	r2, r0
 800913e:	4601      	mov	r1, r0
 8009140:	428a      	cmp	r2, r1
 8009142:	d100      	bne.n	8009146 <memmove+0x2a>
 8009144:	bd10      	pop	{r4, pc}
 8009146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800914a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800914e:	e7f7      	b.n	8009140 <memmove+0x24>

08009150 <_sbrk_r>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	4d06      	ldr	r5, [pc, #24]	@ (800916c <_sbrk_r+0x1c>)
 8009154:	2300      	movs	r3, #0
 8009156:	4604      	mov	r4, r0
 8009158:	4608      	mov	r0, r1
 800915a:	602b      	str	r3, [r5, #0]
 800915c:	f7f8 f900 	bl	8001360 <_sbrk>
 8009160:	1c43      	adds	r3, r0, #1
 8009162:	d102      	bne.n	800916a <_sbrk_r+0x1a>
 8009164:	682b      	ldr	r3, [r5, #0]
 8009166:	b103      	cbz	r3, 800916a <_sbrk_r+0x1a>
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	bd38      	pop	{r3, r4, r5, pc}
 800916c:	200026f4 	.word	0x200026f4

08009170 <memcpy>:
 8009170:	440a      	add	r2, r1
 8009172:	4291      	cmp	r1, r2
 8009174:	f100 33ff 	add.w	r3, r0, #4294967295
 8009178:	d100      	bne.n	800917c <memcpy+0xc>
 800917a:	4770      	bx	lr
 800917c:	b510      	push	{r4, lr}
 800917e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009182:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009186:	4291      	cmp	r1, r2
 8009188:	d1f9      	bne.n	800917e <memcpy+0xe>
 800918a:	bd10      	pop	{r4, pc}

0800918c <_realloc_r>:
 800918c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009190:	4680      	mov	r8, r0
 8009192:	4615      	mov	r5, r2
 8009194:	460c      	mov	r4, r1
 8009196:	b921      	cbnz	r1, 80091a2 <_realloc_r+0x16>
 8009198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800919c:	4611      	mov	r1, r2
 800919e:	f7ff bc4b 	b.w	8008a38 <_malloc_r>
 80091a2:	b92a      	cbnz	r2, 80091b0 <_realloc_r+0x24>
 80091a4:	f7ff fbdc 	bl	8008960 <_free_r>
 80091a8:	2400      	movs	r4, #0
 80091aa:	4620      	mov	r0, r4
 80091ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b0:	f000 f81a 	bl	80091e8 <_malloc_usable_size_r>
 80091b4:	4285      	cmp	r5, r0
 80091b6:	4606      	mov	r6, r0
 80091b8:	d802      	bhi.n	80091c0 <_realloc_r+0x34>
 80091ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80091be:	d8f4      	bhi.n	80091aa <_realloc_r+0x1e>
 80091c0:	4629      	mov	r1, r5
 80091c2:	4640      	mov	r0, r8
 80091c4:	f7ff fc38 	bl	8008a38 <_malloc_r>
 80091c8:	4607      	mov	r7, r0
 80091ca:	2800      	cmp	r0, #0
 80091cc:	d0ec      	beq.n	80091a8 <_realloc_r+0x1c>
 80091ce:	42b5      	cmp	r5, r6
 80091d0:	462a      	mov	r2, r5
 80091d2:	4621      	mov	r1, r4
 80091d4:	bf28      	it	cs
 80091d6:	4632      	movcs	r2, r6
 80091d8:	f7ff ffca 	bl	8009170 <memcpy>
 80091dc:	4621      	mov	r1, r4
 80091de:	4640      	mov	r0, r8
 80091e0:	f7ff fbbe 	bl	8008960 <_free_r>
 80091e4:	463c      	mov	r4, r7
 80091e6:	e7e0      	b.n	80091aa <_realloc_r+0x1e>

080091e8 <_malloc_usable_size_r>:
 80091e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091ec:	1f18      	subs	r0, r3, #4
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	bfbc      	itt	lt
 80091f2:	580b      	ldrlt	r3, [r1, r0]
 80091f4:	18c0      	addlt	r0, r0, r3
 80091f6:	4770      	bx	lr

080091f8 <_init>:
 80091f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fa:	bf00      	nop
 80091fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091fe:	bc08      	pop	{r3}
 8009200:	469e      	mov	lr, r3
 8009202:	4770      	bx	lr

08009204 <_fini>:
 8009204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009206:	bf00      	nop
 8009208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800920a:	bc08      	pop	{r3}
 800920c:	469e      	mov	lr, r3
 800920e:	4770      	bx	lr

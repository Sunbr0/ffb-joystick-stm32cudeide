
basic-testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000901c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  080091bc  080091bc  0000a1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009504  08009504  0000b684  2**0
                  CONTENTS
  4 .ARM          00000008  08009504  08009504  0000a504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800950c  0800950c  0000b684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800950c  0800950c  0000a50c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009510  08009510  0000a510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000684  20000000  08009514  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000147c  20000684  08009b98  0000b684  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b00  08009b98  0000bb00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b684  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130bf  00000000  00000000  0000b6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003679  00000000  00000000  0001e773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00021df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b4e  00000000  00000000  00022d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d83  00000000  00000000  0002384e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ee3  00000000  00000000  0003c5d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089dc2  00000000  00000000  000514b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db276  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041c8  00000000  00000000  000db2bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000df484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000684 	.word	0x20000684
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080091a4 	.word	0x080091a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000688 	.word	0x20000688
 80001dc:	080091a4 	.word	0x080091a4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <console_init>:




void console_init(UART_HandleTypeDef *huart)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    g_huart = huart;
 80005a8:	4a11      	ldr	r2, [pc, #68]	@ (80005f0 <console_init+0x50>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6013      	str	r3, [r2, #0]

    // Initialize ring buffers
    ring_buffer_init(&input_rb, input_storage, sizeof(input_storage));
 80005ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005b2:	4910      	ldr	r1, [pc, #64]	@ (80005f4 <console_init+0x54>)
 80005b4:	4810      	ldr	r0, [pc, #64]	@ (80005f8 <console_init+0x58>)
 80005b6:	f000 fc43 	bl	8000e40 <ring_buffer_init>
    ring_buffer_init(&output_rb, output_storage, sizeof(output_storage));
 80005ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005be:	490f      	ldr	r1, [pc, #60]	@ (80005fc <console_init+0x5c>)
 80005c0:	480f      	ldr	r0, [pc, #60]	@ (8000600 <console_init+0x60>)
 80005c2:	f000 fc3d 	bl	8000e40 <ring_buffer_init>

    tx_in_progress = false;
 80005c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <console_init+0x64>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]

    // Start receiving characters
    HAL_UART_Receive_IT(g_huart, &rx_char, 1);
 80005cc:	4b08      	ldr	r3, [pc, #32]	@ (80005f0 <console_init+0x50>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2201      	movs	r2, #1
 80005d2:	490d      	ldr	r1, [pc, #52]	@ (8000608 <console_init+0x68>)
 80005d4:	4618      	mov	r0, r3
 80005d6:	f003 fae0 	bl	8003b9a <HAL_UART_Receive_IT>

    // Print welcome message and prompt
    console_write("\r\nConsole Ready\r\n> ");
 80005da:	480c      	ldr	r0, [pc, #48]	@ (800060c <console_init+0x6c>)
 80005dc:	f000 f830 	bl	8000640 <console_write>
    line_pos = 0;
 80005e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <console_init+0x70>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200006a0 	.word	0x200006a0
 80005f4:	200006a4 	.word	0x200006a4
 80005f8:	200009a4 	.word	0x200009a4
 80005fc:	200007a4 	.word	0x200007a4
 8000600:	200009b8 	.word	0x200009b8
 8000604:	200009cc 	.word	0x200009cc
 8000608:	20000adc 	.word	0x20000adc
 800060c:	080091bc 	.word	0x080091bc
 8000610:	20000ad0 	.word	0x20000ad0

08000614 <console_register_commands>:

void console_register_commands(const void *cmds, size_t count)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
    g_commands = cmds;
 800061e:	4a06      	ldr	r2, [pc, #24]	@ (8000638 <console_register_commands+0x24>)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6013      	str	r3, [r2, #0]
    g_command_count = count;
 8000624:	4a05      	ldr	r2, [pc, #20]	@ (800063c <console_register_commands+0x28>)
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	6013      	str	r3, [r2, #0]
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000ad4 	.word	0x20000ad4
 800063c:	20000ad8 	.word	0x20000ad8

08000640 <console_write>:

void console_write(const char *str)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
    size_t len = strlen(str);
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff fdd3 	bl	80001f4 <strlen>
 800064e:	60f8      	str	r0, [r7, #12]
    ring_buffer_enqueue(&output_rb, (const uint8_t*)str, len);
 8000650:	68fa      	ldr	r2, [r7, #12]
 8000652:	6879      	ldr	r1, [r7, #4]
 8000654:	4808      	ldr	r0, [pc, #32]	@ (8000678 <console_write+0x38>)
 8000656:	f000 fc53 	bl	8000f00 <ring_buffer_enqueue>

    // If no transmission is in progress, start one now
    if (!tx_in_progress) {
 800065a:	4b08      	ldr	r3, [pc, #32]	@ (800067c <console_write+0x3c>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	f083 0301 	eor.w	r3, r3, #1
 8000664:	b2db      	uxtb	r3, r3
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <console_write+0x2e>
        console_start_tx();
 800066a:	f000 f823 	bl	80006b4 <console_start_tx>
    }
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200009b8 	.word	0x200009b8
 800067c:	200009cc 	.word	0x200009cc

08000680 <console_clear_screen>:

void console_clear_screen(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
    console_write("\033[2J\033[H");
 8000684:	4802      	ldr	r0, [pc, #8]	@ (8000690 <console_clear_screen+0x10>)
 8000686:	f7ff ffdb 	bl	8000640 <console_write>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	080091d0 	.word	0x080091d0

08000694 <cmd_clear>:

void cmd_clear(const char *args)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
    (void)args; // Ignore arguments for the clear command
    console_clear_screen();
 800069c:	f7ff fff0 	bl	8000680 <console_clear_screen>
    console_write("> "); // Reprint the prompt
 80006a0:	4803      	ldr	r0, [pc, #12]	@ (80006b0 <cmd_clear+0x1c>)
 80006a2:	f7ff ffcd 	bl	8000640 <console_write>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	080091d8 	.word	0x080091d8

080006b4 <console_start_tx>:


static void console_start_tx(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
    if (tx_in_progress) {
 80006ba:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <console_start_tx+0x5c>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d11f      	bne.n	8000704 <console_start_tx+0x50>
        return; // Already transmitting
    }

    size_t available = ring_buffer_size(&output_rb);
 80006c4:	4813      	ldr	r0, [pc, #76]	@ (8000714 <console_start_tx+0x60>)
 80006c6:	f000 fbf3 	bl	8000eb0 <ring_buffer_size>
 80006ca:	6078      	str	r0, [r7, #4]
    if (available == 0) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d01a      	beq.n	8000708 <console_start_tx+0x54>
    }

    // Copy data from ring buffer into a temporary buffer for transmission
    // (If data is contiguous, you could transmit directly. Here we show a safe approach.)
    static uint8_t tx_buffer[64]; // adjust size as needed
    if (available > sizeof(tx_buffer)) {
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b40      	cmp	r3, #64	@ 0x40
 80006d6:	d901      	bls.n	80006dc <console_start_tx+0x28>
        available = sizeof(tx_buffer); // send up to tx_buffer size
 80006d8:	2340      	movs	r3, #64	@ 0x40
 80006da:	607b      	str	r3, [r7, #4]
    }

    ring_buffer_dequeue(&output_rb, tx_buffer, available);
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	490e      	ldr	r1, [pc, #56]	@ (8000718 <console_start_tx+0x64>)
 80006e0:	480c      	ldr	r0, [pc, #48]	@ (8000714 <console_start_tx+0x60>)
 80006e2:	f000 fc9b 	bl	800101c <ring_buffer_dequeue>

    // Start transmit in interrupt mode
    if (HAL_UART_Transmit_IT(g_huart, tx_buffer, available) == HAL_OK) {
 80006e6:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <console_start_tx+0x68>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	b292      	uxth	r2, r2
 80006ee:	490a      	ldr	r1, [pc, #40]	@ (8000718 <console_start_tx+0x64>)
 80006f0:	4618      	mov	r0, r3
 80006f2:	f003 fa1c 	bl	8003b2e <HAL_UART_Transmit_IT>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d106      	bne.n	800070a <console_start_tx+0x56>
        tx_in_progress = true;
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <console_start_tx+0x5c>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
 8000702:	e002      	b.n	800070a <console_start_tx+0x56>
        return; // Already transmitting
 8000704:	bf00      	nop
 8000706:	e000      	b.n	800070a <console_start_tx+0x56>
        return;
 8000708:	bf00      	nop
    }
}
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200009cc 	.word	0x200009cc
 8000714:	200009b8 	.word	0x200009b8
 8000718:	20000ae0 	.word	0x20000ae0
 800071c:	200006a0 	.word	0x200006a0

08000720 <console_send_char>:


static void console_send_char(uint8_t c)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(g_huart, &c, 1, HAL_MAX_DELAY);
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <console_send_char+0x24>)
 800072c:	6818      	ldr	r0, [r3, #0]
 800072e:	1df9      	adds	r1, r7, #7
 8000730:	f04f 33ff 	mov.w	r3, #4294967295
 8000734:	2201      	movs	r2, #1
 8000736:	f003 f96f 	bl	8003a18 <HAL_UART_Transmit>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200006a0 	.word	0x200006a0

08000748 <console_task>:

void console_task(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
    while (!ring_buffer_empty(&input_rb)) {
 800074e:	e05a      	b.n	8000806 <console_task+0xbe>
        uint8_t c;

        if (ring_buffer_dequeue(&input_rb, &c, 1) == 1) {
 8000750:	1dfb      	adds	r3, r7, #7
 8000752:	2201      	movs	r2, #1
 8000754:	4619      	mov	r1, r3
 8000756:	4833      	ldr	r0, [pc, #204]	@ (8000824 <console_task+0xdc>)
 8000758:	f000 fc60 	bl	800101c <ring_buffer_dequeue>
 800075c:	4603      	mov	r3, r0
 800075e:	2b01      	cmp	r3, #1
 8000760:	d151      	bne.n	8000806 <console_task+0xbe>


            // Filter out unwanted non-printable characters except backspace, newline
            if ((c < 0x20 && c != '\r' && c != '\n' && c != 0x08 && c != 0x7F)) {
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b1f      	cmp	r3, #31
 8000766:	d80b      	bhi.n	8000780 <console_task+0x38>
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	2b0d      	cmp	r3, #13
 800076c:	d008      	beq.n	8000780 <console_task+0x38>
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b0a      	cmp	r3, #10
 8000772:	d005      	beq.n	8000780 <console_task+0x38>
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2b08      	cmp	r3, #8
 8000778:	d002      	beq.n	8000780 <console_task+0x38>
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b7f      	cmp	r3, #127	@ 0x7f
 800077e:	d13f      	bne.n	8000800 <console_task+0xb8>
                continue; // Ignore invalid characters
            }

            if (c == 0x08 || c == 0x7F) { // Backspace handling
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b08      	cmp	r3, #8
 8000784:	d002      	beq.n	800078c <console_task+0x44>
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b7f      	cmp	r3, #127	@ 0x7f
 800078a:	d10c      	bne.n	80007a6 <console_task+0x5e>
                if (line_pos > 0) {
 800078c:	4b26      	ldr	r3, [pc, #152]	@ (8000828 <console_task+0xe0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d037      	beq.n	8000804 <console_task+0xbc>
                    line_pos--;              // Remove the last character
 8000794:	4b24      	ldr	r3, [pc, #144]	@ (8000828 <console_task+0xe0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3b01      	subs	r3, #1
 800079a:	4a23      	ldr	r2, [pc, #140]	@ (8000828 <console_task+0xe0>)
 800079c:	6013      	str	r3, [r2, #0]
                    console_write("\b \b"); // Visually erase it
 800079e:	4823      	ldr	r0, [pc, #140]	@ (800082c <console_task+0xe4>)
 80007a0:	f7ff ff4e 	bl	8000640 <console_write>
                }
                continue; // Skip further processing for backspace
 80007a4:	e02e      	b.n	8000804 <console_task+0xbc>
            }

            // Echo valid characters so the user sees them
            console_send_char(c);
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ffb9 	bl	8000720 <console_send_char>

            if (c == '\r' || c == '\n') {
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b0d      	cmp	r3, #13
 80007b2:	d002      	beq.n	80007ba <console_task+0x72>
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b0a      	cmp	r3, #10
 80007b8:	d10e      	bne.n	80007d8 <console_task+0x90>
                // End of line, process command
                line_buffer[line_pos] = '\0'; // Null-terminate the command
 80007ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <console_task+0xe0>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a1c      	ldr	r2, [pc, #112]	@ (8000830 <console_task+0xe8>)
 80007c0:	2100      	movs	r1, #0
 80007c2:	54d1      	strb	r1, [r2, r3]
                console_process_line(line_buffer); // Process command
 80007c4:	481a      	ldr	r0, [pc, #104]	@ (8000830 <console_task+0xe8>)
 80007c6:	f000 f839 	bl	800083c <console_process_line>
                console_write("\r> "); // Print new prompt
 80007ca:	481a      	ldr	r0, [pc, #104]	@ (8000834 <console_task+0xec>)
 80007cc:	f7ff ff38 	bl	8000640 <console_write>
                line_pos = 0; // Reset line position
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <console_task+0xe0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	e016      	b.n	8000806 <console_task+0xbe>
            } else {
                // Add character to the command buffer
                if (line_pos < (CONSOLE_MAX_LINE_LENGTH - 1)) {
 80007d8:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <console_task+0xe0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2bfe      	cmp	r3, #254	@ 0xfe
 80007de:	d808      	bhi.n	80007f2 <console_task+0xaa>
                    line_buffer[line_pos++] = (char)c;
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <console_task+0xe0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	1c5a      	adds	r2, r3, #1
 80007e6:	4910      	ldr	r1, [pc, #64]	@ (8000828 <console_task+0xe0>)
 80007e8:	600a      	str	r2, [r1, #0]
 80007ea:	79f9      	ldrb	r1, [r7, #7]
 80007ec:	4a10      	ldr	r2, [pc, #64]	@ (8000830 <console_task+0xe8>)
 80007ee:	54d1      	strb	r1, [r2, r3]
 80007f0:	e009      	b.n	8000806 <console_task+0xbe>
                } else {
                    // Line too long, notify user and reset
                    console_write("\r\nError: line too long\r\n> ");
 80007f2:	4811      	ldr	r0, [pc, #68]	@ (8000838 <console_task+0xf0>)
 80007f4:	f7ff ff24 	bl	8000640 <console_write>
                    line_pos = 0;
 80007f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <console_task+0xe0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	e002      	b.n	8000806 <console_task+0xbe>
                continue; // Ignore invalid characters
 8000800:	bf00      	nop
 8000802:	e000      	b.n	8000806 <console_task+0xbe>
                continue; // Skip further processing for backspace
 8000804:	bf00      	nop
    while (!ring_buffer_empty(&input_rb)) {
 8000806:	4807      	ldr	r0, [pc, #28]	@ (8000824 <console_task+0xdc>)
 8000808:	f000 fb35 	bl	8000e76 <ring_buffer_empty>
 800080c:	4603      	mov	r3, r0
 800080e:	f083 0301 	eor.w	r3, r3, #1
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	d19b      	bne.n	8000750 <console_task+0x8>
                }
            }
        }
    }
}
 8000818:	bf00      	nop
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200009a4 	.word	0x200009a4
 8000828:	20000ad0 	.word	0x20000ad0
 800082c:	080091dc 	.word	0x080091dc
 8000830:	200009d0 	.word	0x200009d0
 8000834:	080091e0 	.word	0x080091e0
 8000838:	080091e4 	.word	0x080091e4

0800083c <console_process_line>:

static void console_process_line(char *line)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
    // Trim newline
    char *end = line + strlen(line) - 1;
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff fcd5 	bl	80001f4 <strlen>
 800084a:	4603      	mov	r3, r0
 800084c:	3b01      	subs	r3, #1
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	61fb      	str	r3, [r7, #28]
    while (end > line && (*end == '\r' || *end == '\n')) {
 8000854:	e005      	b.n	8000862 <console_process_line+0x26>
        *end = '\0';
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
        end--;
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	3b01      	subs	r3, #1
 8000860:	61fb      	str	r3, [r7, #28]
    while (end > line && (*end == '\r' || *end == '\n')) {
 8000862:	69fa      	ldr	r2, [r7, #28]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	429a      	cmp	r2, r3
 8000868:	d907      	bls.n	800087a <console_process_line+0x3e>
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b0d      	cmp	r3, #13
 8000870:	d0f1      	beq.n	8000856 <console_process_line+0x1a>
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b0a      	cmp	r3, #10
 8000878:	d0ed      	beq.n	8000856 <console_process_line+0x1a>
    }

    if (strlen(line) == 0) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d106      	bne.n	8000890 <console_process_line+0x54>
        console_write("> ");
 8000882:	482a      	ldr	r0, [pc, #168]	@ (800092c <console_process_line+0xf0>)
 8000884:	f7ff fedc 	bl	8000640 <console_write>
        line_pos = 0; // Reset here to avoid carrying over previous values
 8000888:	4b29      	ldr	r3, [pc, #164]	@ (8000930 <console_process_line+0xf4>)
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
        return;
 800088e:	e04a      	b.n	8000926 <console_process_line+0xea>
    }

    if (strcmp(line, "clear") == 0) {
 8000890:	4928      	ldr	r1, [pc, #160]	@ (8000934 <console_process_line+0xf8>)
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff fca4 	bl	80001e0 <strcmp>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d103      	bne.n	80008a6 <console_process_line+0x6a>
		cmd_clear(NULL); // Call clear command, which handles its own prompt
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff fef8 	bl	8000694 <cmd_clear>
		return;          // Avoid printing another prompt
 80008a4:	e03f      	b.n	8000926 <console_process_line+0xea>
	}

    // Parse command and args
    char *args = line;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	60fb      	str	r3, [r7, #12]
    char *cmd = strsep(&args, " ");
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	4922      	ldr	r1, [pc, #136]	@ (8000938 <console_process_line+0xfc>)
 80008b0:	4618      	mov	r0, r3
 80008b2:	f007 ffd1 	bl	8008858 <strsep>
 80008b6:	6178      	str	r0, [r7, #20]

    // Cast to command array type
    const console_command_t *cmds = (const console_command_t *)g_commands;
 80008b8:	4b20      	ldr	r3, [pc, #128]	@ (800093c <console_process_line+0x100>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < g_command_count; i++) {
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
 80008c2:	e022      	b.n	800090a <console_process_line+0xce>
        if (strcmp(cmds[i].name, cmd) == 0) {
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	461a      	mov	r2, r3
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	4413      	add	r3, r2
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	6979      	ldr	r1, [r7, #20]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fc81 	bl	80001e0 <strcmp>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d10f      	bne.n	8000904 <console_process_line+0xc8>
            cmds[i].handler(args);
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	4613      	mov	r3, r2
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	4413      	add	r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	461a      	mov	r2, r3
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	4413      	add	r3, r2
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	4610      	mov	r0, r2
 80008fa:	4798      	blx	r3
            console_write("> ");
 80008fc:	480b      	ldr	r0, [pc, #44]	@ (800092c <console_process_line+0xf0>)
 80008fe:	f7ff fe9f 	bl	8000640 <console_write>
            return;
 8000902:	e010      	b.n	8000926 <console_process_line+0xea>
    for (size_t i = 0; i < g_command_count; i++) {
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	3301      	adds	r3, #1
 8000908:	61bb      	str	r3, [r7, #24]
 800090a:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <console_process_line+0x104>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	69ba      	ldr	r2, [r7, #24]
 8000910:	429a      	cmp	r2, r3
 8000912:	d3d7      	bcc.n	80008c4 <console_process_line+0x88>
        }
    }

    console_write("Unknown command: ");
 8000914:	480b      	ldr	r0, [pc, #44]	@ (8000944 <console_process_line+0x108>)
 8000916:	f7ff fe93 	bl	8000640 <console_write>
    console_write(cmd);
 800091a:	6978      	ldr	r0, [r7, #20]
 800091c:	f7ff fe90 	bl	8000640 <console_write>
    console_write("\r\n> ");
 8000920:	4809      	ldr	r0, [pc, #36]	@ (8000948 <console_process_line+0x10c>)
 8000922:	f7ff fe8d 	bl	8000640 <console_write>
}
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	080091d8 	.word	0x080091d8
 8000930:	20000ad0 	.word	0x20000ad0
 8000934:	08009200 	.word	0x08009200
 8000938:	08009208 	.word	0x08009208
 800093c:	20000ad4 	.word	0x20000ad4
 8000940:	20000ad8 	.word	0x20000ad8
 8000944:	0800920c 	.word	0x0800920c
 8000948:	08009220 	.word	0x08009220

0800094c <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
    if (huart == g_huart)
 8000954:	4b0a      	ldr	r3, [pc, #40]	@ (8000980 <HAL_UART_RxCpltCallback+0x34>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	429a      	cmp	r2, r3
 800095c:	d10b      	bne.n	8000976 <HAL_UART_RxCpltCallback+0x2a>
    {
    	ring_buffer_enqueue(&input_rb, &rx_char, 1);
 800095e:	2201      	movs	r2, #1
 8000960:	4908      	ldr	r1, [pc, #32]	@ (8000984 <HAL_UART_RxCpltCallback+0x38>)
 8000962:	4809      	ldr	r0, [pc, #36]	@ (8000988 <HAL_UART_RxCpltCallback+0x3c>)
 8000964:	f000 facc 	bl	8000f00 <ring_buffer_enqueue>
    	HAL_UART_Receive_IT(g_huart, &rx_char, 1);
 8000968:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <HAL_UART_RxCpltCallback+0x34>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2201      	movs	r2, #1
 800096e:	4905      	ldr	r1, [pc, #20]	@ (8000984 <HAL_UART_RxCpltCallback+0x38>)
 8000970:	4618      	mov	r0, r3
 8000972:	f003 f912 	bl	8003b9a <HAL_UART_Receive_IT>
    }
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200006a0 	.word	0x200006a0
 8000984:	20000adc 	.word	0x20000adc
 8000988:	200009a4 	.word	0x200009a4

0800098c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
    if (huart == g_huart) {
 8000994:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <HAL_UART_TxCpltCallback+0x30>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	429a      	cmp	r2, r3
 800099c:	d10a      	bne.n	80009b4 <HAL_UART_TxCpltCallback+0x28>
        // Transmission done
        tx_in_progress = false;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <HAL_UART_TxCpltCallback+0x34>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	701a      	strb	r2, [r3, #0]

        // If more data in the output buffer, start next transmit
        if (ring_buffer_size(&output_rb) > 0) {
 80009a4:	4807      	ldr	r0, [pc, #28]	@ (80009c4 <HAL_UART_TxCpltCallback+0x38>)
 80009a6:	f000 fa83 	bl	8000eb0 <ring_buffer_size>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_UART_TxCpltCallback+0x28>
            console_start_tx();
 80009b0:	f7ff fe80 	bl	80006b4 <console_start_tx>
        }
    }
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200006a0 	.word	0x200006a0
 80009c0:	200009cc 	.word	0x200009cc
 80009c4:	200009b8 	.word	0x200009b8

080009c8 <logger_init>:
/**
 * @brief Initialize the logger.
 *
 * Sets up the ring buffer for storing logs.
 */
void logger_init(void) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
    ring_buffer_init(&log_ring_buffer, log_buffer, sizeof(log_buffer));
 80009cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009d0:	4902      	ldr	r1, [pc, #8]	@ (80009dc <logger_init+0x14>)
 80009d2:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <logger_init+0x18>)
 80009d4:	f000 fa34 	bl	8000e40 <ring_buffer_init>
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000b34 	.word	0x20000b34
 80009e0:	20000b20 	.word	0x20000b20

080009e4 <log_message>:
 * are overwritten.
 *
 * @param format The format string (like printf).
 * @param ... Additional arguments for the format string.
 */
void log_message(const char *format, ...) {
 80009e4:	b40f      	push	{r0, r1, r2, r3}
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b0a2      	sub	sp, #136	@ 0x88
 80009ea:	af00      	add	r7, sp, #0
    char temp_buffer[LOG_ENTRY_MAX_LENGTH];
    va_list args;

    // Format the message
    va_start(args, format);
 80009ec:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80009f0:	603b      	str	r3, [r7, #0]
    vsnprintf(temp_buffer, sizeof(temp_buffer), format, args);
 80009f2:	1d38      	adds	r0, r7, #4
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80009fa:	2180      	movs	r1, #128	@ 0x80
 80009fc:	f007 ff16 	bl	800882c <vsniprintf>
    va_end(args);

    // Add to the ring buffer
    size_t message_length = strlen(temp_buffer);
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fbf6 	bl	80001f4 <strlen>
 8000a08:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (message_length > 0) {
 8000a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00b      	beq.n	8000a2c <log_message+0x48>
        ring_buffer_enqueue(&log_ring_buffer, (const uint8_t *)temp_buffer, message_length);
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4807      	ldr	r0, [pc, #28]	@ (8000a3c <log_message+0x58>)
 8000a1e:	f000 fa6f 	bl	8000f00 <ring_buffer_enqueue>
        ring_buffer_enqueue(&log_ring_buffer, (const uint8_t *)"\r\n", 2); // Add newline
 8000a22:	2202      	movs	r2, #2
 8000a24:	4906      	ldr	r1, [pc, #24]	@ (8000a40 <log_message+0x5c>)
 8000a26:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <log_message+0x58>)
 8000a28:	f000 fa6a 	bl	8000f00 <ring_buffer_enqueue>
    }
}
 8000a2c:	bf00      	nop
 8000a2e:	3788      	adds	r7, #136	@ 0x88
 8000a30:	46bd      	mov	sp, r7
 8000a32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a36:	b004      	add	sp, #16
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000b20 	.word	0x20000b20
 8000a40:	08009228 	.word	0x08009228

08000a44 <cmd_log_dump>:

/**
 * @brief Dump all logs to the console.
 */
void cmd_log_dump(const char *args) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b0a4      	sub	sp, #144	@ 0x90
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
    if (ring_buffer_empty(&log_ring_buffer)) {
 8000a4c:	4817      	ldr	r0, [pc, #92]	@ (8000aac <cmd_log_dump+0x68>)
 8000a4e:	f000 fa12 	bl	8000e76 <ring_buffer_empty>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d003      	beq.n	8000a60 <cmd_log_dump+0x1c>
        console_write("Logger: No logs to display.\r\n");
 8000a58:	4815      	ldr	r0, [pc, #84]	@ (8000ab0 <cmd_log_dump+0x6c>)
 8000a5a:	f7ff fdf1 	bl	8000640 <console_write>
 8000a5e:	e021      	b.n	8000aa4 <cmd_log_dump+0x60>
        return;
    }

    console_write("Dumping logs:\r\n");
 8000a60:	4814      	ldr	r0, [pc, #80]	@ (8000ab4 <cmd_log_dump+0x70>)
 8000a62:	f7ff fded 	bl	8000640 <console_write>
    char temp_buffer[LOG_ENTRY_MAX_LENGTH];
    while (!ring_buffer_empty(&log_ring_buffer)) {
 8000a66:	e014      	b.n	8000a92 <cmd_log_dump+0x4e>
        size_t len = ring_buffer_dequeue(&log_ring_buffer, (uint8_t *)temp_buffer, sizeof(temp_buffer) - 1);
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	227f      	movs	r2, #127	@ 0x7f
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480e      	ldr	r0, [pc, #56]	@ (8000aac <cmd_log_dump+0x68>)
 8000a72:	f000 fad3 	bl	800101c <ring_buffer_dequeue>
 8000a76:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
        temp_buffer[len] = '\0'; // Null-terminate the string
 8000a7a:	f107 020c 	add.w	r2, r7, #12
 8000a7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a82:	4413      	add	r3, r2
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
        console_write(temp_buffer);
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fdd7 	bl	8000640 <console_write>
    while (!ring_buffer_empty(&log_ring_buffer)) {
 8000a92:	4806      	ldr	r0, [pc, #24]	@ (8000aac <cmd_log_dump+0x68>)
 8000a94:	f000 f9ef 	bl	8000e76 <ring_buffer_empty>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	f083 0301 	eor.w	r3, r3, #1
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d1e1      	bne.n	8000a68 <cmd_log_dump+0x24>
    }
}
 8000aa4:	3790      	adds	r7, #144	@ 0x90
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000b20 	.word	0x20000b20
 8000ab0:	0800922c 	.word	0x0800922c
 8000ab4:	0800924c 	.word	0x0800924c

08000ab8 <cmd_log_clear>:

/**
 * @brief Clear the log buffer.
 */
void cmd_log_clear(const char *args) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
    ring_buffer_init(&log_ring_buffer, log_buffer, sizeof(log_buffer));
 8000ac0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ac4:	4905      	ldr	r1, [pc, #20]	@ (8000adc <cmd_log_clear+0x24>)
 8000ac6:	4806      	ldr	r0, [pc, #24]	@ (8000ae0 <cmd_log_clear+0x28>)
 8000ac8:	f000 f9ba 	bl	8000e40 <ring_buffer_init>
    console_write("Logger: Log buffer cleared.\r\n");
 8000acc:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <cmd_log_clear+0x2c>)
 8000ace:	f7ff fdb7 	bl	8000640 <console_write>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000b34 	.word	0x20000b34
 8000ae0:	20000b20 	.word	0x20000b20
 8000ae4:	0800925c 	.word	0x0800925c

08000ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aec:	f000 fc9a 	bl	8001424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af0:	f000 f816 	bl	8000b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af4:	f000 f8da 	bl	8000cac <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000af8:	f000 f8a8 	bl	8000c4c <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000afc:	f000 f87c 	bl	8000bf8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  logger_init();
 8000b00:	f7ff ff62 	bl	80009c8 <logger_init>
  console_init(&huart2);
 8000b04:	4804      	ldr	r0, [pc, #16]	@ (8000b18 <main+0x30>)
 8000b06:	f7ff fd4b 	bl	80005a0 <console_init>
  // Register the commands we defined above
  console_register_commands(commands, sizeof(commands) / sizeof(commands[0]));
 8000b0a:	2105      	movs	r1, #5
 8000b0c:	4803      	ldr	r0, [pc, #12]	@ (8000b1c <main+0x34>)
 8000b0e:	f7ff fd81 	bl	8000614 <console_register_commands>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  console_task();
 8000b12:	f7ff fe19 	bl	8000748 <console_task>
 8000b16:	e7fc      	b.n	8000b12 <main+0x2a>
 8000b18:	20000f34 	.word	0x20000f34
 8000b1c:	0800947c 	.word	0x0800947c

08000b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b094      	sub	sp, #80	@ 0x50
 8000b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	2230      	movs	r2, #48	@ 0x30
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f007 fe8a 	bl	8008848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	4b29      	ldr	r3, [pc, #164]	@ (8000bf0 <SystemClock_Config+0xd0>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4c:	4a28      	ldr	r2, [pc, #160]	@ (8000bf0 <SystemClock_Config+0xd0>)
 8000b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b54:	4b26      	ldr	r3, [pc, #152]	@ (8000bf0 <SystemClock_Config+0xd0>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	4b23      	ldr	r3, [pc, #140]	@ (8000bf4 <SystemClock_Config+0xd4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b6c:	4a21      	ldr	r2, [pc, #132]	@ (8000bf4 <SystemClock_Config+0xd4>)
 8000b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf4 <SystemClock_Config+0xd4>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b80:	2301      	movs	r3, #1
 8000b82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b94:	2308      	movs	r3, #8
 8000b96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b98:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b9c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	f107 0320 	add.w	r3, r7, #32
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 fa4c 	bl	8003048 <HAL_RCC_OscConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bb6:	f000 f93d 	bl	8000e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bba:	230f      	movs	r3, #15
 8000bbc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 fcae 	bl	8003538 <HAL_RCC_ClockConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000be2:	f000 f927 	bl	8000e34 <Error_Handler>
  }
}
 8000be6:	bf00      	nop
 8000be8:	3750      	adds	r7, #80	@ 0x50
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40007000 	.word	0x40007000

08000bf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	@ (8000c48 <MX_USART2_UART_Init+0x50>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c02:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c30:	f002 fea2 	bl	8003978 <HAL_UART_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c3a:	f000 f8fb 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000f34 	.word	0x20000f34
 8000c48:	40004400 	.word	0x40004400

08000c4c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c50:	4b15      	ldr	r3, [pc, #84]	@ (8000ca8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c52:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000c58:	4b13      	ldr	r3, [pc, #76]	@ (8000ca8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c5a:	2204      	movs	r2, #4
 8000c5c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c60:	2202      	movs	r2, #2
 8000c62:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c64:	4b10      	ldr	r3, [pc, #64]	@ (8000ca8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000c82:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c88:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c8e:	4806      	ldr	r0, [pc, #24]	@ (8000ca8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c90:	f000 ff9f 	bl	8001bd2 <HAL_PCD_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c9a:	f000 f8cb 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */
  MX_USB_DEVICE_Init();
 8000c9e:	f007 f8f1 	bl	8007e84 <MX_USB_DEVICE_Init>
  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000f7c 	.word	0x20000f7c

08000cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	@ 0x28
 8000cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d7c <MX_GPIO_Init+0xd0>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a2c      	ldr	r2, [pc, #176]	@ (8000d7c <MX_GPIO_Init+0xd0>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d7c <MX_GPIO_Init+0xd0>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b26      	ldr	r3, [pc, #152]	@ (8000d7c <MX_GPIO_Init+0xd0>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a25      	ldr	r2, [pc, #148]	@ (8000d7c <MX_GPIO_Init+0xd0>)
 8000ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b23      	ldr	r3, [pc, #140]	@ (8000d7c <MX_GPIO_Init+0xd0>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <MX_GPIO_Init+0xd0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a1e      	ldr	r2, [pc, #120]	@ (8000d7c <MX_GPIO_Init+0xd0>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <MX_GPIO_Init+0xd0>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <MX_GPIO_Init+0xd0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	4a17      	ldr	r2, [pc, #92]	@ (8000d7c <MX_GPIO_Init+0xd0>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <MX_GPIO_Init+0xd0>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2120      	movs	r1, #32
 8000d36:	4812      	ldr	r0, [pc, #72]	@ (8000d80 <MX_GPIO_Init+0xd4>)
 8000d38:	f000 ff32 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d42:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <MX_GPIO_Init+0xd8>)
 8000d54:	f000 fda0 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d58:	2320      	movs	r3, #32
 8000d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4804      	ldr	r0, [pc, #16]	@ (8000d80 <MX_GPIO_Init+0xd4>)
 8000d70:	f000 fd92 	bl	8001898 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	@ 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000
 8000d84:	40020800 	.word	0x40020800

08000d88 <cmd_help>:

/* USER CODE BEGIN 4 */
// Example command: 'help'
static void cmd_help(const char *args)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
    (void)args;
    console_write("Available commands:\r\n");
 8000d90:	4817      	ldr	r0, [pc, #92]	@ (8000df0 <cmd_help+0x68>)
 8000d92:	f7ff fc55 	bl	8000640 <console_write>
    for (size_t i = 0; i < command_count; i++) {
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	e01f      	b.n	8000ddc <cmd_help+0x54>
        console_write(commands[i].name);
 8000d9c:	4915      	ldr	r1, [pc, #84]	@ (8000df4 <cmd_help+0x6c>)
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	4613      	mov	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4413      	add	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	440b      	add	r3, r1
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fc47 	bl	8000640 <console_write>
        console_write(": ");
 8000db2:	4811      	ldr	r0, [pc, #68]	@ (8000df8 <cmd_help+0x70>)
 8000db4:	f7ff fc44 	bl	8000640 <console_write>
        console_write(commands[i].help);
 8000db8:	490e      	ldr	r1, [pc, #56]	@ (8000df4 <cmd_help+0x6c>)
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	4413      	add	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	3308      	adds	r3, #8
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fc38 	bl	8000640 <console_write>
        console_write("\r\n");
 8000dd0:	480a      	ldr	r0, [pc, #40]	@ (8000dfc <cmd_help+0x74>)
 8000dd2:	f7ff fc35 	bl	8000640 <console_write>
    for (size_t i = 0; i < command_count; i++) {
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <cmd_help+0x78>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d3da      	bcc.n	8000d9c <cmd_help+0x14>
    }
}
 8000de6:	bf00      	nop
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	08009324 	.word	0x08009324
 8000df4:	0800947c 	.word	0x0800947c
 8000df8:	0800933c 	.word	0x0800933c
 8000dfc:	08009340 	.word	0x08009340
 8000e00:	20000000 	.word	0x20000000

08000e04 <cmd_info>:

// Example command: 'info'
static void cmd_info(const char *args)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
    (void)args;
    console_write("STM32 Console v1.0\r\n");
 8000e0c:	4806      	ldr	r0, [pc, #24]	@ (8000e28 <cmd_info+0x24>)
 8000e0e:	f7ff fc17 	bl	8000640 <console_write>
    console_write("Build date/time: " __DATE__ " " __TIME__ "\r\n");
 8000e12:	4806      	ldr	r0, [pc, #24]	@ (8000e2c <cmd_info+0x28>)
 8000e14:	f7ff fc14 	bl	8000640 <console_write>
    console_write("MCU: STM32F4xx\r\n");
 8000e18:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <cmd_info+0x2c>)
 8000e1a:	f7ff fc11 	bl	8000640 <console_write>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	08009344 	.word	0x08009344
 8000e2c:	0800935c 	.word	0x0800935c
 8000e30:	08009384 	.word	0x08009384

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <Error_Handler+0x8>

08000e40 <ring_buffer_init>:



#include "ring_buffer.h"

void ring_buffer_init(ring_buffer_t *rb, uint8_t *buf, size_t capacity) {
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
    rb->buffer = buf;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	601a      	str	r2, [r3, #0]
    rb->capacity = capacity;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	605a      	str	r2, [r3, #4]
    rb->head = 0;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
    rb->tail = 0;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
    rb->full = false;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2200      	movs	r2, #0
 8000e68:	741a      	strb	r2, [r3, #16]
}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <ring_buffer_empty>:

bool ring_buffer_empty(const ring_buffer_t *rb) {
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
    // Buffer is empty if head == tail and !full
    return (!rb->full && (rb->head == rb->tail));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	7c1b      	ldrb	r3, [r3, #16]
 8000e82:	f083 0301 	eor.w	r3, r3, #1
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d007      	beq.n	8000e9c <ring_buffer_empty+0x26>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d101      	bne.n	8000e9c <ring_buffer_empty+0x26>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e000      	b.n	8000e9e <ring_buffer_empty+0x28>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	b2db      	uxtb	r3, r3
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <ring_buffer_size>:

bool ring_buffer_full(const ring_buffer_t *rb) {
    return rb->full;
}

size_t ring_buffer_size(const ring_buffer_t *rb) {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
    if (!rb->full) {
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	7c1b      	ldrb	r3, [r3, #16]
 8000ebc:	f083 0301 	eor.w	r3, r3, #1
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d014      	beq.n	8000ef0 <ring_buffer_size+0x40>
        if (rb->tail >= rb->head) {
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d305      	bcc.n	8000ede <ring_buffer_size+0x2e>
            return (rb->tail - rb->head);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	e00a      	b.n	8000ef4 <ring_buffer_size+0x44>
        } else {
            return (rb->capacity - rb->head + rb->tail);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	1ad2      	subs	r2, r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	4413      	add	r3, r2
 8000eee:	e001      	b.n	8000ef4 <ring_buffer_size+0x44>
        }
    } else {
        return rb->capacity;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
    }
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <ring_buffer_enqueue>:

size_t ring_buffer_enqueue(ring_buffer_t *rb, const uint8_t *data, size_t len) {
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b08b      	sub	sp, #44	@ 0x2c
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
    if (len == 0) return 0;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <ring_buffer_enqueue+0x16>
 8000f12:	2300      	movs	r3, #0
 8000f14:	e07e      	b.n	8001014 <ring_buffer_enqueue+0x114>

    size_t free_space = rb->capacity - ring_buffer_size(rb);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	685c      	ldr	r4, [r3, #4]
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	f7ff ffc8 	bl	8000eb0 <ring_buffer_size>
 8000f20:	4603      	mov	r3, r0
 8000f22:	1ae3      	subs	r3, r4, r3
 8000f24:	61bb      	str	r3, [r7, #24]

    // If full, no space available
    if (free_space == 0) {
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <ring_buffer_enqueue+0x30>
        return 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e071      	b.n	8001014 <ring_buffer_enqueue+0x114>
    }

    // Number of bytes we can actually write
    if (len > free_space) {
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d901      	bls.n	8000f3c <ring_buffer_enqueue+0x3c>
        len = free_space;
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	607b      	str	r3, [r7, #4]
    }

    // Write data in two parts if it wraps around
    size_t space_to_end = rb->capacity - rb->tail;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	617b      	str	r3, [r7, #20]
    if (len > space_to_end) {
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d932      	bls.n	8000fb6 <ring_buffer_enqueue+0xb6>
        // Write till end of buffer
        for (size_t i = 0; i < space_to_end; i++) {
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f54:	e00e      	b.n	8000f74 <ring_buffer_enqueue+0x74>
            rb->buffer[rb->tail + i] = data[i];
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5a:	441a      	add	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6819      	ldr	r1, [r3, #0]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	68d8      	ldr	r0, [r3, #12]
 8000f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f66:	4403      	add	r3, r0
 8000f68:	440b      	add	r3, r1
 8000f6a:	7812      	ldrb	r2, [r2, #0]
 8000f6c:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < space_to_end; i++) {
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f70:	3301      	adds	r3, #1
 8000f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d3ec      	bcc.n	8000f56 <ring_buffer_enqueue+0x56>
        }
        // Wrap around
        size_t remaining = len - space_to_end;
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	613b      	str	r3, [r7, #16]
        for (size_t i = 0; i < remaining; i++) {
 8000f84:	2300      	movs	r3, #0
 8000f86:	623b      	str	r3, [r7, #32]
 8000f88:	e00d      	b.n	8000fa6 <ring_buffer_enqueue+0xa6>
            rb->buffer[i] = data[space_to_end + i];
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	6a3b      	ldr	r3, [r7, #32]
 8000f8e:	4413      	add	r3, r2
 8000f90:	68ba      	ldr	r2, [r7, #8]
 8000f92:	441a      	add	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	6819      	ldr	r1, [r3, #0]
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	440b      	add	r3, r1
 8000f9c:	7812      	ldrb	r2, [r2, #0]
 8000f9e:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < remaining; i++) {
 8000fa0:	6a3b      	ldr	r3, [r7, #32]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	623b      	str	r3, [r7, #32]
 8000fa6:	6a3a      	ldr	r2, [r7, #32]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d3ed      	bcc.n	8000f8a <ring_buffer_enqueue+0x8a>
        }
        rb->tail = remaining;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	e022      	b.n	8000ffc <ring_buffer_enqueue+0xfc>
    } else {
        // Fits in one go
        for (size_t i = 0; i < len; i++) {
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
 8000fba:	e00e      	b.n	8000fda <ring_buffer_enqueue+0xda>
            rb->buffer[rb->tail + i] = data[i];
 8000fbc:	68ba      	ldr	r2, [r7, #8]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	441a      	add	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6819      	ldr	r1, [r3, #0]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	68d8      	ldr	r0, [r3, #12]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	4403      	add	r3, r0
 8000fce:	440b      	add	r3, r1
 8000fd0:	7812      	ldrb	r2, [r2, #0]
 8000fd2:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < len; i++) {
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	61fb      	str	r3, [r7, #28]
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d3ec      	bcc.n	8000fbc <ring_buffer_enqueue+0xbc>
        }
        rb->tail = (rb->tail + len) % rb->capacity;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	68da      	ldr	r2, [r3, #12]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	6852      	ldr	r2, [r2, #4]
 8000fee:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ff2:	fb01 f202 	mul.w	r2, r1, r2
 8000ff6:	1a9a      	subs	r2, r3, r2
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	60da      	str	r2, [r3, #12]
    }

    // Update full flag
    rb->full = (rb->tail == rb->head);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	68da      	ldr	r2, [r3, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	429a      	cmp	r2, r3
 8001006:	bf0c      	ite	eq
 8001008:	2301      	moveq	r3, #1
 800100a:	2300      	movne	r3, #0
 800100c:	b2da      	uxtb	r2, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	741a      	strb	r2, [r3, #16]

    return len;
 8001012:	687b      	ldr	r3, [r7, #4]
}
 8001014:	4618      	mov	r0, r3
 8001016:	372c      	adds	r7, #44	@ 0x2c
 8001018:	46bd      	mov	sp, r7
 800101a:	bd90      	pop	{r4, r7, pc}

0800101c <ring_buffer_dequeue>:

size_t ring_buffer_dequeue(ring_buffer_t *rb, uint8_t *data, size_t len) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	@ 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
    if (len == 0) return 0;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <ring_buffer_dequeue+0x16>
 800102e:	2300      	movs	r3, #0
 8001030:	e072      	b.n	8001118 <ring_buffer_dequeue+0xfc>

    size_t data_available = ring_buffer_size(rb);
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f7ff ff3c 	bl	8000eb0 <ring_buffer_size>
 8001038:	61b8      	str	r0, [r7, #24]
    if (data_available == 0) {
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d101      	bne.n	8001044 <ring_buffer_dequeue+0x28>
        // Buffer empty
        return 0;
 8001040:	2300      	movs	r3, #0
 8001042:	e069      	b.n	8001118 <ring_buffer_dequeue+0xfc>
    }

    // Number of bytes we can actually read
    if (len > data_available) {
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	429a      	cmp	r2, r3
 800104a:	d901      	bls.n	8001050 <ring_buffer_dequeue+0x34>
        len = data_available;
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	607b      	str	r3, [r7, #4]
    }

    // Read data in two parts if it wraps
    size_t space_to_end = rb->capacity - rb->head;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	617b      	str	r3, [r7, #20]
    if (len > space_to_end) {
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	429a      	cmp	r2, r3
 8001062:	d932      	bls.n	80010ca <ring_buffer_dequeue+0xae>
        // Read till end of buffer
        for (size_t i = 0; i < space_to_end; i++) {
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
 8001068:	e00e      	b.n	8001088 <ring_buffer_dequeue+0x6c>
            data[i] = rb->buffer[rb->head + i];
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6899      	ldr	r1, [r3, #8]
 8001072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001074:	440b      	add	r3, r1
 8001076:	441a      	add	r2, r3
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107c:	440b      	add	r3, r1
 800107e:	7812      	ldrb	r2, [r2, #0]
 8001080:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < space_to_end; i++) {
 8001082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001084:	3301      	adds	r3, #1
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
 8001088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	429a      	cmp	r2, r3
 800108e:	d3ec      	bcc.n	800106a <ring_buffer_dequeue+0x4e>
        }
        // Wrap around
        size_t remaining = len - space_to_end;
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	613b      	str	r3, [r7, #16]
        for (size_t i = 0; i < remaining; i++) {
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
 800109c:	e00d      	b.n	80010ba <ring_buffer_dequeue+0x9e>
            data[space_to_end + i] = rb->buffer[i];
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	6a3b      	ldr	r3, [r7, #32]
 80010a4:	441a      	add	r2, r3
 80010a6:	6979      	ldr	r1, [r7, #20]
 80010a8:	6a3b      	ldr	r3, [r7, #32]
 80010aa:	440b      	add	r3, r1
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	440b      	add	r3, r1
 80010b0:	7812      	ldrb	r2, [r2, #0]
 80010b2:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < remaining; i++) {
 80010b4:	6a3b      	ldr	r3, [r7, #32]
 80010b6:	3301      	adds	r3, #1
 80010b8:	623b      	str	r3, [r7, #32]
 80010ba:	6a3a      	ldr	r2, [r7, #32]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d3ed      	bcc.n	800109e <ring_buffer_dequeue+0x82>
        }
        rb->head = remaining;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	e022      	b.n	8001110 <ring_buffer_dequeue+0xf4>
    } else {
        // Fits in one go
        for (size_t i = 0; i < len; i++) {
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
 80010ce:	e00e      	b.n	80010ee <ring_buffer_dequeue+0xd2>
            data[i] = rb->buffer[rb->head + i];
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6899      	ldr	r1, [r3, #8]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	440b      	add	r3, r1
 80010dc:	441a      	add	r2, r3
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	440b      	add	r3, r1
 80010e4:	7812      	ldrb	r2, [r2, #0]
 80010e6:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < len; i++) {
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	3301      	adds	r3, #1
 80010ec:	61fb      	str	r3, [r7, #28]
 80010ee:	69fa      	ldr	r2, [r7, #28]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3ec      	bcc.n	80010d0 <ring_buffer_dequeue+0xb4>
        }
        rb->head = (rb->head + len) % rb->capacity;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	6852      	ldr	r2, [r2, #4]
 8001102:	fbb3 f1f2 	udiv	r1, r3, r2
 8001106:	fb01 f202 	mul.w	r2, r1, r2
 800110a:	1a9a      	subs	r2, r3, r2
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	609a      	str	r2, [r3, #8]
    }

    rb->full = false; // Once we read, buffer cannot be full
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2200      	movs	r2, #0
 8001114:	741a      	strb	r2, [r3, #16]

    return len;
 8001116:	687b      	ldr	r3, [r7, #4]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3728      	adds	r7, #40	@ 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	4b10      	ldr	r3, [pc, #64]	@ (800116c <HAL_MspInit+0x4c>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112e:	4a0f      	ldr	r2, [pc, #60]	@ (800116c <HAL_MspInit+0x4c>)
 8001130:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001134:	6453      	str	r3, [r2, #68]	@ 0x44
 8001136:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <HAL_MspInit+0x4c>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	4b09      	ldr	r3, [pc, #36]	@ (800116c <HAL_MspInit+0x4c>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	4a08      	ldr	r2, [pc, #32]	@ (800116c <HAL_MspInit+0x4c>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001150:	6413      	str	r3, [r2, #64]	@ 0x40
 8001152:	4b06      	ldr	r3, [pc, #24]	@ (800116c <HAL_MspInit+0x4c>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800115e:	2005      	movs	r0, #5
 8001160:	f000 fac6 	bl	80016f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40023800 	.word	0x40023800

08001170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	@ 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a1d      	ldr	r2, [pc, #116]	@ (8001204 <HAL_UART_MspInit+0x94>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d133      	bne.n	80011fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <HAL_UART_MspInit+0x98>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119a:	4a1b      	ldr	r2, [pc, #108]	@ (8001208 <HAL_UART_MspInit+0x98>)
 800119c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a2:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <HAL_UART_MspInit+0x98>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <HAL_UART_MspInit+0x98>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	4a14      	ldr	r2, [pc, #80]	@ (8001208 <HAL_UART_MspInit+0x98>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011be:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <HAL_UART_MspInit+0x98>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011ca:	230c      	movs	r3, #12
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011da:	2307      	movs	r3, #7
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	4809      	ldr	r0, [pc, #36]	@ (800120c <HAL_UART_MspInit+0x9c>)
 80011e6:	f000 fb57 	bl	8001898 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2102      	movs	r1, #2
 80011ee:	2026      	movs	r0, #38	@ 0x26
 80011f0:	f000 fa89 	bl	8001706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011f4:	2026      	movs	r0, #38	@ 0x26
 80011f6:	f000 faa2 	bl	800173e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	@ 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40004400 	.word	0x40004400
 8001208:	40023800 	.word	0x40023800
 800120c:	40020000 	.word	0x40020000

08001210 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	@ 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001230:	d13a      	bne.n	80012a8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b1e      	ldr	r3, [pc, #120]	@ (80012b0 <HAL_PCD_MspInit+0xa0>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a1d      	ldr	r2, [pc, #116]	@ (80012b0 <HAL_PCD_MspInit+0xa0>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b1b      	ldr	r3, [pc, #108]	@ (80012b0 <HAL_PCD_MspInit+0xa0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800124e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001260:	230a      	movs	r3, #10
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	4812      	ldr	r0, [pc, #72]	@ (80012b4 <HAL_PCD_MspInit+0xa4>)
 800126c:	f000 fb14 	bl	8001898 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001270:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <HAL_PCD_MspInit+0xa0>)
 8001272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001274:	4a0e      	ldr	r2, [pc, #56]	@ (80012b0 <HAL_PCD_MspInit+0xa0>)
 8001276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800127a:	6353      	str	r3, [r2, #52]	@ 0x34
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <HAL_PCD_MspInit+0xa0>)
 8001282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001284:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <HAL_PCD_MspInit+0xa0>)
 8001286:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800128a:	6453      	str	r3, [r2, #68]	@ 0x44
 800128c:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <HAL_PCD_MspInit+0xa0>)
 800128e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001290:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	2100      	movs	r1, #0
 800129c:	2043      	movs	r0, #67	@ 0x43
 800129e:	f000 fa32 	bl	8001706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80012a2:	2043      	movs	r0, #67	@ 0x43
 80012a4:	f000 fa4b 	bl	800173e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	@ 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020000 	.word	0x40020000

080012b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <NMI_Handler+0x4>

080012c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <HardFault_Handler+0x4>

080012c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <MemManage_Handler+0x4>

080012d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <BusFault_Handler+0x4>

080012d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <UsageFault_Handler+0x4>

080012e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130e:	f000 f8db 	bl	80014c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800131c:	4802      	ldr	r0, [pc, #8]	@ (8001328 <USART2_IRQHandler+0x10>)
 800131e:	f002 fc61 	bl	8003be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000f34 	.word	0x20000f34

0800132c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001330:	4802      	ldr	r0, [pc, #8]	@ (800133c <OTG_FS_IRQHandler+0x10>)
 8001332:	f000 fd92 	bl	8001e5a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000f7c 	.word	0x20000f7c

08001340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001348:	4a14      	ldr	r2, [pc, #80]	@ (800139c <_sbrk+0x5c>)
 800134a:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <_sbrk+0x60>)
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001354:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <_sbrk+0x64>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d102      	bne.n	8001362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800135c:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <_sbrk+0x64>)
 800135e:	4a12      	ldr	r2, [pc, #72]	@ (80013a8 <_sbrk+0x68>)
 8001360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001362:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <_sbrk+0x64>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	429a      	cmp	r2, r3
 800136e:	d207      	bcs.n	8001380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001370:	f007 faa0 	bl	80088b4 <__errno>
 8001374:	4603      	mov	r3, r0
 8001376:	220c      	movs	r2, #12
 8001378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
 800137e:	e009      	b.n	8001394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001380:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001386:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	4a05      	ldr	r2, [pc, #20]	@ (80013a4 <_sbrk+0x64>)
 8001390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20018000 	.word	0x20018000
 80013a0:	00000400 	.word	0x00000400
 80013a4:	20001460 	.word	0x20001460
 80013a8:	20001b00 	.word	0x20001b00

080013ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <SystemInit+0x20>)
 80013b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013b6:	4a05      	ldr	r2, [pc, #20]	@ (80013cc <SystemInit+0x20>)
 80013b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001408 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013d4:	f7ff ffea 	bl	80013ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d8:	480c      	ldr	r0, [pc, #48]	@ (800140c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013da:	490d      	ldr	r1, [pc, #52]	@ (8001410 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001414 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e0:	e002      	b.n	80013e8 <LoopCopyDataInit>

080013e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e6:	3304      	adds	r3, #4

080013e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ec:	d3f9      	bcc.n	80013e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013f0:	4c0a      	ldr	r4, [pc, #40]	@ (800141c <LoopFillZerobss+0x22>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f4:	e001      	b.n	80013fa <LoopFillZerobss>

080013f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f8:	3204      	adds	r2, #4

080013fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013fc:	d3fb      	bcc.n	80013f6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80013fe:	f007 fa5f 	bl	80088c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001402:	f7ff fb71 	bl	8000ae8 <main>
  bx  lr    
 8001406:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001408:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800140c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001410:	20000684 	.word	0x20000684
  ldr r2, =_sidata
 8001414:	08009514 	.word	0x08009514
  ldr r2, =_sbss
 8001418:	20000684 	.word	0x20000684
  ldr r4, =_ebss
 800141c:	20001b00 	.word	0x20001b00

08001420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <ADC_IRQHandler>
	...

08001424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001428:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <HAL_Init+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0d      	ldr	r2, [pc, #52]	@ (8001464 <HAL_Init+0x40>)
 800142e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001432:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001434:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <HAL_Init+0x40>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <HAL_Init+0x40>)
 800143a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800143e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001440:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <HAL_Init+0x40>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a07      	ldr	r2, [pc, #28]	@ (8001464 <HAL_Init+0x40>)
 8001446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800144a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144c:	2003      	movs	r0, #3
 800144e:	f000 f94f 	bl	80016f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001452:	2000      	movs	r0, #0
 8001454:	f000 f808 	bl	8001468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001458:	f7ff fe62 	bl	8001120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40023c00 	.word	0x40023c00

08001468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001470:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <HAL_InitTick+0x54>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <HAL_InitTick+0x58>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800147e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001482:	fbb2 f3f3 	udiv	r3, r2, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f967 	bl	800175a <HAL_SYSTICK_Config>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e00e      	b.n	80014b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b0f      	cmp	r3, #15
 800149a:	d80a      	bhi.n	80014b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149c:	2200      	movs	r2, #0
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f000 f92f 	bl	8001706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a8:	4a06      	ldr	r2, [pc, #24]	@ (80014c4 <HAL_InitTick+0x5c>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e000      	b.n	80014b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000004 	.word	0x20000004
 80014c0:	2000000c 	.word	0x2000000c
 80014c4:	20000008 	.word	0x20000008

080014c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_IncTick+0x20>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_IncTick+0x24>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a04      	ldr	r2, [pc, #16]	@ (80014ec <HAL_IncTick+0x24>)
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	2000000c 	.word	0x2000000c
 80014ec:	20001464 	.word	0x20001464

080014f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;
 80014f4:	4b03      	ldr	r3, [pc, #12]	@ (8001504 <HAL_GetTick+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20001464 	.word	0x20001464

08001508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001510:	f7ff ffee 	bl	80014f0 <HAL_GetTick>
 8001514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001520:	d005      	beq.n	800152e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001522:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <HAL_Delay+0x44>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4413      	add	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800152e:	bf00      	nop
 8001530:	f7ff ffde 	bl	80014f0 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	429a      	cmp	r2, r3
 800153e:	d8f7      	bhi.n	8001530 <HAL_Delay+0x28>
  {
  }
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000000c 	.word	0x2000000c

08001550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <__NVIC_SetPriorityGrouping+0x44>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800156c:	4013      	ands	r3, r2
 800156e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001578:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800157c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001582:	4a04      	ldr	r2, [pc, #16]	@ (8001594 <__NVIC_SetPriorityGrouping+0x44>)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	60d3      	str	r3, [r2, #12]
}
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800159c:	4b04      	ldr	r3, [pc, #16]	@ (80015b0 <__NVIC_GetPriorityGrouping+0x18>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	0a1b      	lsrs	r3, r3, #8
 80015a2:	f003 0307 	and.w	r3, r3, #7
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	db0b      	blt.n	80015de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	f003 021f 	and.w	r2, r3, #31
 80015cc:	4907      	ldr	r1, [pc, #28]	@ (80015ec <__NVIC_EnableIRQ+0x38>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	095b      	lsrs	r3, r3, #5
 80015d4:	2001      	movs	r0, #1
 80015d6:	fa00 f202 	lsl.w	r2, r0, r2
 80015da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000e100 	.word	0xe000e100

080015f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	2b00      	cmp	r3, #0
 8001602:	db0a      	blt.n	800161a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	490c      	ldr	r1, [pc, #48]	@ (800163c <__NVIC_SetPriority+0x4c>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	0112      	lsls	r2, r2, #4
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	440b      	add	r3, r1
 8001614:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001618:	e00a      	b.n	8001630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4908      	ldr	r1, [pc, #32]	@ (8001640 <__NVIC_SetPriority+0x50>)
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	3b04      	subs	r3, #4
 8001628:	0112      	lsls	r2, r2, #4
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	440b      	add	r3, r1
 800162e:	761a      	strb	r2, [r3, #24]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000e100 	.word	0xe000e100
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001644:	b480      	push	{r7}
 8001646:	b089      	sub	sp, #36	@ 0x24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f1c3 0307 	rsb	r3, r3, #7
 800165e:	2b04      	cmp	r3, #4
 8001660:	bf28      	it	cs
 8001662:	2304      	movcs	r3, #4
 8001664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3304      	adds	r3, #4
 800166a:	2b06      	cmp	r3, #6
 800166c:	d902      	bls.n	8001674 <NVIC_EncodePriority+0x30>
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3b03      	subs	r3, #3
 8001672:	e000      	b.n	8001676 <NVIC_EncodePriority+0x32>
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	f04f 32ff 	mov.w	r2, #4294967295
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43da      	mvns	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	401a      	ands	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800168c:	f04f 31ff 	mov.w	r1, #4294967295
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	43d9      	mvns	r1, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	4313      	orrs	r3, r2
         );
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3724      	adds	r7, #36	@ 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016bc:	d301      	bcc.n	80016c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016be:	2301      	movs	r3, #1
 80016c0:	e00f      	b.n	80016e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c2:	4a0a      	ldr	r2, [pc, #40]	@ (80016ec <SysTick_Config+0x40>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ca:	210f      	movs	r1, #15
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	f7ff ff8e 	bl	80015f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d4:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <SysTick_Config+0x40>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016da:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <SysTick_Config+0x40>)
 80016dc:	2207      	movs	r2, #7
 80016de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	e000e010 	.word	0xe000e010

080016f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ff29 	bl	8001550 <__NVIC_SetPriorityGrouping>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001718:	f7ff ff3e 	bl	8001598 <__NVIC_GetPriorityGrouping>
 800171c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	6978      	ldr	r0, [r7, #20]
 8001724:	f7ff ff8e 	bl	8001644 <NVIC_EncodePriority>
 8001728:	4602      	mov	r2, r0
 800172a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff5d 	bl	80015f0 <__NVIC_SetPriority>
}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff31 	bl	80015b4 <__NVIC_EnableIRQ>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ffa2 	bl	80016ac <SysTick_Config>
 8001768:	4603      	mov	r3, r0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b084      	sub	sp, #16
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001780:	f7ff feb6 	bl	80014f0 <HAL_GetTick>
 8001784:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d008      	beq.n	80017a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2280      	movs	r2, #128	@ 0x80
 8001796:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e052      	b.n	800184a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0216 	bic.w	r2, r2, #22
 80017b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	695a      	ldr	r2, [r3, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d103      	bne.n	80017d4 <HAL_DMA_Abort+0x62>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d007      	beq.n	80017e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0208 	bic.w	r2, r2, #8
 80017e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017f4:	e013      	b.n	800181e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017f6:	f7ff fe7b 	bl	80014f0 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b05      	cmp	r3, #5
 8001802:	d90c      	bls.n	800181e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2220      	movs	r2, #32
 8001808:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2203      	movs	r2, #3
 800180e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e015      	b.n	800184a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1e4      	bne.n	80017f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001830:	223f      	movs	r2, #63	@ 0x3f
 8001832:	409a      	lsls	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d004      	beq.n	8001870 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2280      	movs	r2, #128	@ 0x80
 800186a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e00c      	b.n	800188a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2205      	movs	r2, #5
 8001874:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0201 	bic.w	r2, r2, #1
 8001886:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	@ 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
 80018b2:	e159      	b.n	8001b68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018b4:	2201      	movs	r2, #1
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	f040 8148 	bne.w	8001b62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d005      	beq.n	80018ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d130      	bne.n	800194c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	2203      	movs	r2, #3
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001920:	2201      	movs	r2, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 0201 	and.w	r2, r3, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b03      	cmp	r3, #3
 8001956:	d017      	beq.n	8001988 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	2203      	movs	r2, #3
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d123      	bne.n	80019dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	08da      	lsrs	r2, r3, #3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3208      	adds	r2, #8
 800199c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	220f      	movs	r2, #15
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	691a      	ldr	r2, [r3, #16]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	08da      	lsrs	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3208      	adds	r2, #8
 80019d6:	69b9      	ldr	r1, [r7, #24]
 80019d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	2203      	movs	r2, #3
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0203 	and.w	r2, r3, #3
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80a2 	beq.w	8001b62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b57      	ldr	r3, [pc, #348]	@ (8001b80 <HAL_GPIO_Init+0x2e8>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a26:	4a56      	ldr	r2, [pc, #344]	@ (8001b80 <HAL_GPIO_Init+0x2e8>)
 8001a28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a2e:	4b54      	ldr	r3, [pc, #336]	@ (8001b80 <HAL_GPIO_Init+0x2e8>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a3a:	4a52      	ldr	r2, [pc, #328]	@ (8001b84 <HAL_GPIO_Init+0x2ec>)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	220f      	movs	r2, #15
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a49      	ldr	r2, [pc, #292]	@ (8001b88 <HAL_GPIO_Init+0x2f0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d019      	beq.n	8001a9a <HAL_GPIO_Init+0x202>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a48      	ldr	r2, [pc, #288]	@ (8001b8c <HAL_GPIO_Init+0x2f4>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d013      	beq.n	8001a96 <HAL_GPIO_Init+0x1fe>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a47      	ldr	r2, [pc, #284]	@ (8001b90 <HAL_GPIO_Init+0x2f8>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00d      	beq.n	8001a92 <HAL_GPIO_Init+0x1fa>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a46      	ldr	r2, [pc, #280]	@ (8001b94 <HAL_GPIO_Init+0x2fc>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d007      	beq.n	8001a8e <HAL_GPIO_Init+0x1f6>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a45      	ldr	r2, [pc, #276]	@ (8001b98 <HAL_GPIO_Init+0x300>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d101      	bne.n	8001a8a <HAL_GPIO_Init+0x1f2>
 8001a86:	2304      	movs	r3, #4
 8001a88:	e008      	b.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a8a:	2307      	movs	r3, #7
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e004      	b.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e002      	b.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	f002 0203 	and.w	r2, r2, #3
 8001aa2:	0092      	lsls	r2, r2, #2
 8001aa4:	4093      	lsls	r3, r2
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aac:	4935      	ldr	r1, [pc, #212]	@ (8001b84 <HAL_GPIO_Init+0x2ec>)
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aba:	4b38      	ldr	r3, [pc, #224]	@ (8001b9c <HAL_GPIO_Init+0x304>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ade:	4a2f      	ldr	r2, [pc, #188]	@ (8001b9c <HAL_GPIO_Init+0x304>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b9c <HAL_GPIO_Init+0x304>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b08:	4a24      	ldr	r2, [pc, #144]	@ (8001b9c <HAL_GPIO_Init+0x304>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b0e:	4b23      	ldr	r3, [pc, #140]	@ (8001b9c <HAL_GPIO_Init+0x304>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b32:	4a1a      	ldr	r2, [pc, #104]	@ (8001b9c <HAL_GPIO_Init+0x304>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b38:	4b18      	ldr	r3, [pc, #96]	@ (8001b9c <HAL_GPIO_Init+0x304>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b5c:	4a0f      	ldr	r2, [pc, #60]	@ (8001b9c <HAL_GPIO_Init+0x304>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3301      	adds	r3, #1
 8001b66:	61fb      	str	r3, [r7, #28]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	2b0f      	cmp	r3, #15
 8001b6c:	f67f aea2 	bls.w	80018b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3724      	adds	r7, #36	@ 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40013800 	.word	0x40013800
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	40020400 	.word	0x40020400
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020c00 	.word	0x40020c00
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40013c00 	.word	0x40013c00

08001ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
 8001bac:	4613      	mov	r3, r2
 8001bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb0:	787b      	ldrb	r3, [r7, #1]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bbc:	e003      	b.n	8001bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bbe:	887b      	ldrh	r3, [r7, #2]
 8001bc0:	041a      	lsls	r2, r3, #16
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	619a      	str	r2, [r3, #24]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af02      	add	r7, sp, #8
 8001bd8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e101      	b.n	8001de8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d106      	bne.n	8001c04 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff fb06 	bl	8001210 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2203      	movs	r2, #3
 8001c08:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c12:	d102      	bne.n	8001c1a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f003 f843 	bl	8004caa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7c1a      	ldrb	r2, [r3, #16]
 8001c2c:	f88d 2000 	strb.w	r2, [sp]
 8001c30:	3304      	adds	r3, #4
 8001c32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c34:	f002 ff22 	bl	8004a7c <USB_CoreInit>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d005      	beq.n	8001c4a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2202      	movs	r2, #2
 8001c42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e0ce      	b.n	8001de8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f003 f83b 	bl	8004ccc <USB_SetCurrentMode>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0bf      	b.n	8001de8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]
 8001c6c:	e04a      	b.n	8001d04 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c6e:	7bfa      	ldrb	r2, [r7, #15]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	3315      	adds	r3, #21
 8001c7e:	2201      	movs	r2, #1
 8001c80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c82:	7bfa      	ldrb	r2, [r7, #15]
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	3314      	adds	r3, #20
 8001c92:	7bfa      	ldrb	r2, [r7, #15]
 8001c94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	b298      	uxth	r0, r3
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	332e      	adds	r3, #46	@ 0x2e
 8001caa:	4602      	mov	r2, r0
 8001cac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cae:	7bfa      	ldrb	r2, [r7, #15]
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	440b      	add	r3, r1
 8001cbc:	3318      	adds	r3, #24
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4413      	add	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	331c      	adds	r3, #28
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cd6:	7bfa      	ldrb	r2, [r7, #15]
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	3320      	adds	r3, #32
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cea:	7bfa      	ldrb	r2, [r7, #15]
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3324      	adds	r3, #36	@ 0x24
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	3301      	adds	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	791b      	ldrb	r3, [r3, #4]
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d3af      	bcc.n	8001c6e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]
 8001d12:	e044      	b.n	8001d9e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d14:	7bfa      	ldrb	r2, [r7, #15]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001d3c:	7bfa      	ldrb	r2, [r7, #15]
 8001d3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d40:	7bfa      	ldrb	r2, [r7, #15]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d56:	7bfa      	ldrb	r2, [r7, #15]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	73fb      	strb	r3, [r7, #15]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	791b      	ldrb	r3, [r3, #4]
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d3b5      	bcc.n	8001d14 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	7c1a      	ldrb	r2, [r3, #16]
 8001db0:	f88d 2000 	strb.w	r2, [sp]
 8001db4:	3304      	adds	r3, #4
 8001db6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db8:	f002 ffd4 	bl	8004d64 <USB_DevInit>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00c      	b.n	8001de8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f004 f81e 	bl	8005e22 <USB_DevDisconnect>

  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_PCD_Start+0x1c>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e022      	b.n	8001e52 <HAL_PCD_Start+0x62>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d009      	beq.n	8001e34 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e2c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f002 ff25 	bl	8004c88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 ffcc 	bl	8005de0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e5a:	b590      	push	{r4, r7, lr}
 8001e5c:	b08d      	sub	sp, #52	@ 0x34
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f004 f88a 	bl	8005f8a <USB_GetMode>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f040 848c 	bne.w	8002796 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f003 ffee 	bl	8005e64 <USB_ReadInterrupts>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8482 	beq.w	8002794 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f003 ffdb 	bl	8005e64 <USB_ReadInterrupts>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d107      	bne.n	8001ec8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f002 0202 	and.w	r2, r2, #2
 8001ec6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f003 ffc9 	bl	8005e64 <USB_ReadInterrupts>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b10      	cmp	r3, #16
 8001eda:	d161      	bne.n	8001fa0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699a      	ldr	r2, [r3, #24]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0210 	bic.w	r2, r2, #16
 8001eea:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	f003 020f 	and.w	r2, r3, #15
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	4413      	add	r3, r2
 8001f08:	3304      	adds	r3, #4
 8001f0a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	0c5b      	lsrs	r3, r3, #17
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d124      	bne.n	8001f62 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d035      	beq.n	8001f90 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	6a38      	ldr	r0, [r7, #32]
 8001f38:	f003 fe00 	bl	8005b3c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f48:	441a      	add	r2, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f5a:	441a      	add	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	615a      	str	r2, [r3, #20]
 8001f60:	e016      	b.n	8001f90 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	0c5b      	lsrs	r3, r3, #17
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	d110      	bne.n	8001f90 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f74:	2208      	movs	r2, #8
 8001f76:	4619      	mov	r1, r3
 8001f78:	6a38      	ldr	r0, [r7, #32]
 8001f7a:	f003 fddf 	bl	8005b3c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	695a      	ldr	r2, [r3, #20]
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f8a:	441a      	add	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699a      	ldr	r2, [r3, #24]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0210 	orr.w	r2, r2, #16
 8001f9e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f003 ff5d 	bl	8005e64 <USB_ReadInterrupts>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fb0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001fb4:	f040 80a7 	bne.w	8002106 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f003 ff62 	bl	8005e8a <USB_ReadDevAllOutEpInterrupt>
 8001fc6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001fc8:	e099      	b.n	80020fe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 808e 	beq.w	80020f2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 ff86 	bl	8005ef2 <USB_ReadDevOutEPInterrupt>
 8001fe6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00c      	beq.n	800200c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ffe:	461a      	mov	r2, r3
 8002000:	2301      	movs	r3, #1
 8002002:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002004:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 fe8c 	bl	8002d24 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00c      	beq.n	8002030 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	4413      	add	r3, r2
 800201e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002022:	461a      	mov	r2, r3
 8002024:	2308      	movs	r3, #8
 8002026:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002028:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 ff62 	bl	8002ef4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b00      	cmp	r3, #0
 8002038:	d008      	beq.n	800204c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800203a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	4413      	add	r3, r2
 8002042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002046:	461a      	mov	r2, r3
 8002048:	2310      	movs	r3, #16
 800204a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d030      	beq.n	80020b8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800205e:	2b80      	cmp	r3, #128	@ 0x80
 8002060:	d109      	bne.n	8002076 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002070:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002074:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	4413      	add	r3, r2
 8002088:	3304      	adds	r3, #4
 800208a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	78db      	ldrb	r3, [r3, #3]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d108      	bne.n	80020a6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2200      	movs	r2, #0
 8002098:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800209a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209c:	b2db      	uxtb	r3, r3
 800209e:	4619      	mov	r1, r3
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f006 f99b 	bl	80083dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80020a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020b2:	461a      	mov	r2, r3
 80020b4:	2302      	movs	r3, #2
 80020b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d008      	beq.n	80020d4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020ce:	461a      	mov	r2, r3
 80020d0:	2320      	movs	r3, #32
 80020d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020ea:	461a      	mov	r2, r3
 80020ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020f0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	3301      	adds	r3, #1
 80020f6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80020f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020fa:	085b      	lsrs	r3, r3, #1
 80020fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80020fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002100:	2b00      	cmp	r3, #0
 8002102:	f47f af62 	bne.w	8001fca <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f003 feaa 	bl	8005e64 <USB_ReadInterrupts>
 8002110:	4603      	mov	r3, r0
 8002112:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002116:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800211a:	f040 80db 	bne.w	80022d4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f003 fecb 	bl	8005ebe <USB_ReadDevAllInEpInterrupt>
 8002128:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800212e:	e0cd      	b.n	80022cc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80c2 	beq.w	80022c0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	4611      	mov	r1, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f003 fef1 	bl	8005f2e <USB_ReadDevInEPInterrupt>
 800214c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d057      	beq.n	8002208 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	2201      	movs	r2, #1
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800216c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	43db      	mvns	r3, r3
 8002172:	69f9      	ldr	r1, [r7, #28]
 8002174:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002178:	4013      	ands	r3, r2
 800217a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800217c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	4413      	add	r3, r2
 8002184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002188:	461a      	mov	r2, r3
 800218a:	2301      	movs	r3, #1
 800218c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	799b      	ldrb	r3, [r3, #6]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d132      	bne.n	80021fc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	3320      	adds	r3, #32
 80021a6:	6819      	ldr	r1, [r3, #0]
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4403      	add	r3, r0
 80021b6:	331c      	adds	r3, #28
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4419      	add	r1, r3
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4403      	add	r3, r0
 80021ca:	3320      	adds	r3, #32
 80021cc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d113      	bne.n	80021fc <HAL_PCD_IRQHandler+0x3a2>
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	3324      	adds	r3, #36	@ 0x24
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d108      	bne.n	80021fc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021f4:	461a      	mov	r2, r3
 80021f6:	2101      	movs	r1, #1
 80021f8:	f003 fef8 	bl	8005fec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80021fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	4619      	mov	r1, r3
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f006 f866 	bl	80082d4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d008      	beq.n	8002224 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	4413      	add	r3, r2
 800221a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800221e:	461a      	mov	r2, r3
 8002220:	2308      	movs	r3, #8
 8002222:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	2b00      	cmp	r3, #0
 800222c:	d008      	beq.n	8002240 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800223a:	461a      	mov	r2, r3
 800223c:	2310      	movs	r3, #16
 800223e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d008      	beq.n	800225c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	4413      	add	r3, r2
 8002252:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002256:	461a      	mov	r2, r3
 8002258:	2340      	movs	r3, #64	@ 0x40
 800225a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d023      	beq.n	80022ae <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002266:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002268:	6a38      	ldr	r0, [r7, #32]
 800226a:	f002 fedf 	bl	800502c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800226e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4413      	add	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	3310      	adds	r3, #16
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	3304      	adds	r3, #4
 8002280:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	78db      	ldrb	r3, [r3, #3]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d108      	bne.n	800229c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2200      	movs	r2, #0
 800228e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002292:	b2db      	uxtb	r3, r3
 8002294:	4619      	mov	r1, r3
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f006 f8b2 	bl	8008400 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022a8:	461a      	mov	r2, r3
 80022aa:	2302      	movs	r3, #2
 80022ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 fca5 	bl	8002c0a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c2:	3301      	adds	r3, #1
 80022c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80022c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c8:	085b      	lsrs	r3, r3, #1
 80022ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80022cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f47f af2e 	bne.w	8002130 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f003 fdc3 	bl	8005e64 <USB_ReadInterrupts>
 80022de:	4603      	mov	r3, r0
 80022e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80022e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022e8:	d122      	bne.n	8002330 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022f8:	f023 0301 	bic.w	r3, r3, #1
 80022fc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002304:	2b01      	cmp	r3, #1
 8002306:	d108      	bne.n	800231a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002310:	2100      	movs	r1, #0
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fe8c 	bl	8003030 <HAL_PCDEx_LPM_Callback>
 8002318:	e002      	b.n	8002320 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f006 f850 	bl	80083c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800232e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f003 fd95 	bl	8005e64 <USB_ReadInterrupts>
 800233a:	4603      	mov	r3, r0
 800233c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002340:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002344:	d112      	bne.n	800236c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b01      	cmp	r3, #1
 8002354:	d102      	bne.n	800235c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f006 f80c 	bl	8008374 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800236a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f003 fd77 	bl	8005e64 <USB_ReadInterrupts>
 8002376:	4603      	mov	r3, r0
 8002378:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800237c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002380:	f040 80b7 	bne.w	80024f2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002392:	f023 0301 	bic.w	r3, r3, #1
 8002396:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2110      	movs	r1, #16
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 fe44 	bl	800502c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a4:	2300      	movs	r3, #0
 80023a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023a8:	e046      	b.n	8002438 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80023aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023b6:	461a      	mov	r2, r3
 80023b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80023bc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023ce:	0151      	lsls	r1, r2, #5
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	440a      	add	r2, r1
 80023d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80023d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80023dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80023de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ea:	461a      	mov	r2, r3
 80023ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80023f0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80023f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002402:	0151      	lsls	r1, r2, #5
 8002404:	69fa      	ldr	r2, [r7, #28]
 8002406:	440a      	add	r2, r1
 8002408:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800240c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002410:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	4413      	add	r3, r2
 800241a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002422:	0151      	lsls	r1, r2, #5
 8002424:	69fa      	ldr	r2, [r7, #28]
 8002426:	440a      	add	r2, r1
 8002428:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800242c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002430:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002434:	3301      	adds	r3, #1
 8002436:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	791b      	ldrb	r3, [r3, #4]
 800243c:	461a      	mov	r2, r3
 800243e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002440:	4293      	cmp	r3, r2
 8002442:	d3b2      	bcc.n	80023aa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002452:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002456:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7bdb      	ldrb	r3, [r3, #15]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d016      	beq.n	800248e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002466:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002470:	f043 030b 	orr.w	r3, r3, #11
 8002474:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800247e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002480:	69fa      	ldr	r2, [r7, #28]
 8002482:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002486:	f043 030b 	orr.w	r3, r3, #11
 800248a:	6453      	str	r3, [r2, #68]	@ 0x44
 800248c:	e015      	b.n	80024ba <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800249c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024a0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80024a4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024b4:	f043 030b 	orr.w	r3, r3, #11
 80024b8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024c8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80024cc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024dc:	461a      	mov	r2, r3
 80024de:	f003 fd85 	bl	8005fec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80024f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 fcb4 	bl	8005e64 <USB_ReadInterrupts>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002506:	d123      	bne.n	8002550 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f003 fd4a 	bl	8005fa6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f002 fe01 	bl	800511e <USB_GetDevSpeed>
 800251c:	4603      	mov	r3, r0
 800251e:	461a      	mov	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681c      	ldr	r4, [r3, #0]
 8002528:	f001 f9f2 	bl	8003910 <HAL_RCC_GetHCLKFreq>
 800252c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002532:	461a      	mov	r2, r3
 8002534:	4620      	mov	r0, r4
 8002536:	f002 fb05 	bl	8004b44 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f005 fef2 	bl	8008324 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695a      	ldr	r2, [r3, #20]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800254e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f003 fc85 	bl	8005e64 <USB_ReadInterrupts>
 800255a:	4603      	mov	r3, r0
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b08      	cmp	r3, #8
 8002562:	d10a      	bne.n	800257a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f005 fecf 	bl	8008308 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f002 0208 	and.w	r2, r2, #8
 8002578:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f003 fc70 	bl	8005e64 <USB_ReadInterrupts>
 8002584:	4603      	mov	r3, r0
 8002586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800258a:	2b80      	cmp	r3, #128	@ 0x80
 800258c:	d123      	bne.n	80025d6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800259a:	2301      	movs	r3, #1
 800259c:	627b      	str	r3, [r7, #36]	@ 0x24
 800259e:	e014      	b.n	80025ca <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d105      	bne.n	80025c4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80025b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	4619      	mov	r1, r3
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 faf2 	bl	8002ba8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	3301      	adds	r3, #1
 80025c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	791b      	ldrb	r3, [r3, #4]
 80025ce:	461a      	mov	r2, r3
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d3e4      	bcc.n	80025a0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f003 fc42 	bl	8005e64 <USB_ReadInterrupts>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025ea:	d13c      	bne.n	8002666 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025ec:	2301      	movs	r3, #1
 80025ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80025f0:	e02b      	b.n	800264a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	3318      	adds	r3, #24
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d115      	bne.n	8002644 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002618:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800261a:	2b00      	cmp	r3, #0
 800261c:	da12      	bge.n	8002644 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	3317      	adds	r3, #23
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	b2db      	uxtb	r3, r3
 8002636:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800263a:	b2db      	uxtb	r3, r3
 800263c:	4619      	mov	r1, r3
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fab2 	bl	8002ba8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	3301      	adds	r3, #1
 8002648:	627b      	str	r3, [r7, #36]	@ 0x24
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	791b      	ldrb	r3, [r3, #4]
 800264e:	461a      	mov	r2, r3
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	4293      	cmp	r3, r2
 8002654:	d3cd      	bcc.n	80025f2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002664:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f003 fbfa 	bl	8005e64 <USB_ReadInterrupts>
 8002670:	4603      	mov	r3, r0
 8002672:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002676:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800267a:	d156      	bne.n	800272a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800267c:	2301      	movs	r3, #1
 800267e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002680:	e045      	b.n	800270e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	4413      	add	r3, r2
 800268a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002696:	4613      	mov	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d12e      	bne.n	8002708 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026aa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	da2b      	bge.n	8002708 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80026bc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d121      	bne.n	8002708 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10a      	bne.n	8002708 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	69fa      	ldr	r2, [r7, #28]
 80026fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002700:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002704:	6053      	str	r3, [r2, #4]
            break;
 8002706:	e008      	b.n	800271a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270a:	3301      	adds	r3, #1
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	791b      	ldrb	r3, [r3, #4]
 8002712:	461a      	mov	r2, r3
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	4293      	cmp	r3, r2
 8002718:	d3b3      	bcc.n	8002682 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695a      	ldr	r2, [r3, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002728:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f003 fb98 	bl	8005e64 <USB_ReadInterrupts>
 8002734:	4603      	mov	r3, r0
 8002736:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800273a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800273e:	d10a      	bne.n	8002756 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f005 fe6f 	bl	8008424 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f003 fb82 	bl	8005e64 <USB_ReadInterrupts>
 8002760:	4603      	mov	r3, r0
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	2b04      	cmp	r3, #4
 8002768:	d115      	bne.n	8002796 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f005 fe5f 	bl	8008440 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6859      	ldr	r1, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	430a      	orrs	r2, r1
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	e000      	b.n	8002796 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002794:	bf00      	nop
    }
  }
}
 8002796:	3734      	adds	r7, #52	@ 0x34
 8002798:	46bd      	mov	sp, r7
 800279a:	bd90      	pop	{r4, r7, pc}

0800279c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_PCD_SetAddress+0x1a>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e012      	b.n	80027dc <HAL_PCD_SetAddress+0x40>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	78fa      	ldrb	r2, [r7, #3]
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f003 fae1 	bl	8005d94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	4608      	mov	r0, r1
 80027ee:	4611      	mov	r1, r2
 80027f0:	461a      	mov	r2, r3
 80027f2:	4603      	mov	r3, r0
 80027f4:	70fb      	strb	r3, [r7, #3]
 80027f6:	460b      	mov	r3, r1
 80027f8:	803b      	strh	r3, [r7, #0]
 80027fa:	4613      	mov	r3, r2
 80027fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002802:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002806:	2b00      	cmp	r3, #0
 8002808:	da0f      	bge.n	800282a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	f003 020f 	and.w	r2, r3, #15
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	3310      	adds	r3, #16
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	3304      	adds	r3, #4
 8002820:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2201      	movs	r2, #1
 8002826:	705a      	strb	r2, [r3, #1]
 8002828:	e00f      	b.n	800284a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	f003 020f 	and.w	r2, r3, #15
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	4413      	add	r3, r2
 8002840:	3304      	adds	r3, #4
 8002842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	b2da      	uxtb	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002856:	883b      	ldrh	r3, [r7, #0]
 8002858:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	78ba      	ldrb	r2, [r7, #2]
 8002864:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	785b      	ldrb	r3, [r3, #1]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d004      	beq.n	8002878 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002878:	78bb      	ldrb	r3, [r7, #2]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d102      	bne.n	8002884 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_PCD_EP_Open+0xae>
 800288e:	2302      	movs	r3, #2
 8002890:	e00e      	b.n	80028b0 <HAL_PCD_EP_Open+0xcc>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68f9      	ldr	r1, [r7, #12]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f002 fc61 	bl	8005168 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80028ae:	7afb      	ldrb	r3, [r7, #11]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	da0f      	bge.n	80028ec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	f003 020f 	and.w	r2, r3, #15
 80028d2:	4613      	mov	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	3310      	adds	r3, #16
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	4413      	add	r3, r2
 80028e0:	3304      	adds	r3, #4
 80028e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2201      	movs	r2, #1
 80028e8:	705a      	strb	r2, [r3, #1]
 80028ea:	e00f      	b.n	800290c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	f003 020f 	and.w	r2, r3, #15
 80028f2:	4613      	mov	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	4413      	add	r3, r2
 8002902:	3304      	adds	r3, #4
 8002904:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	b2da      	uxtb	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_PCD_EP_Close+0x6e>
 8002922:	2302      	movs	r3, #2
 8002924:	e00e      	b.n	8002944 <HAL_PCD_EP_Close+0x8c>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68f9      	ldr	r1, [r7, #12]
 8002934:	4618      	mov	r0, r3
 8002936:	f002 fc9f 	bl	8005278 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	460b      	mov	r3, r1
 800295a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800295c:	7afb      	ldrb	r3, [r7, #11]
 800295e:	f003 020f 	and.w	r2, r3, #15
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4413      	add	r3, r2
 8002972:	3304      	adds	r3, #4
 8002974:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2200      	movs	r2, #0
 8002986:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2200      	movs	r2, #0
 800298c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800298e:	7afb      	ldrb	r3, [r7, #11]
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	b2da      	uxtb	r2, r3
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	799b      	ldrb	r3, [r3, #6]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d102      	bne.n	80029a8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	799b      	ldrb	r3, [r3, #6]
 80029b0:	461a      	mov	r2, r3
 80029b2:	6979      	ldr	r1, [r7, #20]
 80029b4:	f002 fd3c 	bl	8005430 <USB_EPStartXfer>

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b086      	sub	sp, #24
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	460b      	mov	r3, r1
 80029d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029d2:	7afb      	ldrb	r3, [r7, #11]
 80029d4:	f003 020f 	and.w	r2, r3, #15
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	3310      	adds	r3, #16
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4413      	add	r3, r2
 80029e6:	3304      	adds	r3, #4
 80029e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2200      	movs	r2, #0
 80029fa:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2201      	movs	r2, #1
 8002a00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a02:	7afb      	ldrb	r3, [r7, #11]
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	799b      	ldrb	r3, [r3, #6]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d102      	bne.n	8002a1c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	799b      	ldrb	r3, [r3, #6]
 8002a24:	461a      	mov	r2, r3
 8002a26:	6979      	ldr	r1, [r7, #20]
 8002a28:	f002 fd02 	bl	8005430 <USB_EPStartXfer>

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	460b      	mov	r3, r1
 8002a40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a42:	78fb      	ldrb	r3, [r7, #3]
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	7912      	ldrb	r2, [r2, #4]
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d901      	bls.n	8002a54 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e04f      	b.n	8002af4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	da0f      	bge.n	8002a7c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	f003 020f 	and.w	r2, r3, #15
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	3310      	adds	r3, #16
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	4413      	add	r3, r2
 8002a70:	3304      	adds	r3, #4
 8002a72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	705a      	strb	r2, [r3, #1]
 8002a7a:	e00d      	b.n	8002a98 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a7c:	78fa      	ldrb	r2, [r7, #3]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3304      	adds	r3, #4
 8002a90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_PCD_EP_SetStall+0x82>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e01d      	b.n	8002af4 <HAL_PCD_EP_SetStall+0xbe>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68f9      	ldr	r1, [r7, #12]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f003 f890 	bl	8005bec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d109      	bne.n	8002aea <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7999      	ldrb	r1, [r3, #6]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	f003 fa81 	bl	8005fec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	7912      	ldrb	r2, [r2, #4]
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e042      	b.n	8002ba0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	da0f      	bge.n	8002b42 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b22:	78fb      	ldrb	r3, [r7, #3]
 8002b24:	f003 020f 	and.w	r2, r3, #15
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	3310      	adds	r3, #16
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	3304      	adds	r3, #4
 8002b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	705a      	strb	r2, [r3, #1]
 8002b40:	e00f      	b.n	8002b62 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b42:	78fb      	ldrb	r3, [r7, #3]
 8002b44:	f003 020f 	and.w	r2, r3, #15
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	4413      	add	r3, r2
 8002b58:	3304      	adds	r3, #4
 8002b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_PCD_EP_ClrStall+0x86>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e00e      	b.n	8002ba0 <HAL_PCD_EP_ClrStall+0xa4>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68f9      	ldr	r1, [r7, #12]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f003 f899 	bl	8005cc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002bb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	da0c      	bge.n	8002bd6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	f003 020f 	and.w	r2, r3, #15
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	3310      	adds	r3, #16
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	4413      	add	r3, r2
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	e00c      	b.n	8002bf0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	f003 020f 	and.w	r2, r3, #15
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	4413      	add	r3, r2
 8002bec:	3304      	adds	r3, #4
 8002bee:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68f9      	ldr	r1, [r7, #12]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f002 feb8 	bl	800596c <USB_EPStopXfer>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002c00:	7afb      	ldrb	r3, [r7, #11]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b08a      	sub	sp, #40	@ 0x28
 8002c0e:	af02      	add	r7, sp, #8
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	3310      	adds	r3, #16
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3304      	adds	r3, #4
 8002c30:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	695a      	ldr	r2, [r3, #20]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d901      	bls.n	8002c42 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e06b      	b.n	8002d1a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	691a      	ldr	r2, [r3, #16]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d902      	bls.n	8002c5e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3303      	adds	r3, #3
 8002c62:	089b      	lsrs	r3, r3, #2
 8002c64:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c66:	e02a      	b.n	8002cbe <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d902      	bls.n	8002c84 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	3303      	adds	r3, #3
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	68d9      	ldr	r1, [r3, #12]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	6978      	ldr	r0, [r7, #20]
 8002ca2:	f002 ff0d 	bl	8005ac0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	441a      	add	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	441a      	add	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d809      	bhi.n	8002ce8 <PCD_WriteEmptyTxFifo+0xde>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	695a      	ldr	r2, [r3, #20]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d203      	bcs.n	8002ce8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1bf      	bne.n	8002c68 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d811      	bhi.n	8002d18 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	6939      	ldr	r1, [r7, #16]
 8002d10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002d14:	4013      	ands	r3, r2
 8002d16:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3720      	adds	r7, #32
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	333c      	adds	r3, #60	@ 0x3c
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	799b      	ldrb	r3, [r3, #6]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d17b      	bne.n	8002e52 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d015      	beq.n	8002d90 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	4a61      	ldr	r2, [pc, #388]	@ (8002eec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	f240 80b9 	bls.w	8002ee0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80b3 	beq.w	8002ee0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d86:	461a      	mov	r2, r3
 8002d88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d8c:	6093      	str	r3, [r2, #8]
 8002d8e:	e0a7      	b.n	8002ee0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002da6:	461a      	mov	r2, r3
 8002da8:	2320      	movs	r3, #32
 8002daa:	6093      	str	r3, [r2, #8]
 8002dac:	e098      	b.n	8002ee0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f040 8093 	bne.w	8002ee0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	4a4b      	ldr	r2, [pc, #300]	@ (8002eec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d90f      	bls.n	8002de2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dd8:	461a      	mov	r2, r3
 8002dda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dde:	6093      	str	r3, [r2, #8]
 8002de0:	e07e      	b.n	8002ee0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	4613      	mov	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	4413      	add	r3, r2
 8002df4:	3304      	adds	r3, #4
 8002df6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a1a      	ldr	r2, [r3, #32]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	0159      	lsls	r1, r3, #5
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	440b      	add	r3, r1
 8002e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e0e:	1ad2      	subs	r2, r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d114      	bne.n	8002e44 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2101      	movs	r1, #1
 8002e30:	f003 f8dc 	bl	8005fec <USB_EP0_OutStart>
 8002e34:	e006      	b.n	8002e44 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	441a      	add	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	4619      	mov	r1, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f005 fa27 	bl	800829e <HAL_PCD_DataOutStageCallback>
 8002e50:	e046      	b.n	8002ee0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	4a26      	ldr	r2, [pc, #152]	@ (8002ef0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d124      	bne.n	8002ea4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e70:	461a      	mov	r2, r3
 8002e72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e76:	6093      	str	r3, [r2, #8]
 8002e78:	e032      	b.n	8002ee0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f003 0320 	and.w	r3, r3, #32
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e90:	461a      	mov	r2, r3
 8002e92:	2320      	movs	r3, #32
 8002e94:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f005 f9fe 	bl	800829e <HAL_PCD_DataOutStageCallback>
 8002ea2:	e01d      	b.n	8002ee0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d114      	bne.n	8002ed4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d108      	bne.n	8002ed4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2100      	movs	r1, #0
 8002ed0:	f003 f88c 	bl	8005fec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	4619      	mov	r1, r3
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f005 f9df 	bl	800829e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3720      	adds	r7, #32
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	4f54300a 	.word	0x4f54300a
 8002ef0:	4f54310a 	.word	0x4f54310a

08002ef4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	333c      	adds	r3, #60	@ 0x3c
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4a15      	ldr	r2, [pc, #84]	@ (8002f7c <PCD_EP_OutSetupPacket_int+0x88>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d90e      	bls.n	8002f48 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d009      	beq.n	8002f48 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f40:	461a      	mov	r2, r3
 8002f42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f005 f996 	bl	800827a <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4a0a      	ldr	r2, [pc, #40]	@ (8002f7c <PCD_EP_OutSetupPacket_int+0x88>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d90c      	bls.n	8002f70 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	799b      	ldrb	r3, [r3, #6]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d108      	bne.n	8002f70 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f68:	461a      	mov	r2, r3
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	f003 f83e 	bl	8005fec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	4f54300a 	.word	0x4f54300a

08002f80 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	70fb      	strb	r3, [r7, #3]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d107      	bne.n	8002fae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f9e:	883b      	ldrh	r3, [r7, #0]
 8002fa0:	0419      	lsls	r1, r3, #16
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fac:	e028      	b.n	8003000 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb4:	0c1b      	lsrs	r3, r3, #16
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	4413      	add	r3, r2
 8002fba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	73fb      	strb	r3, [r7, #15]
 8002fc0:	e00d      	b.n	8002fde <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	3340      	adds	r3, #64	@ 0x40
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	0c1b      	lsrs	r3, r3, #16
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	73fb      	strb	r3, [r7, #15]
 8002fde:	7bfa      	ldrb	r2, [r7, #15]
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d3ec      	bcc.n	8002fc2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002fe8:	883b      	ldrh	r3, [r7, #0]
 8002fea:	0418      	lsls	r0, r3, #16
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6819      	ldr	r1, [r3, #0]
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	4302      	orrs	r2, r0
 8002ff8:	3340      	adds	r3, #64	@ 0x40
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	460b      	mov	r3, r1
 8003018:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	887a      	ldrh	r2, [r7, #2]
 8003020:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e267      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d075      	beq.n	8003152 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003066:	4b88      	ldr	r3, [pc, #544]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b04      	cmp	r3, #4
 8003070:	d00c      	beq.n	800308c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003072:	4b85      	ldr	r3, [pc, #532]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800307a:	2b08      	cmp	r3, #8
 800307c:	d112      	bne.n	80030a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800307e:	4b82      	ldr	r3, [pc, #520]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003086:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800308a:	d10b      	bne.n	80030a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308c:	4b7e      	ldr	r3, [pc, #504]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d05b      	beq.n	8003150 <HAL_RCC_OscConfig+0x108>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d157      	bne.n	8003150 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e242      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ac:	d106      	bne.n	80030bc <HAL_RCC_OscConfig+0x74>
 80030ae:	4b76      	ldr	r3, [pc, #472]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a75      	ldr	r2, [pc, #468]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e01d      	b.n	80030f8 <HAL_RCC_OscConfig+0xb0>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030c4:	d10c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x98>
 80030c6:	4b70      	ldr	r3, [pc, #448]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a6f      	ldr	r2, [pc, #444]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a6c      	ldr	r2, [pc, #432]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e00b      	b.n	80030f8 <HAL_RCC_OscConfig+0xb0>
 80030e0:	4b69      	ldr	r3, [pc, #420]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a68      	ldr	r2, [pc, #416]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	4b66      	ldr	r3, [pc, #408]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a65      	ldr	r2, [pc, #404]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80030f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d013      	beq.n	8003128 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fe f9f6 	bl	80014f0 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003108:	f7fe f9f2 	bl	80014f0 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b64      	cmp	r3, #100	@ 0x64
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e207      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	4b5b      	ldr	r3, [pc, #364]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0xc0>
 8003126:	e014      	b.n	8003152 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fe f9e2 	bl	80014f0 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003130:	f7fe f9de 	bl	80014f0 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b64      	cmp	r3, #100	@ 0x64
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e1f3      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003142:	4b51      	ldr	r3, [pc, #324]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0xe8>
 800314e:	e000      	b.n	8003152 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d063      	beq.n	8003226 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800315e:	4b4a      	ldr	r3, [pc, #296]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00b      	beq.n	8003182 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316a:	4b47      	ldr	r3, [pc, #284]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003172:	2b08      	cmp	r3, #8
 8003174:	d11c      	bne.n	80031b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003176:	4b44      	ldr	r3, [pc, #272]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d116      	bne.n	80031b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003182:	4b41      	ldr	r3, [pc, #260]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_RCC_OscConfig+0x152>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d001      	beq.n	800319a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e1c7      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319a:	4b3b      	ldr	r3, [pc, #236]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4937      	ldr	r1, [pc, #220]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ae:	e03a      	b.n	8003226 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d020      	beq.n	80031fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b8:	4b34      	ldr	r3, [pc, #208]	@ (800328c <HAL_RCC_OscConfig+0x244>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031be:	f7fe f997 	bl	80014f0 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c6:	f7fe f993 	bl	80014f0 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e1a8      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e4:	4b28      	ldr	r3, [pc, #160]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4925      	ldr	r1, [pc, #148]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	600b      	str	r3, [r1, #0]
 80031f8:	e015      	b.n	8003226 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031fa:	4b24      	ldr	r3, [pc, #144]	@ (800328c <HAL_RCC_OscConfig+0x244>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fe f976 	bl	80014f0 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003208:	f7fe f972 	bl	80014f0 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e187      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321a:	4b1b      	ldr	r3, [pc, #108]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d036      	beq.n	80032a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d016      	beq.n	8003268 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800323a:	4b15      	ldr	r3, [pc, #84]	@ (8003290 <HAL_RCC_OscConfig+0x248>)
 800323c:	2201      	movs	r2, #1
 800323e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7fe f956 	bl	80014f0 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003248:	f7fe f952 	bl	80014f0 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e167      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325a:	4b0b      	ldr	r3, [pc, #44]	@ (8003288 <HAL_RCC_OscConfig+0x240>)
 800325c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x200>
 8003266:	e01b      	b.n	80032a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003268:	4b09      	ldr	r3, [pc, #36]	@ (8003290 <HAL_RCC_OscConfig+0x248>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326e:	f7fe f93f 	bl	80014f0 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003274:	e00e      	b.n	8003294 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003276:	f7fe f93b 	bl	80014f0 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d907      	bls.n	8003294 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e150      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
 8003288:	40023800 	.word	0x40023800
 800328c:	42470000 	.word	0x42470000
 8003290:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003294:	4b88      	ldr	r3, [pc, #544]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1ea      	bne.n	8003276 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 8097 	beq.w	80033dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ae:	2300      	movs	r3, #0
 80032b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032b2:	4b81      	ldr	r3, [pc, #516]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10f      	bne.n	80032de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	4b7d      	ldr	r3, [pc, #500]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	4a7c      	ldr	r2, [pc, #496]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80032c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ce:	4b7a      	ldr	r3, [pc, #488]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d6:	60bb      	str	r3, [r7, #8]
 80032d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032da:	2301      	movs	r3, #1
 80032dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032de:	4b77      	ldr	r3, [pc, #476]	@ (80034bc <HAL_RCC_OscConfig+0x474>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d118      	bne.n	800331c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ea:	4b74      	ldr	r3, [pc, #464]	@ (80034bc <HAL_RCC_OscConfig+0x474>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a73      	ldr	r2, [pc, #460]	@ (80034bc <HAL_RCC_OscConfig+0x474>)
 80032f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f6:	f7fe f8fb 	bl	80014f0 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032fe:	f7fe f8f7 	bl	80014f0 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e10c      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003310:	4b6a      	ldr	r3, [pc, #424]	@ (80034bc <HAL_RCC_OscConfig+0x474>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0f0      	beq.n	80032fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d106      	bne.n	8003332 <HAL_RCC_OscConfig+0x2ea>
 8003324:	4b64      	ldr	r3, [pc, #400]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003328:	4a63      	ldr	r2, [pc, #396]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003330:	e01c      	b.n	800336c <HAL_RCC_OscConfig+0x324>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b05      	cmp	r3, #5
 8003338:	d10c      	bne.n	8003354 <HAL_RCC_OscConfig+0x30c>
 800333a:	4b5f      	ldr	r3, [pc, #380]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 800333c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333e:	4a5e      	ldr	r2, [pc, #376]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003340:	f043 0304 	orr.w	r3, r3, #4
 8003344:	6713      	str	r3, [r2, #112]	@ 0x70
 8003346:	4b5c      	ldr	r3, [pc, #368]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334a:	4a5b      	ldr	r2, [pc, #364]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	6713      	str	r3, [r2, #112]	@ 0x70
 8003352:	e00b      	b.n	800336c <HAL_RCC_OscConfig+0x324>
 8003354:	4b58      	ldr	r3, [pc, #352]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003358:	4a57      	ldr	r2, [pc, #348]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003360:	4b55      	ldr	r3, [pc, #340]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003364:	4a54      	ldr	r2, [pc, #336]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003366:	f023 0304 	bic.w	r3, r3, #4
 800336a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d015      	beq.n	80033a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003374:	f7fe f8bc 	bl	80014f0 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337a:	e00a      	b.n	8003392 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337c:	f7fe f8b8 	bl	80014f0 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e0cb      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003392:	4b49      	ldr	r3, [pc, #292]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0ee      	beq.n	800337c <HAL_RCC_OscConfig+0x334>
 800339e:	e014      	b.n	80033ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a0:	f7fe f8a6 	bl	80014f0 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a6:	e00a      	b.n	80033be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a8:	f7fe f8a2 	bl	80014f0 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e0b5      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033be:	4b3e      	ldr	r3, [pc, #248]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1ee      	bne.n	80033a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033ca:	7dfb      	ldrb	r3, [r7, #23]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d105      	bne.n	80033dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d0:	4b39      	ldr	r3, [pc, #228]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80033d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d4:	4a38      	ldr	r2, [pc, #224]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80033d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80a1 	beq.w	8003528 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033e6:	4b34      	ldr	r3, [pc, #208]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d05c      	beq.n	80034ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d141      	bne.n	800347e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fa:	4b31      	ldr	r3, [pc, #196]	@ (80034c0 <HAL_RCC_OscConfig+0x478>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fe f876 	bl	80014f0 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003408:	f7fe f872 	bl	80014f0 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e087      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341a:	4b27      	ldr	r3, [pc, #156]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69da      	ldr	r2, [r3, #28]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003434:	019b      	lsls	r3, r3, #6
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800343c:	085b      	lsrs	r3, r3, #1
 800343e:	3b01      	subs	r3, #1
 8003440:	041b      	lsls	r3, r3, #16
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	061b      	lsls	r3, r3, #24
 800344a:	491b      	ldr	r1, [pc, #108]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003450:	4b1b      	ldr	r3, [pc, #108]	@ (80034c0 <HAL_RCC_OscConfig+0x478>)
 8003452:	2201      	movs	r2, #1
 8003454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003456:	f7fe f84b 	bl	80014f0 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345e:	f7fe f847 	bl	80014f0 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e05c      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003470:	4b11      	ldr	r3, [pc, #68]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f0      	beq.n	800345e <HAL_RCC_OscConfig+0x416>
 800347c:	e054      	b.n	8003528 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347e:	4b10      	ldr	r3, [pc, #64]	@ (80034c0 <HAL_RCC_OscConfig+0x478>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003484:	f7fe f834 	bl	80014f0 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe f830 	bl	80014f0 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e045      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349e:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <HAL_RCC_OscConfig+0x470>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x444>
 80034aa:	e03d      	b.n	8003528 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d107      	bne.n	80034c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e038      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40007000 	.word	0x40007000
 80034c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003534 <HAL_RCC_OscConfig+0x4ec>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d028      	beq.n	8003524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034dc:	429a      	cmp	r2, r3
 80034de:	d121      	bne.n	8003524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d11a      	bne.n	8003524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034f4:	4013      	ands	r3, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d111      	bne.n	8003524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350a:	085b      	lsrs	r3, r3, #1
 800350c:	3b01      	subs	r3, #1
 800350e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003510:	429a      	cmp	r2, r3
 8003512:	d107      	bne.n	8003524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40023800 	.word	0x40023800

08003538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0cc      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800354c:	4b68      	ldr	r3, [pc, #416]	@ (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d90c      	bls.n	8003574 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b65      	ldr	r3, [pc, #404]	@ (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b63      	ldr	r3, [pc, #396]	@ (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0b8      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d020      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800358c:	4b59      	ldr	r3, [pc, #356]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	4a58      	ldr	r2, [pc, #352]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003596:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035a4:	4b53      	ldr	r3, [pc, #332]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	4a52      	ldr	r2, [pc, #328]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b0:	4b50      	ldr	r3, [pc, #320]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	494d      	ldr	r1, [pc, #308]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d044      	beq.n	8003658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	4b47      	ldr	r3, [pc, #284]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d119      	bne.n	8003616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e07f      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d003      	beq.n	80035f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d107      	bne.n	8003606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f6:	4b3f      	ldr	r3, [pc, #252]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d109      	bne.n	8003616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e06f      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003606:	4b3b      	ldr	r3, [pc, #236]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e067      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003616:	4b37      	ldr	r3, [pc, #220]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f023 0203 	bic.w	r2, r3, #3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4934      	ldr	r1, [pc, #208]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003624:	4313      	orrs	r3, r2
 8003626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003628:	f7fd ff62 	bl	80014f0 <HAL_GetTick>
 800362c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362e:	e00a      	b.n	8003646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003630:	f7fd ff5e 	bl	80014f0 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e04f      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003646:	4b2b      	ldr	r3, [pc, #172]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 020c 	and.w	r2, r3, #12
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	429a      	cmp	r2, r3
 8003656:	d1eb      	bne.n	8003630 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003658:	4b25      	ldr	r3, [pc, #148]	@ (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d20c      	bcs.n	8003680 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b22      	ldr	r3, [pc, #136]	@ (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366e:	4b20      	ldr	r3, [pc, #128]	@ (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d001      	beq.n	8003680 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e032      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800368c:	4b19      	ldr	r3, [pc, #100]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4916      	ldr	r1, [pc, #88]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	4313      	orrs	r3, r2
 800369c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d009      	beq.n	80036be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036aa:	4b12      	ldr	r3, [pc, #72]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	490e      	ldr	r1, [pc, #56]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036be:	f000 f821 	bl	8003704 <HAL_RCC_GetSysClockFreq>
 80036c2:	4602      	mov	r2, r0
 80036c4:	4b0b      	ldr	r3, [pc, #44]	@ (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	490a      	ldr	r1, [pc, #40]	@ (80036f8 <HAL_RCC_ClockConfig+0x1c0>)
 80036d0:	5ccb      	ldrb	r3, [r1, r3]
 80036d2:	fa22 f303 	lsr.w	r3, r2, r3
 80036d6:	4a09      	ldr	r2, [pc, #36]	@ (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036da:	4b09      	ldr	r3, [pc, #36]	@ (8003700 <HAL_RCC_ClockConfig+0x1c8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fd fec2 	bl	8001468 <HAL_InitTick>

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40023c00 	.word	0x40023c00
 80036f4:	40023800 	.word	0x40023800
 80036f8:	080094b8 	.word	0x080094b8
 80036fc:	20000004 	.word	0x20000004
 8003700:	20000008 	.word	0x20000008

08003704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003708:	b094      	sub	sp, #80	@ 0x50
 800370a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800371c:	4b79      	ldr	r3, [pc, #484]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x200>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 030c 	and.w	r3, r3, #12
 8003724:	2b08      	cmp	r3, #8
 8003726:	d00d      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x40>
 8003728:	2b08      	cmp	r3, #8
 800372a:	f200 80e1 	bhi.w	80038f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_RCC_GetSysClockFreq+0x34>
 8003732:	2b04      	cmp	r3, #4
 8003734:	d003      	beq.n	800373e <HAL_RCC_GetSysClockFreq+0x3a>
 8003736:	e0db      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003738:	4b73      	ldr	r3, [pc, #460]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x204>)
 800373a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800373c:	e0db      	b.n	80038f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800373e:	4b73      	ldr	r3, [pc, #460]	@ (800390c <HAL_RCC_GetSysClockFreq+0x208>)
 8003740:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003742:	e0d8      	b.n	80038f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003744:	4b6f      	ldr	r3, [pc, #444]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x200>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800374c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800374e:	4b6d      	ldr	r3, [pc, #436]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x200>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d063      	beq.n	8003822 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800375a:	4b6a      	ldr	r3, [pc, #424]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x200>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	099b      	lsrs	r3, r3, #6
 8003760:	2200      	movs	r2, #0
 8003762:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003764:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800376c:	633b      	str	r3, [r7, #48]	@ 0x30
 800376e:	2300      	movs	r3, #0
 8003770:	637b      	str	r3, [r7, #52]	@ 0x34
 8003772:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003776:	4622      	mov	r2, r4
 8003778:	462b      	mov	r3, r5
 800377a:	f04f 0000 	mov.w	r0, #0
 800377e:	f04f 0100 	mov.w	r1, #0
 8003782:	0159      	lsls	r1, r3, #5
 8003784:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003788:	0150      	lsls	r0, r2, #5
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4621      	mov	r1, r4
 8003790:	1a51      	subs	r1, r2, r1
 8003792:	6139      	str	r1, [r7, #16]
 8003794:	4629      	mov	r1, r5
 8003796:	eb63 0301 	sbc.w	r3, r3, r1
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037a8:	4659      	mov	r1, fp
 80037aa:	018b      	lsls	r3, r1, #6
 80037ac:	4651      	mov	r1, sl
 80037ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037b2:	4651      	mov	r1, sl
 80037b4:	018a      	lsls	r2, r1, #6
 80037b6:	4651      	mov	r1, sl
 80037b8:	ebb2 0801 	subs.w	r8, r2, r1
 80037bc:	4659      	mov	r1, fp
 80037be:	eb63 0901 	sbc.w	r9, r3, r1
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037d6:	4690      	mov	r8, r2
 80037d8:	4699      	mov	r9, r3
 80037da:	4623      	mov	r3, r4
 80037dc:	eb18 0303 	adds.w	r3, r8, r3
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	462b      	mov	r3, r5
 80037e4:	eb49 0303 	adc.w	r3, r9, r3
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037f6:	4629      	mov	r1, r5
 80037f8:	024b      	lsls	r3, r1, #9
 80037fa:	4621      	mov	r1, r4
 80037fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003800:	4621      	mov	r1, r4
 8003802:	024a      	lsls	r2, r1, #9
 8003804:	4610      	mov	r0, r2
 8003806:	4619      	mov	r1, r3
 8003808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800380a:	2200      	movs	r2, #0
 800380c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800380e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003810:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003814:	f7fc fd4c 	bl	80002b0 <__aeabi_uldivmod>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4613      	mov	r3, r2
 800381e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003820:	e058      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003822:	4b38      	ldr	r3, [pc, #224]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x200>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	099b      	lsrs	r3, r3, #6
 8003828:	2200      	movs	r2, #0
 800382a:	4618      	mov	r0, r3
 800382c:	4611      	mov	r1, r2
 800382e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003832:	623b      	str	r3, [r7, #32]
 8003834:	2300      	movs	r3, #0
 8003836:	627b      	str	r3, [r7, #36]	@ 0x24
 8003838:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800383c:	4642      	mov	r2, r8
 800383e:	464b      	mov	r3, r9
 8003840:	f04f 0000 	mov.w	r0, #0
 8003844:	f04f 0100 	mov.w	r1, #0
 8003848:	0159      	lsls	r1, r3, #5
 800384a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800384e:	0150      	lsls	r0, r2, #5
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4641      	mov	r1, r8
 8003856:	ebb2 0a01 	subs.w	sl, r2, r1
 800385a:	4649      	mov	r1, r9
 800385c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800386c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003870:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003874:	ebb2 040a 	subs.w	r4, r2, sl
 8003878:	eb63 050b 	sbc.w	r5, r3, fp
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	00eb      	lsls	r3, r5, #3
 8003886:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800388a:	00e2      	lsls	r2, r4, #3
 800388c:	4614      	mov	r4, r2
 800388e:	461d      	mov	r5, r3
 8003890:	4643      	mov	r3, r8
 8003892:	18e3      	adds	r3, r4, r3
 8003894:	603b      	str	r3, [r7, #0]
 8003896:	464b      	mov	r3, r9
 8003898:	eb45 0303 	adc.w	r3, r5, r3
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038aa:	4629      	mov	r1, r5
 80038ac:	028b      	lsls	r3, r1, #10
 80038ae:	4621      	mov	r1, r4
 80038b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038b4:	4621      	mov	r1, r4
 80038b6:	028a      	lsls	r2, r1, #10
 80038b8:	4610      	mov	r0, r2
 80038ba:	4619      	mov	r1, r3
 80038bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038be:	2200      	movs	r2, #0
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	61fa      	str	r2, [r7, #28]
 80038c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038c8:	f7fc fcf2 	bl	80002b0 <__aeabi_uldivmod>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4613      	mov	r3, r2
 80038d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x200>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	0c1b      	lsrs	r3, r3, #16
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	3301      	adds	r3, #1
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80038e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038ee:	e002      	b.n	80038f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038f0:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x204>)
 80038f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3750      	adds	r7, #80	@ 0x50
 80038fc:	46bd      	mov	sp, r7
 80038fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003902:	bf00      	nop
 8003904:	40023800 	.word	0x40023800
 8003908:	00f42400 	.word	0x00f42400
 800390c:	007a1200 	.word	0x007a1200

08003910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003914:	4b03      	ldr	r3, [pc, #12]	@ (8003924 <HAL_RCC_GetHCLKFreq+0x14>)
 8003916:	681b      	ldr	r3, [r3, #0]
}
 8003918:	4618      	mov	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	20000004 	.word	0x20000004

08003928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800392c:	f7ff fff0 	bl	8003910 <HAL_RCC_GetHCLKFreq>
 8003930:	4602      	mov	r2, r0
 8003932:	4b05      	ldr	r3, [pc, #20]	@ (8003948 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	0a9b      	lsrs	r3, r3, #10
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	4903      	ldr	r1, [pc, #12]	@ (800394c <HAL_RCC_GetPCLK1Freq+0x24>)
 800393e:	5ccb      	ldrb	r3, [r1, r3]
 8003940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003944:	4618      	mov	r0, r3
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40023800 	.word	0x40023800
 800394c:	080094c8 	.word	0x080094c8

08003950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003954:	f7ff ffdc 	bl	8003910 <HAL_RCC_GetHCLKFreq>
 8003958:	4602      	mov	r2, r0
 800395a:	4b05      	ldr	r3, [pc, #20]	@ (8003970 <HAL_RCC_GetPCLK2Freq+0x20>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	0b5b      	lsrs	r3, r3, #13
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	4903      	ldr	r1, [pc, #12]	@ (8003974 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003966:	5ccb      	ldrb	r3, [r1, r3]
 8003968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800396c:	4618      	mov	r0, r3
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40023800 	.word	0x40023800
 8003974:	080094c8 	.word	0x080094c8

08003978 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e042      	b.n	8003a10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fd fbe6 	bl	8001170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2224      	movs	r2, #36	@ 0x24
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fde9 	bl	8004594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	@ 0x28
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	4613      	mov	r3, r2
 8003a26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d175      	bne.n	8003b24 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_UART_Transmit+0x2c>
 8003a3e:	88fb      	ldrh	r3, [r7, #6]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e06e      	b.n	8003b26 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2221      	movs	r2, #33	@ 0x21
 8003a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a56:	f7fd fd4b 	bl	80014f0 <HAL_GetTick>
 8003a5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	88fa      	ldrh	r2, [r7, #6]
 8003a60:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	88fa      	ldrh	r2, [r7, #6]
 8003a66:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a70:	d108      	bne.n	8003a84 <HAL_UART_Transmit+0x6c>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d104      	bne.n	8003a84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	61bb      	str	r3, [r7, #24]
 8003a82:	e003      	b.n	8003a8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a8c:	e02e      	b.n	8003aec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2200      	movs	r2, #0
 8003a96:	2180      	movs	r1, #128	@ 0x80
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 fb4b 	bl	8004134 <UART_WaitOnFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e03a      	b.n	8003b26 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10b      	bne.n	8003ace <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ac4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	3302      	adds	r3, #2
 8003aca:	61bb      	str	r3, [r7, #24]
 8003acc:	e007      	b.n	8003ade <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	781a      	ldrb	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	3301      	adds	r3, #1
 8003adc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1cb      	bne.n	8003a8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2200      	movs	r2, #0
 8003afe:	2140      	movs	r1, #64	@ 0x40
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 fb17 	bl	8004134 <UART_WaitOnFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e006      	b.n	8003b26 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e000      	b.n	8003b26 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b24:	2302      	movs	r3, #2
  }
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3720      	adds	r7, #32
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b085      	sub	sp, #20
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b20      	cmp	r3, #32
 8003b46:	d121      	bne.n	8003b8c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <HAL_UART_Transmit_IT+0x26>
 8003b4e:	88fb      	ldrh	r3, [r7, #6]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e01a      	b.n	8003b8e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	88fa      	ldrh	r2, [r7, #6]
 8003b62:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	88fa      	ldrh	r2, [r7, #6]
 8003b68:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2221      	movs	r2, #33	@ 0x21
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b86:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e000      	b.n	8003b8e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003b8c:	2302      	movs	r3, #2
  }
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b20      	cmp	r3, #32
 8003bb2:	d112      	bne.n	8003bda <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <HAL_UART_Receive_IT+0x26>
 8003bba:	88fb      	ldrh	r3, [r7, #6]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e00b      	b.n	8003bdc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	68b9      	ldr	r1, [r7, #8]
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 fb08 	bl	80041e6 <UART_Start_Receive_IT>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	e000      	b.n	8003bdc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003bda:	2302      	movs	r3, #2
  }
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b0ba      	sub	sp, #232	@ 0xe8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10f      	bne.n	8003c4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d009      	beq.n	8003c4a <HAL_UART_IRQHandler+0x66>
 8003c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fbe8 	bl	8004418 <UART_Receive_IT>
      return;
 8003c48:	e25b      	b.n	8004102 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 80de 	beq.w	8003e10 <HAL_UART_IRQHandler+0x22c>
 8003c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d106      	bne.n	8003c6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c64:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 80d1 	beq.w	8003e10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00b      	beq.n	8003c92 <HAL_UART_IRQHandler+0xae>
 8003c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d005      	beq.n	8003c92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8a:	f043 0201 	orr.w	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <HAL_UART_IRQHandler+0xd2>
 8003c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d005      	beq.n	8003cb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cae:	f043 0202 	orr.w	r2, r3, #2
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00b      	beq.n	8003cda <HAL_UART_IRQHandler+0xf6>
 8003cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd2:	f043 0204 	orr.w	r2, r3, #4
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d011      	beq.n	8003d0a <HAL_UART_IRQHandler+0x126>
 8003ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cea:	f003 0320 	and.w	r3, r3, #32
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d105      	bne.n	8003cfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d005      	beq.n	8003d0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d02:	f043 0208 	orr.w	r2, r3, #8
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 81f2 	beq.w	80040f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_UART_IRQHandler+0x14e>
 8003d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 fb73 	bl	8004418 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d3c:	2b40      	cmp	r3, #64	@ 0x40
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4e:	f003 0308 	and.w	r3, r3, #8
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d103      	bne.n	8003d5e <HAL_UART_IRQHandler+0x17a>
 8003d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d04f      	beq.n	8003dfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fa7b 	bl	800425a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6e:	2b40      	cmp	r3, #64	@ 0x40
 8003d70:	d141      	bne.n	8003df6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3314      	adds	r3, #20
 8003d78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d80:	e853 3f00 	ldrex	r3, [r3]
 8003d84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3314      	adds	r3, #20
 8003d9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003da2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003daa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003db6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1d9      	bne.n	8003d72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d013      	beq.n	8003dee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dca:	4a7e      	ldr	r2, [pc, #504]	@ (8003fc4 <HAL_UART_IRQHandler+0x3e0>)
 8003dcc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fd fd3d 	bl	8001852 <HAL_DMA_Abort_IT>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d016      	beq.n	8003e0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003de8:	4610      	mov	r0, r2
 8003dea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dec:	e00e      	b.n	8003e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f98a 	bl	8004108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df4:	e00a      	b.n	8003e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f986 	bl	8004108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dfc:	e006      	b.n	8003e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f982 	bl	8004108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003e0a:	e175      	b.n	80040f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0c:	bf00      	nop
    return;
 8003e0e:	e173      	b.n	80040f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	f040 814f 	bne.w	80040b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 8148 	beq.w	80040b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 8141 	beq.w	80040b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e36:	2300      	movs	r3, #0
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e56:	2b40      	cmp	r3, #64	@ 0x40
 8003e58:	f040 80b6 	bne.w	8003fc8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 8145 	beq.w	80040fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	f080 813e 	bcs.w	80040fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e86:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e92:	f000 8088 	beq.w	8003fa6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	330c      	adds	r3, #12
 8003e9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ea4:	e853 3f00 	ldrex	r3, [r3]
 8003ea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	330c      	adds	r3, #12
 8003ebe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ec2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ec6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ece:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1d9      	bne.n	8003e96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3314      	adds	r3, #20
 8003ee8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ef2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3314      	adds	r3, #20
 8003f02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e1      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3314      	adds	r3, #20
 8003f24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3314      	adds	r3, #20
 8003f3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e3      	bne.n	8003f1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	330c      	adds	r3, #12
 8003f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f6e:	e853 3f00 	ldrex	r3, [r3]
 8003f72:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f76:	f023 0310 	bic.w	r3, r3, #16
 8003f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	330c      	adds	r3, #12
 8003f84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003f88:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f8a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f90:	e841 2300 	strex	r3, r2, [r1]
 8003f94:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e3      	bne.n	8003f64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fd fbe6 	bl	8001772 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	4619      	mov	r1, r3
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f8ad 	bl	800411c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fc2:	e09b      	b.n	80040fc <HAL_UART_IRQHandler+0x518>
 8003fc4:	08004321 	.word	0x08004321
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 808e 	beq.w	8004100 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003fe4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 8089 	beq.w	8004100 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	330c      	adds	r3, #12
 8003ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004000:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004004:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	330c      	adds	r3, #12
 800400e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004012:	647a      	str	r2, [r7, #68]	@ 0x44
 8004014:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004018:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1e3      	bne.n	8003fee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3314      	adds	r3, #20
 800402c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	623b      	str	r3, [r7, #32]
   return(result);
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	f023 0301 	bic.w	r3, r3, #1
 800403c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3314      	adds	r3, #20
 8004046:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800404a:	633a      	str	r2, [r7, #48]	@ 0x30
 800404c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004052:	e841 2300 	strex	r3, r2, [r1]
 8004056:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1e3      	bne.n	8004026 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2220      	movs	r2, #32
 8004062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	60fb      	str	r3, [r7, #12]
   return(result);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0310 	bic.w	r3, r3, #16
 8004082:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	330c      	adds	r3, #12
 800408c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004090:	61fa      	str	r2, [r7, #28]
 8004092:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004094:	69b9      	ldr	r1, [r7, #24]
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	e841 2300 	strex	r3, r2, [r1]
 800409c:	617b      	str	r3, [r7, #20]
   return(result);
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e3      	bne.n	800406c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040ae:	4619      	mov	r1, r3
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f833 	bl	800411c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040b6:	e023      	b.n	8004100 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d009      	beq.n	80040d8 <HAL_UART_IRQHandler+0x4f4>
 80040c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f939 	bl	8004348 <UART_Transmit_IT>
    return;
 80040d6:	e014      	b.n	8004102 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00e      	beq.n	8004102 <HAL_UART_IRQHandler+0x51e>
 80040e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d008      	beq.n	8004102 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f979 	bl	80043e8 <UART_EndTransmit_IT>
    return;
 80040f6:	e004      	b.n	8004102 <HAL_UART_IRQHandler+0x51e>
    return;
 80040f8:	bf00      	nop
 80040fa:	e002      	b.n	8004102 <HAL_UART_IRQHandler+0x51e>
      return;
 80040fc:	bf00      	nop
 80040fe:	e000      	b.n	8004102 <HAL_UART_IRQHandler+0x51e>
      return;
 8004100:	bf00      	nop
  }
}
 8004102:	37e8      	adds	r7, #232	@ 0xe8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	460b      	mov	r3, r1
 8004126:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	4613      	mov	r3, r2
 8004142:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004144:	e03b      	b.n	80041be <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414c:	d037      	beq.n	80041be <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800414e:	f7fd f9cf 	bl	80014f0 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	6a3a      	ldr	r2, [r7, #32]
 800415a:	429a      	cmp	r2, r3
 800415c:	d302      	bcc.n	8004164 <UART_WaitOnFlagUntilTimeout+0x30>
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e03a      	b.n	80041de <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b00      	cmp	r3, #0
 8004174:	d023      	beq.n	80041be <UART_WaitOnFlagUntilTimeout+0x8a>
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b80      	cmp	r3, #128	@ 0x80
 800417a:	d020      	beq.n	80041be <UART_WaitOnFlagUntilTimeout+0x8a>
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b40      	cmp	r3, #64	@ 0x40
 8004180:	d01d      	beq.n	80041be <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b08      	cmp	r3, #8
 800418e:	d116      	bne.n	80041be <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 f857 	bl	800425a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2208      	movs	r2, #8
 80041b0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e00f      	b.n	80041de <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4013      	ands	r3, r2
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	bf0c      	ite	eq
 80041ce:	2301      	moveq	r3, #1
 80041d0:	2300      	movne	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	461a      	mov	r2, r3
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d0b4      	beq.n	8004146 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b085      	sub	sp, #20
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	4613      	mov	r3, r2
 80041f2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	88fa      	ldrh	r2, [r7, #6]
 80041fe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	88fa      	ldrh	r2, [r7, #6]
 8004204:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2222      	movs	r2, #34	@ 0x22
 8004210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d007      	beq.n	800422c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800422a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695a      	ldr	r2, [r3, #20]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0220 	orr.w	r2, r2, #32
 800424a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800425a:	b480      	push	{r7}
 800425c:	b095      	sub	sp, #84	@ 0x54
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	330c      	adds	r3, #12
 8004268:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004274:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004278:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	330c      	adds	r3, #12
 8004280:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004282:	643a      	str	r2, [r7, #64]	@ 0x40
 8004284:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004288:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e5      	bne.n	8004262 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3314      	adds	r3, #20
 800429c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	f023 0301 	bic.w	r3, r3, #1
 80042ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3314      	adds	r3, #20
 80042b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e5      	bne.n	8004296 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d119      	bne.n	8004306 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	330c      	adds	r3, #12
 80042d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f023 0310 	bic.w	r3, r3, #16
 80042e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	330c      	adds	r3, #12
 80042f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042f2:	61ba      	str	r2, [r7, #24]
 80042f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	6979      	ldr	r1, [r7, #20]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e5      	bne.n	80042d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004314:	bf00      	nop
 8004316:	3754      	adds	r7, #84	@ 0x54
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f7ff fee4 	bl	8004108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b21      	cmp	r3, #33	@ 0x21
 800435a:	d13e      	bne.n	80043da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004364:	d114      	bne.n	8004390 <UART_Transmit_IT+0x48>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d110      	bne.n	8004390 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004382:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	1c9a      	adds	r2, r3, #2
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	621a      	str	r2, [r3, #32]
 800438e:	e008      	b.n	80043a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	1c59      	adds	r1, r3, #1
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6211      	str	r1, [r2, #32]
 800439a:	781a      	ldrb	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	4619      	mov	r1, r3
 80043b0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10f      	bne.n	80043d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e000      	b.n	80043dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043da:	2302      	movs	r3, #2
  }
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7fc fabf 	bl	800098c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08c      	sub	sp, #48	@ 0x30
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b22      	cmp	r3, #34	@ 0x22
 800442a:	f040 80ae 	bne.w	800458a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004436:	d117      	bne.n	8004468 <UART_Receive_IT+0x50>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d113      	bne.n	8004468 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004440:	2300      	movs	r3, #0
 8004442:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004448:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	b29b      	uxth	r3, r3
 8004452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004456:	b29a      	uxth	r2, r3
 8004458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004460:	1c9a      	adds	r2, r3, #2
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	629a      	str	r2, [r3, #40]	@ 0x28
 8004466:	e026      	b.n	80044b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800446e:	2300      	movs	r3, #0
 8004470:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800447a:	d007      	beq.n	800448c <UART_Receive_IT+0x74>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <UART_Receive_IT+0x82>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d106      	bne.n	800449a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	b2da      	uxtb	r2, r3
 8004494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004496:	701a      	strb	r2, [r3, #0]
 8004498:	e008      	b.n	80044ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29b      	uxth	r3, r3
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	4619      	mov	r1, r3
 80044c4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d15d      	bne.n	8004586 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0220 	bic.w	r2, r2, #32
 80044d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0201 	bic.w	r2, r2, #1
 80044f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450c:	2b01      	cmp	r3, #1
 800450e:	d135      	bne.n	800457c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	330c      	adds	r3, #12
 800451c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	e853 3f00 	ldrex	r3, [r3]
 8004524:	613b      	str	r3, [r7, #16]
   return(result);
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f023 0310 	bic.w	r3, r3, #16
 800452c:	627b      	str	r3, [r7, #36]	@ 0x24
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	330c      	adds	r3, #12
 8004534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004536:	623a      	str	r2, [r7, #32]
 8004538:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453a:	69f9      	ldr	r1, [r7, #28]
 800453c:	6a3a      	ldr	r2, [r7, #32]
 800453e:	e841 2300 	strex	r3, r2, [r1]
 8004542:	61bb      	str	r3, [r7, #24]
   return(result);
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1e5      	bne.n	8004516 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0310 	and.w	r3, r3, #16
 8004554:	2b10      	cmp	r3, #16
 8004556:	d10a      	bne.n	800456e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004572:	4619      	mov	r1, r3
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7ff fdd1 	bl	800411c <HAL_UARTEx_RxEventCallback>
 800457a:	e002      	b.n	8004582 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7fc f9e5 	bl	800094c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	e002      	b.n	800458c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e000      	b.n	800458c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800458a:	2302      	movs	r3, #2
  }
}
 800458c:	4618      	mov	r0, r3
 800458e:	3730      	adds	r7, #48	@ 0x30
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004598:	b0c0      	sub	sp, #256	@ 0x100
 800459a:	af00      	add	r7, sp, #0
 800459c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b0:	68d9      	ldr	r1, [r3, #12]
 80045b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	ea40 0301 	orr.w	r3, r0, r1
 80045bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045ec:	f021 010c 	bic.w	r1, r1, #12
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045fa:	430b      	orrs	r3, r1
 80045fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800460a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460e:	6999      	ldr	r1, [r3, #24]
 8004610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	ea40 0301 	orr.w	r3, r0, r1
 800461a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	4b8f      	ldr	r3, [pc, #572]	@ (8004860 <UART_SetConfig+0x2cc>)
 8004624:	429a      	cmp	r2, r3
 8004626:	d005      	beq.n	8004634 <UART_SetConfig+0xa0>
 8004628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	4b8d      	ldr	r3, [pc, #564]	@ (8004864 <UART_SetConfig+0x2d0>)
 8004630:	429a      	cmp	r2, r3
 8004632:	d104      	bne.n	800463e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004634:	f7ff f98c 	bl	8003950 <HAL_RCC_GetPCLK2Freq>
 8004638:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800463c:	e003      	b.n	8004646 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800463e:	f7ff f973 	bl	8003928 <HAL_RCC_GetPCLK1Freq>
 8004642:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004650:	f040 810c 	bne.w	800486c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004658:	2200      	movs	r2, #0
 800465a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800465e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004662:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004666:	4622      	mov	r2, r4
 8004668:	462b      	mov	r3, r5
 800466a:	1891      	adds	r1, r2, r2
 800466c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800466e:	415b      	adcs	r3, r3
 8004670:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004672:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004676:	4621      	mov	r1, r4
 8004678:	eb12 0801 	adds.w	r8, r2, r1
 800467c:	4629      	mov	r1, r5
 800467e:	eb43 0901 	adc.w	r9, r3, r1
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800468e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004692:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004696:	4690      	mov	r8, r2
 8004698:	4699      	mov	r9, r3
 800469a:	4623      	mov	r3, r4
 800469c:	eb18 0303 	adds.w	r3, r8, r3
 80046a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046a4:	462b      	mov	r3, r5
 80046a6:	eb49 0303 	adc.w	r3, r9, r3
 80046aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046c2:	460b      	mov	r3, r1
 80046c4:	18db      	adds	r3, r3, r3
 80046c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80046c8:	4613      	mov	r3, r2
 80046ca:	eb42 0303 	adc.w	r3, r2, r3
 80046ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80046d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046d8:	f7fb fdea 	bl	80002b0 <__aeabi_uldivmod>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4b61      	ldr	r3, [pc, #388]	@ (8004868 <UART_SetConfig+0x2d4>)
 80046e2:	fba3 2302 	umull	r2, r3, r3, r2
 80046e6:	095b      	lsrs	r3, r3, #5
 80046e8:	011c      	lsls	r4, r3, #4
 80046ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046ee:	2200      	movs	r2, #0
 80046f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80046f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80046fc:	4642      	mov	r2, r8
 80046fe:	464b      	mov	r3, r9
 8004700:	1891      	adds	r1, r2, r2
 8004702:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004704:	415b      	adcs	r3, r3
 8004706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004708:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800470c:	4641      	mov	r1, r8
 800470e:	eb12 0a01 	adds.w	sl, r2, r1
 8004712:	4649      	mov	r1, r9
 8004714:	eb43 0b01 	adc.w	fp, r3, r1
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004724:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004728:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800472c:	4692      	mov	sl, r2
 800472e:	469b      	mov	fp, r3
 8004730:	4643      	mov	r3, r8
 8004732:	eb1a 0303 	adds.w	r3, sl, r3
 8004736:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800473a:	464b      	mov	r3, r9
 800473c:	eb4b 0303 	adc.w	r3, fp, r3
 8004740:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004750:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004754:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004758:	460b      	mov	r3, r1
 800475a:	18db      	adds	r3, r3, r3
 800475c:	643b      	str	r3, [r7, #64]	@ 0x40
 800475e:	4613      	mov	r3, r2
 8004760:	eb42 0303 	adc.w	r3, r2, r3
 8004764:	647b      	str	r3, [r7, #68]	@ 0x44
 8004766:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800476a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800476e:	f7fb fd9f 	bl	80002b0 <__aeabi_uldivmod>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4611      	mov	r1, r2
 8004778:	4b3b      	ldr	r3, [pc, #236]	@ (8004868 <UART_SetConfig+0x2d4>)
 800477a:	fba3 2301 	umull	r2, r3, r3, r1
 800477e:	095b      	lsrs	r3, r3, #5
 8004780:	2264      	movs	r2, #100	@ 0x64
 8004782:	fb02 f303 	mul.w	r3, r2, r3
 8004786:	1acb      	subs	r3, r1, r3
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800478e:	4b36      	ldr	r3, [pc, #216]	@ (8004868 <UART_SetConfig+0x2d4>)
 8004790:	fba3 2302 	umull	r2, r3, r3, r2
 8004794:	095b      	lsrs	r3, r3, #5
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800479c:	441c      	add	r4, r3
 800479e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80047b0:	4642      	mov	r2, r8
 80047b2:	464b      	mov	r3, r9
 80047b4:	1891      	adds	r1, r2, r2
 80047b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047b8:	415b      	adcs	r3, r3
 80047ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047c0:	4641      	mov	r1, r8
 80047c2:	1851      	adds	r1, r2, r1
 80047c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80047c6:	4649      	mov	r1, r9
 80047c8:	414b      	adcs	r3, r1
 80047ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047d8:	4659      	mov	r1, fp
 80047da:	00cb      	lsls	r3, r1, #3
 80047dc:	4651      	mov	r1, sl
 80047de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047e2:	4651      	mov	r1, sl
 80047e4:	00ca      	lsls	r2, r1, #3
 80047e6:	4610      	mov	r0, r2
 80047e8:	4619      	mov	r1, r3
 80047ea:	4603      	mov	r3, r0
 80047ec:	4642      	mov	r2, r8
 80047ee:	189b      	adds	r3, r3, r2
 80047f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047f4:	464b      	mov	r3, r9
 80047f6:	460a      	mov	r2, r1
 80047f8:	eb42 0303 	adc.w	r3, r2, r3
 80047fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800480c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004810:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004814:	460b      	mov	r3, r1
 8004816:	18db      	adds	r3, r3, r3
 8004818:	62bb      	str	r3, [r7, #40]	@ 0x28
 800481a:	4613      	mov	r3, r2
 800481c:	eb42 0303 	adc.w	r3, r2, r3
 8004820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004822:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004826:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800482a:	f7fb fd41 	bl	80002b0 <__aeabi_uldivmod>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	4b0d      	ldr	r3, [pc, #52]	@ (8004868 <UART_SetConfig+0x2d4>)
 8004834:	fba3 1302 	umull	r1, r3, r3, r2
 8004838:	095b      	lsrs	r3, r3, #5
 800483a:	2164      	movs	r1, #100	@ 0x64
 800483c:	fb01 f303 	mul.w	r3, r1, r3
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	3332      	adds	r3, #50	@ 0x32
 8004846:	4a08      	ldr	r2, [pc, #32]	@ (8004868 <UART_SetConfig+0x2d4>)
 8004848:	fba2 2303 	umull	r2, r3, r2, r3
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	f003 0207 	and.w	r2, r3, #7
 8004852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4422      	add	r2, r4
 800485a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800485c:	e106      	b.n	8004a6c <UART_SetConfig+0x4d8>
 800485e:	bf00      	nop
 8004860:	40011000 	.word	0x40011000
 8004864:	40011400 	.word	0x40011400
 8004868:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800486c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004870:	2200      	movs	r2, #0
 8004872:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004876:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800487a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800487e:	4642      	mov	r2, r8
 8004880:	464b      	mov	r3, r9
 8004882:	1891      	adds	r1, r2, r2
 8004884:	6239      	str	r1, [r7, #32]
 8004886:	415b      	adcs	r3, r3
 8004888:	627b      	str	r3, [r7, #36]	@ 0x24
 800488a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800488e:	4641      	mov	r1, r8
 8004890:	1854      	adds	r4, r2, r1
 8004892:	4649      	mov	r1, r9
 8004894:	eb43 0501 	adc.w	r5, r3, r1
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	00eb      	lsls	r3, r5, #3
 80048a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048a6:	00e2      	lsls	r2, r4, #3
 80048a8:	4614      	mov	r4, r2
 80048aa:	461d      	mov	r5, r3
 80048ac:	4643      	mov	r3, r8
 80048ae:	18e3      	adds	r3, r4, r3
 80048b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048b4:	464b      	mov	r3, r9
 80048b6:	eb45 0303 	adc.w	r3, r5, r3
 80048ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048da:	4629      	mov	r1, r5
 80048dc:	008b      	lsls	r3, r1, #2
 80048de:	4621      	mov	r1, r4
 80048e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048e4:	4621      	mov	r1, r4
 80048e6:	008a      	lsls	r2, r1, #2
 80048e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048ec:	f7fb fce0 	bl	80002b0 <__aeabi_uldivmod>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4b60      	ldr	r3, [pc, #384]	@ (8004a78 <UART_SetConfig+0x4e4>)
 80048f6:	fba3 2302 	umull	r2, r3, r3, r2
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	011c      	lsls	r4, r3, #4
 80048fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004902:	2200      	movs	r2, #0
 8004904:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004908:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800490c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004910:	4642      	mov	r2, r8
 8004912:	464b      	mov	r3, r9
 8004914:	1891      	adds	r1, r2, r2
 8004916:	61b9      	str	r1, [r7, #24]
 8004918:	415b      	adcs	r3, r3
 800491a:	61fb      	str	r3, [r7, #28]
 800491c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004920:	4641      	mov	r1, r8
 8004922:	1851      	adds	r1, r2, r1
 8004924:	6139      	str	r1, [r7, #16]
 8004926:	4649      	mov	r1, r9
 8004928:	414b      	adcs	r3, r1
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004938:	4659      	mov	r1, fp
 800493a:	00cb      	lsls	r3, r1, #3
 800493c:	4651      	mov	r1, sl
 800493e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004942:	4651      	mov	r1, sl
 8004944:	00ca      	lsls	r2, r1, #3
 8004946:	4610      	mov	r0, r2
 8004948:	4619      	mov	r1, r3
 800494a:	4603      	mov	r3, r0
 800494c:	4642      	mov	r2, r8
 800494e:	189b      	adds	r3, r3, r2
 8004950:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004954:	464b      	mov	r3, r9
 8004956:	460a      	mov	r2, r1
 8004958:	eb42 0303 	adc.w	r3, r2, r3
 800495c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	67bb      	str	r3, [r7, #120]	@ 0x78
 800496a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	f04f 0300 	mov.w	r3, #0
 8004974:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004978:	4649      	mov	r1, r9
 800497a:	008b      	lsls	r3, r1, #2
 800497c:	4641      	mov	r1, r8
 800497e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004982:	4641      	mov	r1, r8
 8004984:	008a      	lsls	r2, r1, #2
 8004986:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800498a:	f7fb fc91 	bl	80002b0 <__aeabi_uldivmod>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	4611      	mov	r1, r2
 8004994:	4b38      	ldr	r3, [pc, #224]	@ (8004a78 <UART_SetConfig+0x4e4>)
 8004996:	fba3 2301 	umull	r2, r3, r3, r1
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	2264      	movs	r2, #100	@ 0x64
 800499e:	fb02 f303 	mul.w	r3, r2, r3
 80049a2:	1acb      	subs	r3, r1, r3
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	3332      	adds	r3, #50	@ 0x32
 80049a8:	4a33      	ldr	r2, [pc, #204]	@ (8004a78 <UART_SetConfig+0x4e4>)
 80049aa:	fba2 2303 	umull	r2, r3, r2, r3
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049b4:	441c      	add	r4, r3
 80049b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ba:	2200      	movs	r2, #0
 80049bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80049be:	677a      	str	r2, [r7, #116]	@ 0x74
 80049c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049c4:	4642      	mov	r2, r8
 80049c6:	464b      	mov	r3, r9
 80049c8:	1891      	adds	r1, r2, r2
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	415b      	adcs	r3, r3
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049d4:	4641      	mov	r1, r8
 80049d6:	1851      	adds	r1, r2, r1
 80049d8:	6039      	str	r1, [r7, #0]
 80049da:	4649      	mov	r1, r9
 80049dc:	414b      	adcs	r3, r1
 80049de:	607b      	str	r3, [r7, #4]
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049ec:	4659      	mov	r1, fp
 80049ee:	00cb      	lsls	r3, r1, #3
 80049f0:	4651      	mov	r1, sl
 80049f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049f6:	4651      	mov	r1, sl
 80049f8:	00ca      	lsls	r2, r1, #3
 80049fa:	4610      	mov	r0, r2
 80049fc:	4619      	mov	r1, r3
 80049fe:	4603      	mov	r3, r0
 8004a00:	4642      	mov	r2, r8
 8004a02:	189b      	adds	r3, r3, r2
 8004a04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a06:	464b      	mov	r3, r9
 8004a08:	460a      	mov	r2, r1
 8004a0a:	eb42 0303 	adc.w	r3, r2, r3
 8004a0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a28:	4649      	mov	r1, r9
 8004a2a:	008b      	lsls	r3, r1, #2
 8004a2c:	4641      	mov	r1, r8
 8004a2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a32:	4641      	mov	r1, r8
 8004a34:	008a      	lsls	r2, r1, #2
 8004a36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a3a:	f7fb fc39 	bl	80002b0 <__aeabi_uldivmod>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	4b0d      	ldr	r3, [pc, #52]	@ (8004a78 <UART_SetConfig+0x4e4>)
 8004a44:	fba3 1302 	umull	r1, r3, r3, r2
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	2164      	movs	r1, #100	@ 0x64
 8004a4c:	fb01 f303 	mul.w	r3, r1, r3
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	3332      	adds	r3, #50	@ 0x32
 8004a56:	4a08      	ldr	r2, [pc, #32]	@ (8004a78 <UART_SetConfig+0x4e4>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	f003 020f 	and.w	r2, r3, #15
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4422      	add	r2, r4
 8004a6a:	609a      	str	r2, [r3, #8]
}
 8004a6c:	bf00      	nop
 8004a6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a72:	46bd      	mov	sp, r7
 8004a74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a78:	51eb851f 	.word	0x51eb851f

08004a7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	f107 001c 	add.w	r0, r7, #28
 8004a8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d123      	bne.n	8004ade <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004aaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004abe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d105      	bne.n	8004ad2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f001 fae8 	bl	80060a8 <USB_CoreReset>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	73fb      	strb	r3, [r7, #15]
 8004adc:	e01b      	b.n	8004b16 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f001 fadc 	bl	80060a8 <USB_CoreReset>
 8004af0:	4603      	mov	r3, r0
 8004af2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004af4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d106      	bne.n	8004b0a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b08:	e005      	b.n	8004b16 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b16:	7fbb      	ldrb	r3, [r7, #30]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d10b      	bne.n	8004b34 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f043 0206 	orr.w	r2, r3, #6
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f043 0220 	orr.w	r2, r3, #32
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b40:	b004      	add	sp, #16
 8004b42:	4770      	bx	lr

08004b44 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004b52:	79fb      	ldrb	r3, [r7, #7]
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d165      	bne.n	8004c24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4a41      	ldr	r2, [pc, #260]	@ (8004c60 <USB_SetTurnaroundTime+0x11c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d906      	bls.n	8004b6e <USB_SetTurnaroundTime+0x2a>
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	4a40      	ldr	r2, [pc, #256]	@ (8004c64 <USB_SetTurnaroundTime+0x120>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d202      	bcs.n	8004b6e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b68:	230f      	movs	r3, #15
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	e062      	b.n	8004c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4a3c      	ldr	r2, [pc, #240]	@ (8004c64 <USB_SetTurnaroundTime+0x120>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d306      	bcc.n	8004b84 <USB_SetTurnaroundTime+0x40>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	4a3b      	ldr	r2, [pc, #236]	@ (8004c68 <USB_SetTurnaroundTime+0x124>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d202      	bcs.n	8004b84 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b7e:	230e      	movs	r3, #14
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	e057      	b.n	8004c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4a38      	ldr	r2, [pc, #224]	@ (8004c68 <USB_SetTurnaroundTime+0x124>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d306      	bcc.n	8004b9a <USB_SetTurnaroundTime+0x56>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4a37      	ldr	r2, [pc, #220]	@ (8004c6c <USB_SetTurnaroundTime+0x128>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d202      	bcs.n	8004b9a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b94:	230d      	movs	r3, #13
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	e04c      	b.n	8004c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	4a33      	ldr	r2, [pc, #204]	@ (8004c6c <USB_SetTurnaroundTime+0x128>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d306      	bcc.n	8004bb0 <USB_SetTurnaroundTime+0x6c>
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	4a32      	ldr	r2, [pc, #200]	@ (8004c70 <USB_SetTurnaroundTime+0x12c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d802      	bhi.n	8004bb0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004baa:	230c      	movs	r3, #12
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	e041      	b.n	8004c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4a2f      	ldr	r2, [pc, #188]	@ (8004c70 <USB_SetTurnaroundTime+0x12c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d906      	bls.n	8004bc6 <USB_SetTurnaroundTime+0x82>
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4a2e      	ldr	r2, [pc, #184]	@ (8004c74 <USB_SetTurnaroundTime+0x130>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d802      	bhi.n	8004bc6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004bc0:	230b      	movs	r3, #11
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	e036      	b.n	8004c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4a2a      	ldr	r2, [pc, #168]	@ (8004c74 <USB_SetTurnaroundTime+0x130>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d906      	bls.n	8004bdc <USB_SetTurnaroundTime+0x98>
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	4a29      	ldr	r2, [pc, #164]	@ (8004c78 <USB_SetTurnaroundTime+0x134>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d802      	bhi.n	8004bdc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004bd6:	230a      	movs	r3, #10
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	e02b      	b.n	8004c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4a26      	ldr	r2, [pc, #152]	@ (8004c78 <USB_SetTurnaroundTime+0x134>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d906      	bls.n	8004bf2 <USB_SetTurnaroundTime+0xae>
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4a25      	ldr	r2, [pc, #148]	@ (8004c7c <USB_SetTurnaroundTime+0x138>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d202      	bcs.n	8004bf2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004bec:	2309      	movs	r3, #9
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	e020      	b.n	8004c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	4a21      	ldr	r2, [pc, #132]	@ (8004c7c <USB_SetTurnaroundTime+0x138>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d306      	bcc.n	8004c08 <USB_SetTurnaroundTime+0xc4>
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	4a20      	ldr	r2, [pc, #128]	@ (8004c80 <USB_SetTurnaroundTime+0x13c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d802      	bhi.n	8004c08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c02:	2308      	movs	r3, #8
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	e015      	b.n	8004c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8004c80 <USB_SetTurnaroundTime+0x13c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d906      	bls.n	8004c1e <USB_SetTurnaroundTime+0xda>
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	4a1c      	ldr	r2, [pc, #112]	@ (8004c84 <USB_SetTurnaroundTime+0x140>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d202      	bcs.n	8004c1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c18:	2307      	movs	r3, #7
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	e00a      	b.n	8004c34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c1e:	2306      	movs	r3, #6
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	e007      	b.n	8004c34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d102      	bne.n	8004c30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004c2a:	2309      	movs	r3, #9
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	e001      	b.n	8004c34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c30:	2309      	movs	r3, #9
 8004c32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	029b      	lsls	r3, r3, #10
 8004c48:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	371c      	adds	r7, #28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	00d8acbf 	.word	0x00d8acbf
 8004c64:	00e4e1c0 	.word	0x00e4e1c0
 8004c68:	00f42400 	.word	0x00f42400
 8004c6c:	01067380 	.word	0x01067380
 8004c70:	011a499f 	.word	0x011a499f
 8004c74:	01312cff 	.word	0x01312cff
 8004c78:	014ca43f 	.word	0x014ca43f
 8004c7c:	016e3600 	.word	0x016e3600
 8004c80:	01a6ab1f 	.word	0x01a6ab1f
 8004c84:	01e84800 	.word	0x01e84800

08004c88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f043 0201 	orr.w	r2, r3, #1
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f023 0201 	bic.w	r2, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d115      	bne.n	8004d1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004cfa:	200a      	movs	r0, #10
 8004cfc:	f7fc fc04 	bl	8001508 <HAL_Delay>
      ms += 10U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	330a      	adds	r3, #10
 8004d04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f001 f93f 	bl	8005f8a <USB_GetMode>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d01e      	beq.n	8004d50 <USB_SetCurrentMode+0x84>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d16:	d9f0      	bls.n	8004cfa <USB_SetCurrentMode+0x2e>
 8004d18:	e01a      	b.n	8004d50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d1a:	78fb      	ldrb	r3, [r7, #3]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d115      	bne.n	8004d4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d2c:	200a      	movs	r0, #10
 8004d2e:	f7fc fbeb 	bl	8001508 <HAL_Delay>
      ms += 10U;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	330a      	adds	r3, #10
 8004d36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f001 f926 	bl	8005f8a <USB_GetMode>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <USB_SetCurrentMode+0x84>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d48:	d9f0      	bls.n	8004d2c <USB_SetCurrentMode+0x60>
 8004d4a:	e001      	b.n	8004d50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e005      	b.n	8004d5c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2bc8      	cmp	r3, #200	@ 0xc8
 8004d54:	d101      	bne.n	8004d5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d64:	b084      	sub	sp, #16
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b086      	sub	sp, #24
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004d72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d7e:	2300      	movs	r3, #0
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	e009      	b.n	8004d98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	3340      	adds	r3, #64	@ 0x40
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	2200      	movs	r2, #0
 8004d90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	3301      	adds	r3, #1
 8004d96:	613b      	str	r3, [r7, #16]
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	2b0e      	cmp	r3, #14
 8004d9c:	d9f2      	bls.n	8004d84 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d9e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d11c      	bne.n	8004de0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004db4:	f043 0302 	orr.w	r3, r3, #2
 8004db8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dca:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	639a      	str	r2, [r3, #56]	@ 0x38
 8004dde:	e00b      	b.n	8004df8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004dfe:	461a      	mov	r2, r3
 8004e00:	2300      	movs	r3, #0
 8004e02:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e04:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d10d      	bne.n	8004e28 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d104      	bne.n	8004e1e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e14:	2100      	movs	r1, #0
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f968 	bl	80050ec <USB_SetDevSpeed>
 8004e1c:	e008      	b.n	8004e30 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e1e:	2101      	movs	r1, #1
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f963 	bl	80050ec <USB_SetDevSpeed>
 8004e26:	e003      	b.n	8004e30 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e28:	2103      	movs	r1, #3
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f95e 	bl	80050ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e30:	2110      	movs	r1, #16
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f8fa 	bl	800502c <USB_FlushTxFifo>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f924 	bl	8005090 <USB_FlushRxFifo>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e58:	461a      	mov	r2, r3
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e64:	461a      	mov	r2, r3
 8004e66:	2300      	movs	r3, #0
 8004e68:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e70:	461a      	mov	r2, r3
 8004e72:	2300      	movs	r3, #0
 8004e74:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e76:	2300      	movs	r3, #0
 8004e78:	613b      	str	r3, [r7, #16]
 8004e7a:	e043      	b.n	8004f04 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e92:	d118      	bne.n	8004ec6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10a      	bne.n	8004eb0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	e013      	b.n	8004ed8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	e008      	b.n	8004ed8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004efc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	3301      	adds	r3, #1
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f08:	461a      	mov	r2, r3
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d3b5      	bcc.n	8004e7c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f10:	2300      	movs	r3, #0
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	e043      	b.n	8004f9e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f2c:	d118      	bne.n	8004f60 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10a      	bne.n	8004f4a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f40:	461a      	mov	r2, r3
 8004f42:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	e013      	b.n	8004f72 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f56:	461a      	mov	r2, r3
 8004f58:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004f5c:	6013      	str	r3, [r2, #0]
 8004f5e:	e008      	b.n	8004f72 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	2300      	movs	r3, #0
 8004f70:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f7e:	461a      	mov	r2, r3
 8004f80:	2300      	movs	r3, #0
 8004f82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f90:	461a      	mov	r2, r3
 8004f92:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d3b5      	bcc.n	8004f16 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fbc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004fca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004fcc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d105      	bne.n	8004fe0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	f043 0210 	orr.w	r2, r3, #16
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699a      	ldr	r2, [r3, #24]
 8004fe4:	4b10      	ldr	r3, [pc, #64]	@ (8005028 <USB_DevInit+0x2c4>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004fec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	f043 0208 	orr.w	r2, r3, #8
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005000:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005004:	2b01      	cmp	r3, #1
 8005006:	d107      	bne.n	8005018 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005010:	f043 0304 	orr.w	r3, r3, #4
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005018:	7dfb      	ldrb	r3, [r7, #23]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005024:	b004      	add	sp, #16
 8005026:	4770      	bx	lr
 8005028:	803c3800 	.word	0x803c3800

0800502c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3301      	adds	r3, #1
 800503e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005046:	d901      	bls.n	800504c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e01b      	b.n	8005084 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	2b00      	cmp	r3, #0
 8005052:	daf2      	bge.n	800503a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	019b      	lsls	r3, r3, #6
 800505c:	f043 0220 	orr.w	r2, r3, #32
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3301      	adds	r3, #1
 8005068:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005070:	d901      	bls.n	8005076 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e006      	b.n	8005084 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b20      	cmp	r3, #32
 8005080:	d0f0      	beq.n	8005064 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	3301      	adds	r3, #1
 80050a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050a8:	d901      	bls.n	80050ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e018      	b.n	80050e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	daf2      	bge.n	800509c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2210      	movs	r2, #16
 80050be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3301      	adds	r3, #1
 80050c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050cc:	d901      	bls.n	80050d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e006      	b.n	80050e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0310 	and.w	r3, r3, #16
 80050da:	2b10      	cmp	r3, #16
 80050dc:	d0f0      	beq.n	80050c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	78fb      	ldrb	r3, [r7, #3]
 8005106:	68f9      	ldr	r1, [r7, #12]
 8005108:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800510c:	4313      	orrs	r3, r2
 800510e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800511e:	b480      	push	{r7}
 8005120:	b087      	sub	sp, #28
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 0306 	and.w	r3, r3, #6
 8005136:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d102      	bne.n	8005144 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800513e:	2300      	movs	r3, #0
 8005140:	75fb      	strb	r3, [r7, #23]
 8005142:	e00a      	b.n	800515a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d002      	beq.n	8005150 <USB_GetDevSpeed+0x32>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b06      	cmp	r3, #6
 800514e:	d102      	bne.n	8005156 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005150:	2302      	movs	r3, #2
 8005152:	75fb      	strb	r3, [r7, #23]
 8005154:	e001      	b.n	800515a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005156:	230f      	movs	r3, #15
 8005158:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800515a:	7dfb      	ldrb	r3, [r7, #23]
}
 800515c:	4618      	mov	r0, r3
 800515e:	371c      	adds	r7, #28
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	785b      	ldrb	r3, [r3, #1]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d13a      	bne.n	80051fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800518a:	69da      	ldr	r2, [r3, #28]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	f003 030f 	and.w	r3, r3, #15
 8005194:	2101      	movs	r1, #1
 8005196:	fa01 f303 	lsl.w	r3, r1, r3
 800519a:	b29b      	uxth	r3, r3
 800519c:	68f9      	ldr	r1, [r7, #12]
 800519e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051a2:	4313      	orrs	r3, r2
 80051a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d155      	bne.n	8005268 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	791b      	ldrb	r3, [r3, #4]
 80051d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	059b      	lsls	r3, r3, #22
 80051de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051e0:	4313      	orrs	r3, r2
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	0151      	lsls	r1, r2, #5
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	440a      	add	r2, r1
 80051ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	e036      	b.n	8005268 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005200:	69da      	ldr	r2, [r3, #28]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	2101      	movs	r1, #1
 800520c:	fa01 f303 	lsl.w	r3, r1, r3
 8005210:	041b      	lsls	r3, r3, #16
 8005212:	68f9      	ldr	r1, [r7, #12]
 8005214:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005218:	4313      	orrs	r3, r2
 800521a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d11a      	bne.n	8005268 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	791b      	ldrb	r3, [r3, #4]
 800524c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800524e:	430b      	orrs	r3, r1
 8005250:	4313      	orrs	r3, r2
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	0151      	lsls	r1, r2, #5
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	440a      	add	r2, r1
 800525a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800525e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005262:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005266:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
	...

08005278 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	785b      	ldrb	r3, [r3, #1]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d161      	bne.n	8005358 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052aa:	d11f      	bne.n	80052ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	0151      	lsls	r1, r2, #5
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	440a      	add	r2, r1
 80052c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80052ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	f003 030f 	and.w	r3, r3, #15
 80052fc:	2101      	movs	r1, #1
 80052fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005302:	b29b      	uxth	r3, r3
 8005304:	43db      	mvns	r3, r3
 8005306:	68f9      	ldr	r1, [r7, #12]
 8005308:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800530c:	4013      	ands	r3, r2
 800530e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005316:	69da      	ldr	r2, [r3, #28]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	f003 030f 	and.w	r3, r3, #15
 8005320:	2101      	movs	r1, #1
 8005322:	fa01 f303 	lsl.w	r3, r1, r3
 8005326:	b29b      	uxth	r3, r3
 8005328:	43db      	mvns	r3, r3
 800532a:	68f9      	ldr	r1, [r7, #12]
 800532c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005330:	4013      	ands	r3, r2
 8005332:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	0159      	lsls	r1, r3, #5
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	440b      	add	r3, r1
 800534a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800534e:	4619      	mov	r1, r3
 8005350:	4b35      	ldr	r3, [pc, #212]	@ (8005428 <USB_DeactivateEndpoint+0x1b0>)
 8005352:	4013      	ands	r3, r2
 8005354:	600b      	str	r3, [r1, #0]
 8005356:	e060      	b.n	800541a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800536a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800536e:	d11f      	bne.n	80053b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	0151      	lsls	r1, r2, #5
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	440a      	add	r2, r1
 8005386:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800538a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800538e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	0151      	lsls	r1, r2, #5
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	440a      	add	r2, r1
 80053a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	f003 030f 	and.w	r3, r3, #15
 80053c0:	2101      	movs	r1, #1
 80053c2:	fa01 f303 	lsl.w	r3, r1, r3
 80053c6:	041b      	lsls	r3, r3, #16
 80053c8:	43db      	mvns	r3, r3
 80053ca:	68f9      	ldr	r1, [r7, #12]
 80053cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053d0:	4013      	ands	r3, r2
 80053d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053da:	69da      	ldr	r2, [r3, #28]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	f003 030f 	and.w	r3, r3, #15
 80053e4:	2101      	movs	r1, #1
 80053e6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ea:	041b      	lsls	r3, r3, #16
 80053ec:	43db      	mvns	r3, r3
 80053ee:	68f9      	ldr	r1, [r7, #12]
 80053f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053f4:	4013      	ands	r3, r2
 80053f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	0159      	lsls	r1, r3, #5
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	440b      	add	r3, r1
 800540e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005412:	4619      	mov	r1, r3
 8005414:	4b05      	ldr	r3, [pc, #20]	@ (800542c <USB_DeactivateEndpoint+0x1b4>)
 8005416:	4013      	ands	r3, r2
 8005418:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	ec337800 	.word	0xec337800
 800542c:	eff37800 	.word	0xeff37800

08005430 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08a      	sub	sp, #40	@ 0x28
 8005434:	af02      	add	r7, sp, #8
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	4613      	mov	r3, r2
 800543c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	785b      	ldrb	r3, [r3, #1]
 800544c:	2b01      	cmp	r3, #1
 800544e:	f040 817f 	bne.w	8005750 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d132      	bne.n	80054c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	0151      	lsls	r1, r2, #5
 800546c:	69fa      	ldr	r2, [r7, #28]
 800546e:	440a      	add	r2, r1
 8005470:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005474:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005478:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800547c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	0151      	lsls	r1, r2, #5
 8005490:	69fa      	ldr	r2, [r7, #28]
 8005492:	440a      	add	r2, r1
 8005494:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005498:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800549c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	0151      	lsls	r1, r2, #5
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	440a      	add	r2, r1
 80054b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054b8:	0cdb      	lsrs	r3, r3, #19
 80054ba:	04db      	lsls	r3, r3, #19
 80054bc:	6113      	str	r3, [r2, #16]
 80054be:	e097      	b.n	80055f0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	0151      	lsls	r1, r2, #5
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	440a      	add	r2, r1
 80054d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054da:	0cdb      	lsrs	r3, r3, #19
 80054dc:	04db      	lsls	r3, r3, #19
 80054de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054fa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80054fe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005502:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d11a      	bne.n	8005540 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	691a      	ldr	r2, [r3, #16]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	429a      	cmp	r2, r3
 8005514:	d903      	bls.n	800551e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	69fa      	ldr	r2, [r7, #28]
 8005532:	440a      	add	r2, r1
 8005534:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005538:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800553c:	6113      	str	r3, [r2, #16]
 800553e:	e044      	b.n	80055ca <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	4413      	add	r3, r2
 800554a:	1e5a      	subs	r2, r3, #1
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	fbb2 f3f3 	udiv	r3, r2, r3
 8005554:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	8afb      	ldrh	r3, [r7, #22]
 8005566:	04d9      	lsls	r1, r3, #19
 8005568:	4ba4      	ldr	r3, [pc, #656]	@ (80057fc <USB_EPStartXfer+0x3cc>)
 800556a:	400b      	ands	r3, r1
 800556c:	69b9      	ldr	r1, [r7, #24]
 800556e:	0148      	lsls	r0, r1, #5
 8005570:	69f9      	ldr	r1, [r7, #28]
 8005572:	4401      	add	r1, r0
 8005574:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005578:	4313      	orrs	r3, r2
 800557a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	791b      	ldrb	r3, [r3, #4]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d122      	bne.n	80055ca <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	0151      	lsls	r1, r2, #5
 8005596:	69fa      	ldr	r2, [r7, #28]
 8005598:	440a      	add	r2, r1
 800559a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800559e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80055a2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055b0:	691a      	ldr	r2, [r3, #16]
 80055b2:	8afb      	ldrh	r3, [r7, #22]
 80055b4:	075b      	lsls	r3, r3, #29
 80055b6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80055ba:	69b9      	ldr	r1, [r7, #24]
 80055bc:	0148      	lsls	r0, r1, #5
 80055be:	69f9      	ldr	r1, [r7, #28]
 80055c0:	4401      	add	r1, r0
 80055c2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80055c6:	4313      	orrs	r3, r2
 80055c8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055d6:	691a      	ldr	r2, [r3, #16]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055e0:	69b9      	ldr	r1, [r7, #24]
 80055e2:	0148      	lsls	r0, r1, #5
 80055e4:	69f9      	ldr	r1, [r7, #28]
 80055e6:	4401      	add	r1, r0
 80055e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80055ec:	4313      	orrs	r3, r2
 80055ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d14b      	bne.n	800568e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d009      	beq.n	8005612 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800560a:	461a      	mov	r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	791b      	ldrb	r3, [r3, #4]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d128      	bne.n	800566c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005626:	2b00      	cmp	r3, #0
 8005628:	d110      	bne.n	800564c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	0151      	lsls	r1, r2, #5
 800563c:	69fa      	ldr	r2, [r7, #28]
 800563e:	440a      	add	r2, r1
 8005640:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005644:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005648:	6013      	str	r3, [r2, #0]
 800564a:	e00f      	b.n	800566c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	0151      	lsls	r1, r2, #5
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	440a      	add	r2, r1
 8005662:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800566a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	015a      	lsls	r2, r3, #5
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	4413      	add	r3, r2
 8005674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	0151      	lsls	r1, r2, #5
 800567e:	69fa      	ldr	r2, [r7, #28]
 8005680:	440a      	add	r2, r1
 8005682:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005686:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	e166      	b.n	800595c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	0151      	lsls	r1, r2, #5
 80056a0:	69fa      	ldr	r2, [r7, #28]
 80056a2:	440a      	add	r2, r1
 80056a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056a8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80056ac:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	791b      	ldrb	r3, [r3, #4]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d015      	beq.n	80056e2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 814e 	beq.w	800595c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	2101      	movs	r1, #1
 80056d2:	fa01 f303 	lsl.w	r3, r1, r3
 80056d6:	69f9      	ldr	r1, [r7, #28]
 80056d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056dc:	4313      	orrs	r3, r2
 80056de:	634b      	str	r3, [r1, #52]	@ 0x34
 80056e0:	e13c      	b.n	800595c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d110      	bne.n	8005714 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	0151      	lsls	r1, r2, #5
 8005704:	69fa      	ldr	r2, [r7, #28]
 8005706:	440a      	add	r2, r1
 8005708:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800570c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	e00f      	b.n	8005734 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	0151      	lsls	r1, r2, #5
 8005726:	69fa      	ldr	r2, [r7, #28]
 8005728:	440a      	add	r2, r1
 800572a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800572e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005732:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	68d9      	ldr	r1, [r3, #12]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	781a      	ldrb	r2, [r3, #0]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	b298      	uxth	r0, r3
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	4603      	mov	r3, r0
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f9b9 	bl	8005ac0 <USB_WritePacket>
 800574e:	e105      	b.n	800595c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	0151      	lsls	r1, r2, #5
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	440a      	add	r2, r1
 8005766:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800576a:	0cdb      	lsrs	r3, r3, #19
 800576c:	04db      	lsls	r3, r3, #19
 800576e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	0151      	lsls	r1, r2, #5
 8005782:	69fa      	ldr	r2, [r7, #28]
 8005784:	440a      	add	r2, r1
 8005786:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800578a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800578e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005792:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d132      	bne.n	8005800 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	689a      	ldr	r2, [r3, #8]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057c8:	69b9      	ldr	r1, [r7, #24]
 80057ca:	0148      	lsls	r0, r1, #5
 80057cc:	69f9      	ldr	r1, [r7, #28]
 80057ce:	4401      	add	r1, r0
 80057d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80057d4:	4313      	orrs	r3, r2
 80057d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	0151      	lsls	r1, r2, #5
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	440a      	add	r2, r1
 80057ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057f6:	6113      	str	r3, [r2, #16]
 80057f8:	e062      	b.n	80058c0 <USB_EPStartXfer+0x490>
 80057fa:	bf00      	nop
 80057fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d123      	bne.n	8005850 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005814:	691a      	ldr	r2, [r3, #16]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800581e:	69b9      	ldr	r1, [r7, #24]
 8005820:	0148      	lsls	r0, r1, #5
 8005822:	69f9      	ldr	r1, [r7, #28]
 8005824:	4401      	add	r1, r0
 8005826:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800582a:	4313      	orrs	r3, r2
 800582c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	0151      	lsls	r1, r2, #5
 8005840:	69fa      	ldr	r2, [r7, #28]
 8005842:	440a      	add	r2, r1
 8005844:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005848:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800584c:	6113      	str	r3, [r2, #16]
 800584e:	e037      	b.n	80058c0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	4413      	add	r3, r2
 800585a:	1e5a      	subs	r2, r3, #1
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	fbb2 f3f3 	udiv	r3, r2, r3
 8005864:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	8afa      	ldrh	r2, [r7, #22]
 800586c:	fb03 f202 	mul.w	r2, r3, r2
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005880:	691a      	ldr	r2, [r3, #16]
 8005882:	8afb      	ldrh	r3, [r7, #22]
 8005884:	04d9      	lsls	r1, r3, #19
 8005886:	4b38      	ldr	r3, [pc, #224]	@ (8005968 <USB_EPStartXfer+0x538>)
 8005888:	400b      	ands	r3, r1
 800588a:	69b9      	ldr	r1, [r7, #24]
 800588c:	0148      	lsls	r0, r1, #5
 800588e:	69f9      	ldr	r1, [r7, #28]
 8005890:	4401      	add	r1, r0
 8005892:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005896:	4313      	orrs	r3, r2
 8005898:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058b0:	69b9      	ldr	r1, [r7, #24]
 80058b2:	0148      	lsls	r0, r1, #5
 80058b4:	69f9      	ldr	r1, [r7, #28]
 80058b6:	4401      	add	r1, r0
 80058b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80058bc:	4313      	orrs	r3, r2
 80058be:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80058c0:	79fb      	ldrb	r3, [r7, #7]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d10d      	bne.n	80058e2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d009      	beq.n	80058e2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	68d9      	ldr	r1, [r3, #12]
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058de:	460a      	mov	r2, r1
 80058e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	791b      	ldrb	r3, [r3, #4]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d128      	bne.n	800593c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d110      	bne.n	800591c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	4413      	add	r3, r2
 8005902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	0151      	lsls	r1, r2, #5
 800590c:	69fa      	ldr	r2, [r7, #28]
 800590e:	440a      	add	r2, r1
 8005910:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005914:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005918:	6013      	str	r3, [r2, #0]
 800591a:	e00f      	b.n	800593c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	0151      	lsls	r1, r2, #5
 800592e:	69fa      	ldr	r2, [r7, #28]
 8005930:	440a      	add	r2, r1
 8005932:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005936:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800593a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	0151      	lsls	r1, r2, #5
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	440a      	add	r2, r1
 8005952:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005956:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800595a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3720      	adds	r7, #32
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	1ff80000 	.word	0x1ff80000

0800596c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	785b      	ldrb	r3, [r3, #1]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d14a      	bne.n	8005a20 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800599e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059a2:	f040 8086 	bne.w	8005ab2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	7812      	ldrb	r2, [r2, #0]
 80059ba:	0151      	lsls	r1, r2, #5
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	440a      	add	r2, r1
 80059c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80059c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	7812      	ldrb	r2, [r2, #0]
 80059de:	0151      	lsls	r1, r2, #5
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	440a      	add	r2, r1
 80059e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	3301      	adds	r3, #1
 80059f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d902      	bls.n	8005a04 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	75fb      	strb	r3, [r7, #23]
          break;
 8005a02:	e056      	b.n	8005ab2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a1c:	d0e7      	beq.n	80059ee <USB_EPStopXfer+0x82>
 8005a1e:	e048      	b.n	8005ab2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	015a      	lsls	r2, r3, #5
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a38:	d13b      	bne.n	8005ab2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	7812      	ldrb	r2, [r2, #0]
 8005a4e:	0151      	lsls	r1, r2, #5
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	440a      	add	r2, r1
 8005a54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a58:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a5c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	7812      	ldrb	r2, [r2, #0]
 8005a72:	0151      	lsls	r1, r2, #5
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	440a      	add	r2, r1
 8005a78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3301      	adds	r3, #1
 8005a86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d902      	bls.n	8005a98 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	75fb      	strb	r3, [r7, #23]
          break;
 8005a96:	e00c      	b.n	8005ab2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005aac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ab0:	d0e7      	beq.n	8005a82 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	371c      	adds	r7, #28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b089      	sub	sp, #36	@ 0x24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	4611      	mov	r1, r2
 8005acc:	461a      	mov	r2, r3
 8005ace:	460b      	mov	r3, r1
 8005ad0:	71fb      	strb	r3, [r7, #7]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005ade:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d123      	bne.n	8005b2e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ae6:	88bb      	ldrh	r3, [r7, #4]
 8005ae8:	3303      	adds	r3, #3
 8005aea:	089b      	lsrs	r3, r3, #2
 8005aec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005aee:	2300      	movs	r3, #0
 8005af0:	61bb      	str	r3, [r7, #24]
 8005af2:	e018      	b.n	8005b26 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005af4:	79fb      	ldrb	r3, [r7, #7]
 8005af6:	031a      	lsls	r2, r3, #12
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b00:	461a      	mov	r2, r3
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	3301      	adds	r3, #1
 8005b12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	3301      	adds	r3, #1
 8005b18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	3301      	adds	r3, #1
 8005b24:	61bb      	str	r3, [r7, #24]
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d3e2      	bcc.n	8005af4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3724      	adds	r7, #36	@ 0x24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b08b      	sub	sp, #44	@ 0x2c
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	4613      	mov	r3, r2
 8005b48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b52:	88fb      	ldrh	r3, [r7, #6]
 8005b54:	089b      	lsrs	r3, r3, #2
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b5a:	88fb      	ldrh	r3, [r7, #6]
 8005b5c:	f003 0303 	and.w	r3, r3, #3
 8005b60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b62:	2300      	movs	r3, #0
 8005b64:	623b      	str	r3, [r7, #32]
 8005b66:	e014      	b.n	8005b92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b72:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b76:	3301      	adds	r3, #1
 8005b78:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b82:	3301      	adds	r3, #1
 8005b84:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b88:	3301      	adds	r3, #1
 8005b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	623b      	str	r3, [r7, #32]
 8005b92:	6a3a      	ldr	r2, [r7, #32]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d3e6      	bcc.n	8005b68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b9a:	8bfb      	ldrh	r3, [r7, #30]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01e      	beq.n	8005bde <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005baa:	461a      	mov	r2, r3
 8005bac:	f107 0310 	add.w	r3, r7, #16
 8005bb0:	6812      	ldr	r2, [r2, #0]
 8005bb2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc4:	701a      	strb	r2, [r3, #0]
      i++;
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	623b      	str	r3, [r7, #32]
      pDest++;
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bce:	3301      	adds	r3, #1
 8005bd0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005bd2:	8bfb      	ldrh	r3, [r7, #30]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005bd8:	8bfb      	ldrh	r3, [r7, #30]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1ea      	bne.n	8005bb4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	372c      	adds	r7, #44	@ 0x2c
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	785b      	ldrb	r3, [r3, #1]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d12c      	bne.n	8005c62 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	db12      	blt.n	8005c40 <USB_EPSetStall+0x54>
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00f      	beq.n	8005c40 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c3a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c3e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	0151      	lsls	r1, r2, #5
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	440a      	add	r2, r1
 8005c56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005c5e:	6013      	str	r3, [r2, #0]
 8005c60:	e02b      	b.n	8005cba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	db12      	blt.n	8005c9a <USB_EPSetStall+0xae>
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00f      	beq.n	8005c9a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	0151      	lsls	r1, r2, #5
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	440a      	add	r2, r1
 8005c90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c94:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c98:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005cb8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	785b      	ldrb	r3, [r3, #1]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d128      	bne.n	8005d36 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cfe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	791b      	ldrb	r3, [r3, #4]
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d003      	beq.n	8005d14 <USB_EPClearStall+0x4c>
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	791b      	ldrb	r3, [r3, #4]
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d138      	bne.n	8005d86 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	0151      	lsls	r1, r2, #5
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	440a      	add	r2, r1
 8005d2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	e027      	b.n	8005d86 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	0151      	lsls	r1, r2, #5
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	440a      	add	r2, r1
 8005d4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	791b      	ldrb	r3, [r3, #4]
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	d003      	beq.n	8005d66 <USB_EPClearStall+0x9e>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	791b      	ldrb	r3, [r3, #4]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d10f      	bne.n	8005d86 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d84:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005db2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005db6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	78fb      	ldrb	r3, [r7, #3]
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005dc8:	68f9      	ldr	r1, [r7, #12]
 8005dca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005dfa:	f023 0303 	bic.w	r3, r3, #3
 8005dfe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e0e:	f023 0302 	bic.w	r3, r3, #2
 8005e12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005e3c:	f023 0303 	bic.w	r3, r3, #3
 8005e40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e50:	f043 0302 	orr.w	r3, r3, #2
 8005e54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b085      	sub	sp, #20
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	0c1b      	lsrs	r3, r3, #16
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b085      	sub	sp, #20
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	b29b      	uxth	r3, r3
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b085      	sub	sp, #20
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	460b      	mov	r3, r1
 8005efc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f02:	78fb      	ldrb	r3, [r7, #3]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f20:	68bb      	ldr	r3, [r7, #8]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b087      	sub	sp, #28
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	460b      	mov	r3, r1
 8005f38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f50:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005f52:	78fb      	ldrb	r3, [r7, #3]
 8005f54:	f003 030f 	and.w	r3, r3, #15
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f5e:	01db      	lsls	r3, r3, #7
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	f003 0301 	and.w	r3, r3, #1
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b085      	sub	sp, #20
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fc0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005fc4:	f023 0307 	bic.w	r3, r3, #7
 8005fc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	607a      	str	r2, [r7, #4]
 8005ff8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	333c      	adds	r3, #60	@ 0x3c
 8006002:	3304      	adds	r3, #4
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	4a26      	ldr	r2, [pc, #152]	@ (80060a4 <USB_EP0_OutStart+0xb8>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d90a      	bls.n	8006026 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800601c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006020:	d101      	bne.n	8006026 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	e037      	b.n	8006096 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800602c:	461a      	mov	r2, r3
 800602e:	2300      	movs	r3, #0
 8006030:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006040:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006044:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006054:	f043 0318 	orr.w	r3, r3, #24
 8006058:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006068:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800606c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800606e:	7afb      	ldrb	r3, [r7, #11]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d10f      	bne.n	8006094 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800607a:	461a      	mov	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800608e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006092:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	4f54300a 	.word	0x4f54300a

080060a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	3301      	adds	r3, #1
 80060b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060c0:	d901      	bls.n	80060c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e01b      	b.n	80060fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	daf2      	bge.n	80060b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	f043 0201 	orr.w	r2, r3, #1
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	3301      	adds	r3, #1
 80060e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060ea:	d901      	bls.n	80060f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e006      	b.n	80060fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d0f0      	beq.n	80060de <USB_CoreReset+0x36>

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
	...

0800610c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	460b      	mov	r3, r1
 8006116:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006118:	2018      	movs	r0, #24
 800611a:	f002 fb17 	bl	800874c <USBD_static_malloc>
 800611e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d109      	bne.n	800613a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	32b0      	adds	r2, #176	@ 0xb0
 8006130:	2100      	movs	r1, #0
 8006132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006136:	2302      	movs	r3, #2
 8006138:	e08a      	b.n	8006250 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	32b0      	adds	r2, #176	@ 0xb0
 8006144:	68f9      	ldr	r1, [r7, #12]
 8006146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	32b0      	adds	r2, #176	@ 0xb0
 8006154:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	7c1b      	ldrb	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d11b      	bne.n	800619e <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006166:	4b3c      	ldr	r3, [pc, #240]	@ (8006258 <USBD_CUSTOM_HID_Init+0x14c>)
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	f003 020f 	and.w	r2, r3, #15
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	440b      	add	r3, r1
 800617a:	3326      	adds	r3, #38	@ 0x26
 800617c:	2205      	movs	r2, #5
 800617e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006180:	4b36      	ldr	r3, [pc, #216]	@ (800625c <USBD_CUSTOM_HID_Init+0x150>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	f003 020f 	and.w	r2, r3, #15
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	4613      	mov	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	440b      	add	r3, r1
 8006194:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8006198:	2205      	movs	r2, #5
 800619a:	801a      	strh	r2, [r3, #0]
 800619c:	e01a      	b.n	80061d4 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800619e:	4b2e      	ldr	r3, [pc, #184]	@ (8006258 <USBD_CUSTOM_HID_Init+0x14c>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	f003 020f 	and.w	r2, r3, #15
 80061a6:	6879      	ldr	r1, [r7, #4]
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	3326      	adds	r3, #38	@ 0x26
 80061b4:	2205      	movs	r2, #5
 80061b6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80061b8:	4b28      	ldr	r3, [pc, #160]	@ (800625c <USBD_CUSTOM_HID_Init+0x150>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	f003 020f 	and.w	r2, r3, #15
 80061c0:	6879      	ldr	r1, [r7, #4]
 80061c2:	4613      	mov	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	440b      	add	r3, r1
 80061cc:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80061d0:	2205      	movs	r2, #5
 80061d2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80061d4:	4b20      	ldr	r3, [pc, #128]	@ (8006258 <USBD_CUSTOM_HID_Init+0x14c>)
 80061d6:	7819      	ldrb	r1, [r3, #0]
 80061d8:	2302      	movs	r3, #2
 80061da:	2203      	movs	r2, #3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f002 f9a4 	bl	800852a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80061e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006258 <USBD_CUSTOM_HID_Init+0x14c>)
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	f003 020f 	and.w	r2, r3, #15
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	440b      	add	r3, r1
 80061f6:	3324      	adds	r3, #36	@ 0x24
 80061f8:	2201      	movs	r2, #1
 80061fa:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80061fc:	4b17      	ldr	r3, [pc, #92]	@ (800625c <USBD_CUSTOM_HID_Init+0x150>)
 80061fe:	7819      	ldrb	r1, [r3, #0]
 8006200:	2302      	movs	r3, #2
 8006202:	2203      	movs	r2, #3
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f002 f990 	bl	800852a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800620a:	4b14      	ldr	r3, [pc, #80]	@ (800625c <USBD_CUSTOM_HID_Init+0x150>)
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	f003 020f 	and.w	r2, r3, #15
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	4613      	mov	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	440b      	add	r3, r1
 800621e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006222:	2201      	movs	r2, #1
 8006224:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	33b0      	adds	r3, #176	@ 0xb0
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006240:	4b06      	ldr	r3, [pc, #24]	@ (800625c <USBD_CUSTOM_HID_Init+0x150>)
 8006242:	7819      	ldrb	r1, [r3, #0]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	2302      	movs	r3, #2
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f002 fa5d 	bl	8008708 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	2000008a 	.word	0x2000008a
 800625c:	2000008b 	.word	0x2000008b

08006260 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800626c:	4b37      	ldr	r3, [pc, #220]	@ (800634c <USBD_CUSTOM_HID_DeInit+0xec>)
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	4619      	mov	r1, r3
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f002 f97f 	bl	8008576 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006278:	4b34      	ldr	r3, [pc, #208]	@ (800634c <USBD_CUSTOM_HID_DeInit+0xec>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	f003 020f 	and.w	r2, r3, #15
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	4613      	mov	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	440b      	add	r3, r1
 800628c:	3324      	adds	r3, #36	@ 0x24
 800628e:	2200      	movs	r2, #0
 8006290:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8006292:	4b2e      	ldr	r3, [pc, #184]	@ (800634c <USBD_CUSTOM_HID_DeInit+0xec>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	f003 020f 	and.w	r2, r3, #15
 800629a:	6879      	ldr	r1, [r7, #4]
 800629c:	4613      	mov	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	440b      	add	r3, r1
 80062a6:	3326      	adds	r3, #38	@ 0x26
 80062a8:	2200      	movs	r2, #0
 80062aa:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80062ac:	4b28      	ldr	r3, [pc, #160]	@ (8006350 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	4619      	mov	r1, r3
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f002 f95f 	bl	8008576 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80062b8:	4b25      	ldr	r3, [pc, #148]	@ (8006350 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	f003 020f 	and.w	r2, r3, #15
 80062c0:	6879      	ldr	r1, [r7, #4]
 80062c2:	4613      	mov	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	440b      	add	r3, r1
 80062cc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80062d0:	2200      	movs	r2, #0
 80062d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80062d4:	4b1e      	ldr	r3, [pc, #120]	@ (8006350 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	f003 020f 	and.w	r2, r3, #15
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	440b      	add	r3, r1
 80062e8:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80062ec:	2200      	movs	r2, #0
 80062ee:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	32b0      	adds	r2, #176	@ 0xb0
 80062fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d01f      	beq.n	8006342 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	33b0      	adds	r3, #176	@ 0xb0
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	32b0      	adds	r2, #176	@ 0xb0
 8006320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006324:	4618      	mov	r0, r3
 8006326:	f002 fa1f 	bl	8008768 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	32b0      	adds	r2, #176	@ 0xb0
 8006334:	2100      	movs	r1, #0
 8006336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	2000008a 	.word	0x2000008a
 8006350:	2000008b 	.word	0x2000008b

08006354 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	32b0      	adds	r2, #176	@ 0xb0
 8006368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800636c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	81fb      	strh	r3, [r7, #14]
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8006376:	2300      	movs	r3, #0
 8006378:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <USBD_CUSTOM_HID_Setup+0x38>
  {
    return (uint8_t)USBD_FAIL;
 8006388:	2303      	movs	r3, #3
 800638a:	e13c      	b.n	8006606 <USBD_CUSTOM_HID_Setup+0x2b2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 808f 	beq.w	80064b8 <USBD_CUSTOM_HID_Setup+0x164>
 800639a:	2b20      	cmp	r3, #32
 800639c:	f040 812b 	bne.w	80065f6 <USBD_CUSTOM_HID_Setup+0x2a2>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	785b      	ldrb	r3, [r3, #1]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	2b0a      	cmp	r3, #10
 80063a8:	d87e      	bhi.n	80064a8 <USBD_CUSTOM_HID_Setup+0x154>
 80063aa:	a201      	add	r2, pc, #4	@ (adr r2, 80063b0 <USBD_CUSTOM_HID_Setup+0x5c>)
 80063ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b0:	0800643b 	.word	0x0800643b
 80063b4:	0800640d 	.word	0x0800640d
 80063b8:	080063eb 	.word	0x080063eb
 80063bc:	080064a9 	.word	0x080064a9
 80063c0:	080064a9 	.word	0x080064a9
 80063c4:	080064a9 	.word	0x080064a9
 80063c8:	080064a9 	.word	0x080064a9
 80063cc:	080064a9 	.word	0x080064a9
 80063d0:	0800641d 	.word	0x0800641d
 80063d4:	080063fb 	.word	0x080063fb
 80063d8:	080063dd 	.word	0x080063dd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	885b      	ldrh	r3, [r3, #2]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	461a      	mov	r2, r3
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	605a      	str	r2, [r3, #4]
          break;
 80063e8:	e065      	b.n	80064b6 <USBD_CUSTOM_HID_Setup+0x162>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	3304      	adds	r3, #4
 80063ee:	2201      	movs	r2, #1
 80063f0:	4619      	mov	r1, r3
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f001 fcc6 	bl	8007d84 <USBD_CtlSendData>
          break;
 80063f8:	e05d      	b.n	80064b6 <USBD_CUSTOM_HID_Setup+0x162>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	885b      	ldrh	r3, [r3, #2]
 80063fe:	0a1b      	lsrs	r3, r3, #8
 8006400:	b29b      	uxth	r3, r3
 8006402:	b2db      	uxtb	r3, r3
 8006404:	461a      	mov	r2, r3
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	609a      	str	r2, [r3, #8]
          break;
 800640a:	e054      	b.n	80064b6 <USBD_CUSTOM_HID_Setup+0x162>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	3308      	adds	r3, #8
 8006410:	2201      	movs	r2, #1
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f001 fcb5 	bl	8007d84 <USBD_CtlSendData>
          break;
 800641a:	e04c      	b.n	80064b6 <USBD_CUSTOM_HID_Setup+0x162>
                                                                                            req->wLength,
																							pdev);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	2201      	movs	r2, #1
 8006420:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006422:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	88db      	ldrh	r3, [r3, #6]
 8006428:	2b02      	cmp	r3, #2
 800642a:	bf28      	it	cs
 800642c:	2302      	movcs	r3, #2
 800642e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006430:	461a      	mov	r2, r3
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f001 fcd2 	bl	8007ddc <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8006438:	e03d      	b.n	80064b6 <USBD_CUSTOM_HID_Setup+0x162>
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
        case CUSTOM_HID_REQ_GET_REPORT:
          if (((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->GetReport != NULL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	33b0      	adds	r3, #176	@ 0xb0
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d011      	beq.n	8006474 <USBD_CUSTOM_HID_Setup+0x120>
          {
            ReportLength = req->wLength;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	88db      	ldrh	r3, [r3, #6]
 8006454:	81fb      	strh	r3, [r7, #14]

            /* Get report data buffer */
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->GetReport(req, &ReportLength, pdev);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	33b0      	adds	r3, #176	@ 0xb0
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	f107 010e 	add.w	r1, r7, #14
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6838      	ldr	r0, [r7, #0]
 8006470:	4798      	blx	r3
 8006472:	61b8      	str	r0, [r7, #24]
          }

          if ((pbuf != NULL) && (ReportLength != 0U))
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d011      	beq.n	800649e <USBD_CUSTOM_HID_Setup+0x14a>
 800647a:	89fb      	ldrh	r3, [r7, #14]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00e      	beq.n	800649e <USBD_CUSTOM_HID_Setup+0x14a>
          {
            len = MIN(ReportLength, req->wLength);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	88da      	ldrh	r2, [r3, #6]
 8006484:	89fb      	ldrh	r3, [r7, #14]
 8006486:	4293      	cmp	r3, r2
 8006488:	bf28      	it	cs
 800648a:	4613      	movcs	r3, r2
 800648c:	83fb      	strh	r3, [r7, #30]

            /* Send the report data over EP0 */
            (void)USBD_CtlSendData(pdev, pbuf, len);
 800648e:	8bfb      	ldrh	r3, [r7, #30]
 8006490:	461a      	mov	r2, r3
 8006492:	69b9      	ldr	r1, [r7, #24]
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f001 fc75 	bl	8007d84 <USBD_CtlSendData>
 800649a:	bf00      	nop
#else
            /* Stall EP0 if no data available */
            USBD_CtlError(pdev, req);
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
          }
          break;
 800649c:	e00b      	b.n	80064b6 <USBD_CUSTOM_HID_Setup+0x162>
            USBD_CtlError(pdev, req);
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f001 fbf2 	bl	8007c8a <USBD_CtlError>
          break;
 80064a6:	e006      	b.n	80064b6 <USBD_CUSTOM_HID_Setup+0x162>
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 80064a8:	6839      	ldr	r1, [r7, #0]
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f001 fbed 	bl	8007c8a <USBD_CtlError>
          ret = USBD_FAIL;
 80064b0:	2303      	movs	r3, #3
 80064b2:	75fb      	strb	r3, [r7, #23]
          break;
 80064b4:	bf00      	nop
      }
      break;
 80064b6:	e0a5      	b.n	8006604 <USBD_CUSTOM_HID_Setup+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	785b      	ldrb	r3, [r3, #1]
 80064bc:	2b0b      	cmp	r3, #11
 80064be:	f200 8091 	bhi.w	80065e4 <USBD_CUSTOM_HID_Setup+0x290>
 80064c2:	a201      	add	r2, pc, #4	@ (adr r2, 80064c8 <USBD_CUSTOM_HID_Setup+0x174>)
 80064c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c8:	080064f9 	.word	0x080064f9
 80064cc:	080065f3 	.word	0x080065f3
 80064d0:	080065e5 	.word	0x080065e5
 80064d4:	080065e5 	.word	0x080065e5
 80064d8:	080065e5 	.word	0x080065e5
 80064dc:	080065e5 	.word	0x080065e5
 80064e0:	08006523 	.word	0x08006523
 80064e4:	080065e5 	.word	0x080065e5
 80064e8:	080065e5 	.word	0x080065e5
 80064ec:	080065e5 	.word	0x080065e5
 80064f0:	08006593 	.word	0x08006593
 80064f4:	080065bd 	.word	0x080065bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b03      	cmp	r3, #3
 8006502:	d107      	bne.n	8006514 <USBD_CUSTOM_HID_Setup+0x1c0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006504:	f107 030c 	add.w	r3, r7, #12
 8006508:	2202      	movs	r2, #2
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f001 fc39 	bl	8007d84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006512:	e06f      	b.n	80065f4 <USBD_CUSTOM_HID_Setup+0x2a0>
            USBD_CtlError(pdev, req);
 8006514:	6839      	ldr	r1, [r7, #0]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f001 fbb7 	bl	8007c8a <USBD_CtlError>
            ret = USBD_FAIL;
 800651c:	2303      	movs	r3, #3
 800651e:	75fb      	strb	r3, [r7, #23]
          break;
 8006520:	e068      	b.n	80065f4 <USBD_CUSTOM_HID_Setup+0x2a0>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	885b      	ldrh	r3, [r3, #2]
 8006526:	0a1b      	lsrs	r3, r3, #8
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b22      	cmp	r3, #34	@ 0x22
 800652c:	d112      	bne.n	8006554 <USBD_CUSTOM_HID_Setup+0x200>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	88db      	ldrh	r3, [r3, #6]
 8006532:	f240 5244 	movw	r2, #1348	@ 0x544
 8006536:	4293      	cmp	r3, r2
 8006538:	bf28      	it	cs
 800653a:	4613      	movcs	r3, r2
 800653c:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	33b0      	adds	r3, #176	@ 0xb0
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	61bb      	str	r3, [r7, #24]
 8006552:	e00d      	b.n	8006570 <USBD_CUSTOM_HID_Setup+0x21c>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	885b      	ldrh	r3, [r3, #2]
 8006558:	0a1b      	lsrs	r3, r3, #8
 800655a:	b29b      	uxth	r3, r3
 800655c:	2b21      	cmp	r3, #33	@ 0x21
 800655e:	d107      	bne.n	8006570 <USBD_CUSTOM_HID_Setup+0x21c>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006560:	4b2b      	ldr	r3, [pc, #172]	@ (8006610 <USBD_CUSTOM_HID_Setup+0x2bc>)
 8006562:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	88db      	ldrh	r3, [r3, #6]
 8006568:	2b09      	cmp	r3, #9
 800656a:	bf28      	it	cs
 800656c:	2309      	movcs	r3, #9
 800656e:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d006      	beq.n	8006584 <USBD_CUSTOM_HID_Setup+0x230>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 8006576:	8bfb      	ldrh	r3, [r7, #30]
 8006578:	461a      	mov	r2, r3
 800657a:	69b9      	ldr	r1, [r7, #24]
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 fc01 	bl	8007d84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006582:	e037      	b.n	80065f4 <USBD_CUSTOM_HID_Setup+0x2a0>
            USBD_CtlError(pdev, req);
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f001 fb7f 	bl	8007c8a <USBD_CtlError>
            ret = USBD_FAIL;
 800658c:	2303      	movs	r3, #3
 800658e:	75fb      	strb	r3, [r7, #23]
          break;
 8006590:	e030      	b.n	80065f4 <USBD_CUSTOM_HID_Setup+0x2a0>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b03      	cmp	r3, #3
 800659c:	d107      	bne.n	80065ae <USBD_CUSTOM_HID_Setup+0x25a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	330c      	adds	r3, #12
 80065a2:	2201      	movs	r2, #1
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f001 fbec 	bl	8007d84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065ac:	e022      	b.n	80065f4 <USBD_CUSTOM_HID_Setup+0x2a0>
            USBD_CtlError(pdev, req);
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f001 fb6a 	bl	8007c8a <USBD_CtlError>
            ret = USBD_FAIL;
 80065b6:	2303      	movs	r3, #3
 80065b8:	75fb      	strb	r3, [r7, #23]
          break;
 80065ba:	e01b      	b.n	80065f4 <USBD_CUSTOM_HID_Setup+0x2a0>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	d106      	bne.n	80065d6 <USBD_CUSTOM_HID_Setup+0x282>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	885b      	ldrh	r3, [r3, #2]
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	461a      	mov	r2, r3
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065d4:	e00e      	b.n	80065f4 <USBD_CUSTOM_HID_Setup+0x2a0>
            USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 fb56 	bl	8007c8a <USBD_CtlError>
            ret = USBD_FAIL;
 80065de:	2303      	movs	r3, #3
 80065e0:	75fb      	strb	r3, [r7, #23]
          break;
 80065e2:	e007      	b.n	80065f4 <USBD_CUSTOM_HID_Setup+0x2a0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f001 fb4f 	bl	8007c8a <USBD_CtlError>
          ret = USBD_FAIL;
 80065ec:	2303      	movs	r3, #3
 80065ee:	75fb      	strb	r3, [r7, #23]
          break;
 80065f0:	e000      	b.n	80065f4 <USBD_CUSTOM_HID_Setup+0x2a0>
          break;
 80065f2:	bf00      	nop
      }
      break;
 80065f4:	e006      	b.n	8006604 <USBD_CUSTOM_HID_Setup+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 fb46 	bl	8007c8a <USBD_CtlError>
      ret = USBD_FAIL;
 80065fe:	2303      	movs	r3, #3
 8006600:	75fb      	strb	r3, [r7, #23]
      break;
 8006602:	bf00      	nop
  }
  return (uint8_t)ret;
 8006604:	7dfb      	ldrb	r3, [r7, #23]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3720      	adds	r7, #32
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20000074 	.word	0x20000074

08006614 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800661c:	2181      	movs	r1, #129	@ 0x81
 800661e:	4815      	ldr	r0, [pc, #84]	@ (8006674 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006620:	f000 fcfd 	bl	800701e <USBD_GetEpDesc>
 8006624:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006626:	2101      	movs	r1, #1
 8006628:	4812      	ldr	r0, [pc, #72]	@ (8006674 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800662a:	f000 fcf8 	bl	800701e <USBD_GetEpDesc>
 800662e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d009      	beq.n	800664a <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f042 0202 	orr.w	r2, r2, #2
 800663e:	711a      	strb	r2, [r3, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2205      	movs	r2, #5
 8006648:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d009      	beq.n	8006664 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2200      	movs	r2, #0
 8006654:	f042 0202 	orr.w	r2, r2, #2
 8006658:	711a      	strb	r2, [r3, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2205      	movs	r2, #5
 8006662:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2229      	movs	r2, #41	@ 0x29
 8006668:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800666a:	4b02      	ldr	r3, [pc, #8]	@ (8006674 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	20000048 	.word	0x20000048

08006678 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006680:	2181      	movs	r1, #129	@ 0x81
 8006682:	4815      	ldr	r0, [pc, #84]	@ (80066d8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006684:	f000 fccb 	bl	800701e <USBD_GetEpDesc>
 8006688:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800668a:	2101      	movs	r1, #1
 800668c:	4812      	ldr	r0, [pc, #72]	@ (80066d8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800668e:	f000 fcc6 	bl	800701e <USBD_GetEpDesc>
 8006692:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d009      	beq.n	80066ae <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f042 0202 	orr.w	r2, r2, #2
 80066a2:	711a      	strb	r2, [r3, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2205      	movs	r2, #5
 80066ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d009      	beq.n	80066c8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f042 0202 	orr.w	r2, r2, #2
 80066bc:	711a      	strb	r2, [r3, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2205      	movs	r2, #5
 80066c6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2229      	movs	r2, #41	@ 0x29
 80066cc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80066ce:	4b02      	ldr	r3, [pc, #8]	@ (80066d8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	20000048 	.word	0x20000048

080066dc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80066e4:	2181      	movs	r1, #129	@ 0x81
 80066e6:	4815      	ldr	r0, [pc, #84]	@ (800673c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80066e8:	f000 fc99 	bl	800701e <USBD_GetEpDesc>
 80066ec:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80066ee:	2101      	movs	r1, #1
 80066f0:	4812      	ldr	r0, [pc, #72]	@ (800673c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80066f2:	f000 fc94 	bl	800701e <USBD_GetEpDesc>
 80066f6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d009      	beq.n	8006712 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f042 0202 	orr.w	r2, r2, #2
 8006706:	711a      	strb	r2, [r3, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2205      	movs	r2, #5
 8006710:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d009      	beq.n	800672c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2200      	movs	r2, #0
 800671c:	f042 0202 	orr.w	r2, r2, #2
 8006720:	711a      	strb	r2, [r3, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2205      	movs	r2, #5
 800672a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2229      	movs	r2, #41	@ 0x29
 8006730:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006732:	4b02      	ldr	r3, [pc, #8]	@ (800673c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	20000048 	.word	0x20000048

08006740 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	460b      	mov	r3, r1
 800674a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	32b0      	adds	r2, #176	@ 0xb0
 8006756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675a:	2200      	movs	r2, #0
 800675c:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	32b0      	adds	r2, #176	@ 0xb0
 8006782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800678a:	2303      	movs	r3, #3
 800678c:	e01d      	b.n	80067ca <USBD_CUSTOM_HID_DataOut+0x5e>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	32b0      	adds	r2, #176	@ 0xb0
 8006798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800679c:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	33b0      	adds	r3, #176	@ 0xb0
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	7810      	ldrb	r0, [r2, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	7851      	ldrb	r1, [r2, #1]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	4798      	blx	r3
                                                                           hhid->Report_buf[1],
																		   pdev);
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,  CUSTOM_HID_EPOUT_SIZE);
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	2302      	movs	r3, #2
 80067c0:	2101      	movs	r1, #1
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f001 ffa0 	bl	8008708 <USBD_LL_PrepareReceive>

  return (uint8_t)USBD_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b084      	sub	sp, #16
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	32b0      	adds	r2, #176	@ 0xb0
 80067e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e8:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e016      	b.n	8006822 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d111      	bne.n	8006820 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	33b0      	adds	r3, #176	@ 0xb0
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	7810      	ldrb	r0, [r2, #0]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	7851      	ldrb	r1, [r2, #1]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	4798      	blx	r3
                                                                             hhid->Report_buf[1],
																			 pdev);
    hhid->IsReportAvailable = 0U;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	220a      	movs	r2, #10
 8006838:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800683a:	4b03      	ldr	r3, [pc, #12]	@ (8006848 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800683c:	4618      	mov	r0, r3
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	20000080 	.word	0x20000080

0800684c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d101      	bne.n	8006860 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800685c:	2303      	movs	r3, #3
 800685e:	e009      	b.n	8006874 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	33b0      	adds	r3, #176	@ 0xb0
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	4613      	mov	r3, r2
 800688c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006894:	2303      	movs	r3, #3
 8006896:	e01f      	b.n	80068d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	79fa      	ldrb	r2, [r7, #7]
 80068ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f001 fdc5 	bl	800845c <USBD_LL_Init>
 80068d2:	4603      	mov	r3, r0
 80068d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80068d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3718      	adds	r7, #24
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e025      	b.n	8006944 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	32ae      	adds	r2, #174	@ 0xae
 800690a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00f      	beq.n	8006934 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	32ae      	adds	r2, #174	@ 0xae
 800691e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006924:	f107 020e 	add.w	r2, r7, #14
 8006928:	4610      	mov	r0, r2
 800692a:	4798      	blx	r3
 800692c:	4602      	mov	r2, r0
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f001 fdcd 	bl	80084f4 <USBD_LL_Start>
 800695a:	4603      	mov	r3, r0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800696c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800696e:	4618      	mov	r0, r3
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b084      	sub	sp, #16
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	460b      	mov	r3, r1
 8006984:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006990:	2b00      	cmp	r3, #0
 8006992:	d009      	beq.n	80069a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	78fa      	ldrb	r2, [r7, #3]
 800699e:	4611      	mov	r1, r2
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	4798      	blx	r3
 80069a4:	4603      	mov	r3, r0
 80069a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b084      	sub	sp, #16
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	460b      	mov	r3, r1
 80069bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	78fa      	ldrb	r2, [r7, #3]
 80069cc:	4611      	mov	r1, r2
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	4798      	blx	r3
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80069d8:	2303      	movs	r3, #3
 80069da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f001 f90c 	bl	8007c16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006a1a:	f003 031f 	and.w	r3, r3, #31
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d01a      	beq.n	8006a58 <USBD_LL_SetupStage+0x72>
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d822      	bhi.n	8006a6c <USBD_LL_SetupStage+0x86>
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <USBD_LL_SetupStage+0x4a>
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d00a      	beq.n	8006a44 <USBD_LL_SetupStage+0x5e>
 8006a2e:	e01d      	b.n	8006a6c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fb63 	bl	8007104 <USBD_StdDevReq>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	73fb      	strb	r3, [r7, #15]
      break;
 8006a42:	e020      	b.n	8006a86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fbcb 	bl	80071e8 <USBD_StdItfReq>
 8006a52:	4603      	mov	r3, r0
 8006a54:	73fb      	strb	r3, [r7, #15]
      break;
 8006a56:	e016      	b.n	8006a86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fc2d 	bl	80072c0 <USBD_StdEPReq>
 8006a66:	4603      	mov	r3, r0
 8006a68:	73fb      	strb	r3, [r7, #15]
      break;
 8006a6a:	e00c      	b.n	8006a86 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006a72:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f001 fd9a 	bl	80085b4 <USBD_LL_StallEP>
 8006a80:	4603      	mov	r3, r0
 8006a82:	73fb      	strb	r3, [r7, #15]
      break;
 8006a84:	bf00      	nop
  }

  return ret;
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	460b      	mov	r3, r1
 8006a9a:	607a      	str	r2, [r7, #4]
 8006a9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006aa2:	7afb      	ldrb	r3, [r7, #11]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d16e      	bne.n	8006b86 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006aae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	f040 8098 	bne.w	8006bec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d913      	bls.n	8006af0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	1ad2      	subs	r2, r2, r3
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	68da      	ldr	r2, [r3, #12]
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	bf28      	it	cs
 8006ae2:	4613      	movcs	r3, r2
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f001 f994 	bl	8007e16 <USBD_CtlContinueRx>
 8006aee:	e07d      	b.n	8006bec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006af6:	f003 031f 	and.w	r3, r3, #31
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d014      	beq.n	8006b28 <USBD_LL_DataOutStage+0x98>
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d81d      	bhi.n	8006b3e <USBD_LL_DataOutStage+0xae>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d002      	beq.n	8006b0c <USBD_LL_DataOutStage+0x7c>
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d003      	beq.n	8006b12 <USBD_LL_DataOutStage+0x82>
 8006b0a:	e018      	b.n	8006b3e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	75bb      	strb	r3, [r7, #22]
            break;
 8006b10:	e018      	b.n	8006b44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 fa64 	bl	8006fea <USBD_CoreFindIF>
 8006b22:	4603      	mov	r3, r0
 8006b24:	75bb      	strb	r3, [r7, #22]
            break;
 8006b26:	e00d      	b.n	8006b44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	4619      	mov	r1, r3
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 fa66 	bl	8007004 <USBD_CoreFindEP>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	75bb      	strb	r3, [r7, #22]
            break;
 8006b3c:	e002      	b.n	8006b44 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	75bb      	strb	r3, [r7, #22]
            break;
 8006b42:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006b44:	7dbb      	ldrb	r3, [r7, #22]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d119      	bne.n	8006b7e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d113      	bne.n	8006b7e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006b56:	7dba      	ldrb	r2, [r7, #22]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	32ae      	adds	r2, #174	@ 0xae
 8006b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00b      	beq.n	8006b7e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006b66:	7dba      	ldrb	r2, [r7, #22]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006b6e:	7dba      	ldrb	r2, [r7, #22]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	32ae      	adds	r2, #174	@ 0xae
 8006b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f001 f95a 	bl	8007e38 <USBD_CtlSendStatus>
 8006b84:	e032      	b.n	8006bec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006b86:	7afb      	ldrb	r3, [r7, #11]
 8006b88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	4619      	mov	r1, r3
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 fa37 	bl	8007004 <USBD_CoreFindEP>
 8006b96:	4603      	mov	r3, r0
 8006b98:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b9a:	7dbb      	ldrb	r3, [r7, #22]
 8006b9c:	2bff      	cmp	r3, #255	@ 0xff
 8006b9e:	d025      	beq.n	8006bec <USBD_LL_DataOutStage+0x15c>
 8006ba0:	7dbb      	ldrb	r3, [r7, #22]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d122      	bne.n	8006bec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	d117      	bne.n	8006be2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006bb2:	7dba      	ldrb	r2, [r7, #22]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	32ae      	adds	r2, #174	@ 0xae
 8006bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00f      	beq.n	8006be2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006bc2:	7dba      	ldrb	r2, [r7, #22]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006bca:	7dba      	ldrb	r2, [r7, #22]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	32ae      	adds	r2, #174	@ 0xae
 8006bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	7afa      	ldrb	r2, [r7, #11]
 8006bd8:	4611      	mov	r1, r2
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	4798      	blx	r3
 8006bde:	4603      	mov	r3, r0
 8006be0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006be2:	7dfb      	ldrb	r3, [r7, #23]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	e000      	b.n	8006bee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3718      	adds	r7, #24
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b086      	sub	sp, #24
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	607a      	str	r2, [r7, #4]
 8006c02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006c04:	7afb      	ldrb	r3, [r7, #11]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d16f      	bne.n	8006cea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	3314      	adds	r3, #20
 8006c0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d15a      	bne.n	8006cd0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	689a      	ldr	r2, [r3, #8]
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d914      	bls.n	8006c50 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	689a      	ldr	r2, [r3, #8]
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	1ad2      	subs	r2, r2, r3
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	6879      	ldr	r1, [r7, #4]
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f001 f8bc 	bl	8007dba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c42:	2300      	movs	r3, #0
 8006c44:	2200      	movs	r2, #0
 8006c46:	2100      	movs	r1, #0
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f001 fd5d 	bl	8008708 <USBD_LL_PrepareReceive>
 8006c4e:	e03f      	b.n	8006cd0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	68da      	ldr	r2, [r3, #12]
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d11c      	bne.n	8006c96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d316      	bcc.n	8006c96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d20f      	bcs.n	8006c96 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c76:	2200      	movs	r2, #0
 8006c78:	2100      	movs	r1, #0
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f001 f89d 	bl	8007dba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c88:	2300      	movs	r3, #0
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f001 fd3a 	bl	8008708 <USBD_LL_PrepareReceive>
 8006c94:	e01c      	b.n	8006cd0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d10f      	bne.n	8006cc2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d009      	beq.n	8006cc2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cc2:	2180      	movs	r1, #128	@ 0x80
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f001 fc75 	bl	80085b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f001 f8c7 	bl	8007e5e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d03a      	beq.n	8006d50 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f7ff fe42 	bl	8006964 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006ce8:	e032      	b.n	8006d50 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006cea:	7afb      	ldrb	r3, [r7, #11]
 8006cec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 f985 	bl	8007004 <USBD_CoreFindEP>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cfe:	7dfb      	ldrb	r3, [r7, #23]
 8006d00:	2bff      	cmp	r3, #255	@ 0xff
 8006d02:	d025      	beq.n	8006d50 <USBD_LL_DataInStage+0x15a>
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d122      	bne.n	8006d50 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	d11c      	bne.n	8006d50 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006d16:	7dfa      	ldrb	r2, [r7, #23]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	32ae      	adds	r2, #174	@ 0xae
 8006d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d014      	beq.n	8006d50 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006d26:	7dfa      	ldrb	r2, [r7, #23]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006d2e:	7dfa      	ldrb	r2, [r7, #23]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	32ae      	adds	r2, #174	@ 0xae
 8006d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	7afa      	ldrb	r2, [r7, #11]
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	4798      	blx	r3
 8006d42:	4603      	mov	r3, r0
 8006d44:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006d46:	7dbb      	ldrb	r3, [r7, #22]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006d4c:	7dbb      	ldrb	r3, [r7, #22]
 8006d4e:	e000      	b.n	8006d52 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d014      	beq.n	8006dc0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00e      	beq.n	8006dc0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6852      	ldr	r2, [r2, #4]
 8006dae:	b2d2      	uxtb	r2, r2
 8006db0:	4611      	mov	r1, r2
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	4798      	blx	r3
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dc0:	2340      	movs	r3, #64	@ 0x40
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f001 fbaf 	bl	800852a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2240      	movs	r2, #64	@ 0x40
 8006dd8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ddc:	2340      	movs	r3, #64	@ 0x40
 8006dde:	2200      	movs	r2, #0
 8006de0:	2180      	movs	r1, #128	@ 0x80
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f001 fba1 	bl	800852a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2240      	movs	r2, #64	@ 0x40
 8006df2:	621a      	str	r2, [r3, #32]

  return ret;
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	460b      	mov	r3, r1
 8006e08:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	78fa      	ldrb	r2, [r7, #3]
 8006e0e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b04      	cmp	r3, #4
 8006e30:	d006      	beq.n	8006e40 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2204      	movs	r2, #4
 8006e44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	d106      	bne.n	8006e78 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b082      	sub	sp, #8
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b03      	cmp	r3, #3
 8006e98:	d110      	bne.n	8006ebc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00b      	beq.n	8006ebc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eaa:	69db      	ldr	r3, [r3, #28]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d005      	beq.n	8006ebc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b082      	sub	sp, #8
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	460b      	mov	r3, r1
 8006ed0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	32ae      	adds	r2, #174	@ 0xae
 8006edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e01c      	b.n	8006f22 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d115      	bne.n	8006f20 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	32ae      	adds	r2, #174	@ 0xae
 8006efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00b      	beq.n	8006f20 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	32ae      	adds	r2, #174	@ 0xae
 8006f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	78fa      	ldrb	r2, [r7, #3]
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b082      	sub	sp, #8
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	460b      	mov	r3, r1
 8006f34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	32ae      	adds	r2, #174	@ 0xae
 8006f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e01c      	b.n	8006f86 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	d115      	bne.n	8006f84 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	32ae      	adds	r2, #174	@ 0xae
 8006f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00b      	beq.n	8006f84 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	32ae      	adds	r2, #174	@ 0xae
 8006f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7c:	78fa      	ldrb	r2, [r7, #3]
 8006f7e:	4611      	mov	r1, r2
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00e      	beq.n	8006fe0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	6852      	ldr	r2, [r2, #4]
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	4798      	blx	r3
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b083      	sub	sp, #12
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ff6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007010:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007012:	4618      	mov	r0, r3
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b086      	sub	sp, #24
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	460b      	mov	r3, r1
 8007028:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007032:	2300      	movs	r3, #0
 8007034:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	885b      	ldrh	r3, [r3, #2]
 800703a:	b29b      	uxth	r3, r3
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	7812      	ldrb	r2, [r2, #0]
 8007040:	4293      	cmp	r3, r2
 8007042:	d91f      	bls.n	8007084 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800704a:	e013      	b.n	8007074 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800704c:	f107 030a 	add.w	r3, r7, #10
 8007050:	4619      	mov	r1, r3
 8007052:	6978      	ldr	r0, [r7, #20]
 8007054:	f000 f81b 	bl	800708e <USBD_GetNextDesc>
 8007058:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	785b      	ldrb	r3, [r3, #1]
 800705e:	2b05      	cmp	r3, #5
 8007060:	d108      	bne.n	8007074 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	789b      	ldrb	r3, [r3, #2]
 800706a:	78fa      	ldrb	r2, [r7, #3]
 800706c:	429a      	cmp	r2, r3
 800706e:	d008      	beq.n	8007082 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007070:	2300      	movs	r3, #0
 8007072:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	885b      	ldrh	r3, [r3, #2]
 8007078:	b29a      	uxth	r2, r3
 800707a:	897b      	ldrh	r3, [r7, #10]
 800707c:	429a      	cmp	r2, r3
 800707e:	d8e5      	bhi.n	800704c <USBD_GetEpDesc+0x2e>
 8007080:	e000      	b.n	8007084 <USBD_GetEpDesc+0x66>
          break;
 8007082:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007084:	693b      	ldr	r3, [r7, #16]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3718      	adds	r7, #24
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800708e:	b480      	push	{r7}
 8007090:	b085      	sub	sp, #20
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	881b      	ldrh	r3, [r3, #0]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	7812      	ldrb	r2, [r2, #0]
 80070a4:	4413      	add	r3, r2
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	461a      	mov	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4413      	add	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80070b8:	68fb      	ldr	r3, [r7, #12]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b087      	sub	sp, #28
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	3301      	adds	r3, #1
 80070dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80070e4:	8a3b      	ldrh	r3, [r7, #16]
 80070e6:	021b      	lsls	r3, r3, #8
 80070e8:	b21a      	sxth	r2, r3
 80070ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	b21b      	sxth	r3, r3
 80070f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80070f4:	89fb      	ldrh	r3, [r7, #14]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	371c      	adds	r7, #28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
	...

08007104 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800711a:	2b40      	cmp	r3, #64	@ 0x40
 800711c:	d005      	beq.n	800712a <USBD_StdDevReq+0x26>
 800711e:	2b40      	cmp	r3, #64	@ 0x40
 8007120:	d857      	bhi.n	80071d2 <USBD_StdDevReq+0xce>
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00f      	beq.n	8007146 <USBD_StdDevReq+0x42>
 8007126:	2b20      	cmp	r3, #32
 8007128:	d153      	bne.n	80071d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	32ae      	adds	r2, #174	@ 0xae
 8007134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	4798      	blx	r3
 8007140:	4603      	mov	r3, r0
 8007142:	73fb      	strb	r3, [r7, #15]
      break;
 8007144:	e04a      	b.n	80071dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	785b      	ldrb	r3, [r3, #1]
 800714a:	2b09      	cmp	r3, #9
 800714c:	d83b      	bhi.n	80071c6 <USBD_StdDevReq+0xc2>
 800714e:	a201      	add	r2, pc, #4	@ (adr r2, 8007154 <USBD_StdDevReq+0x50>)
 8007150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007154:	080071a9 	.word	0x080071a9
 8007158:	080071bd 	.word	0x080071bd
 800715c:	080071c7 	.word	0x080071c7
 8007160:	080071b3 	.word	0x080071b3
 8007164:	080071c7 	.word	0x080071c7
 8007168:	08007187 	.word	0x08007187
 800716c:	0800717d 	.word	0x0800717d
 8007170:	080071c7 	.word	0x080071c7
 8007174:	0800719f 	.word	0x0800719f
 8007178:	08007191 	.word	0x08007191
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fa3c 	bl	80075fc <USBD_GetDescriptor>
          break;
 8007184:	e024      	b.n	80071d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007186:	6839      	ldr	r1, [r7, #0]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fba1 	bl	80078d0 <USBD_SetAddress>
          break;
 800718e:	e01f      	b.n	80071d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fbe0 	bl	8007958 <USBD_SetConfig>
 8007198:	4603      	mov	r3, r0
 800719a:	73fb      	strb	r3, [r7, #15]
          break;
 800719c:	e018      	b.n	80071d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fc83 	bl	8007aac <USBD_GetConfig>
          break;
 80071a6:	e013      	b.n	80071d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fcb4 	bl	8007b18 <USBD_GetStatus>
          break;
 80071b0:	e00e      	b.n	80071d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fce3 	bl	8007b80 <USBD_SetFeature>
          break;
 80071ba:	e009      	b.n	80071d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fd07 	bl	8007bd2 <USBD_ClrFeature>
          break;
 80071c4:	e004      	b.n	80071d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fd5e 	bl	8007c8a <USBD_CtlError>
          break;
 80071ce:	bf00      	nop
      }
      break;
 80071d0:	e004      	b.n	80071dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fd58 	bl	8007c8a <USBD_CtlError>
      break;
 80071da:	bf00      	nop
  }

  return ret;
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop

080071e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071fe:	2b40      	cmp	r3, #64	@ 0x40
 8007200:	d005      	beq.n	800720e <USBD_StdItfReq+0x26>
 8007202:	2b40      	cmp	r3, #64	@ 0x40
 8007204:	d852      	bhi.n	80072ac <USBD_StdItfReq+0xc4>
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <USBD_StdItfReq+0x26>
 800720a:	2b20      	cmp	r3, #32
 800720c:	d14e      	bne.n	80072ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007214:	b2db      	uxtb	r3, r3
 8007216:	3b01      	subs	r3, #1
 8007218:	2b02      	cmp	r3, #2
 800721a:	d840      	bhi.n	800729e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	889b      	ldrh	r3, [r3, #4]
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b01      	cmp	r3, #1
 8007224:	d836      	bhi.n	8007294 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	889b      	ldrh	r3, [r3, #4]
 800722a:	b2db      	uxtb	r3, r3
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7ff fedb 	bl	8006fea <USBD_CoreFindIF>
 8007234:	4603      	mov	r3, r0
 8007236:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007238:	7bbb      	ldrb	r3, [r7, #14]
 800723a:	2bff      	cmp	r3, #255	@ 0xff
 800723c:	d01d      	beq.n	800727a <USBD_StdItfReq+0x92>
 800723e:	7bbb      	ldrb	r3, [r7, #14]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d11a      	bne.n	800727a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007244:	7bba      	ldrb	r2, [r7, #14]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	32ae      	adds	r2, #174	@ 0xae
 800724a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00f      	beq.n	8007274 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007254:	7bba      	ldrb	r2, [r7, #14]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800725c:	7bba      	ldrb	r2, [r7, #14]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	32ae      	adds	r2, #174	@ 0xae
 8007262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	4798      	blx	r3
 800726e:	4603      	mov	r3, r0
 8007270:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007272:	e004      	b.n	800727e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007274:	2303      	movs	r3, #3
 8007276:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007278:	e001      	b.n	800727e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800727a:	2303      	movs	r3, #3
 800727c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	88db      	ldrh	r3, [r3, #6]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d110      	bne.n	80072a8 <USBD_StdItfReq+0xc0>
 8007286:	7bfb      	ldrb	r3, [r7, #15]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10d      	bne.n	80072a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fdd3 	bl	8007e38 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007292:	e009      	b.n	80072a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fcf7 	bl	8007c8a <USBD_CtlError>
          break;
 800729c:	e004      	b.n	80072a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fcf2 	bl	8007c8a <USBD_CtlError>
          break;
 80072a6:	e000      	b.n	80072aa <USBD_StdItfReq+0xc2>
          break;
 80072a8:	bf00      	nop
      }
      break;
 80072aa:	e004      	b.n	80072b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fceb 	bl	8007c8a <USBD_CtlError>
      break;
 80072b4:	bf00      	nop
  }

  return ret;
 80072b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	889b      	ldrh	r3, [r3, #4]
 80072d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072dc:	2b40      	cmp	r3, #64	@ 0x40
 80072de:	d007      	beq.n	80072f0 <USBD_StdEPReq+0x30>
 80072e0:	2b40      	cmp	r3, #64	@ 0x40
 80072e2:	f200 817f 	bhi.w	80075e4 <USBD_StdEPReq+0x324>
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d02a      	beq.n	8007340 <USBD_StdEPReq+0x80>
 80072ea:	2b20      	cmp	r3, #32
 80072ec:	f040 817a 	bne.w	80075e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80072f0:	7bbb      	ldrb	r3, [r7, #14]
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7ff fe85 	bl	8007004 <USBD_CoreFindEP>
 80072fa:	4603      	mov	r3, r0
 80072fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072fe:	7b7b      	ldrb	r3, [r7, #13]
 8007300:	2bff      	cmp	r3, #255	@ 0xff
 8007302:	f000 8174 	beq.w	80075ee <USBD_StdEPReq+0x32e>
 8007306:	7b7b      	ldrb	r3, [r7, #13]
 8007308:	2b00      	cmp	r3, #0
 800730a:	f040 8170 	bne.w	80075ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800730e:	7b7a      	ldrb	r2, [r7, #13]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007316:	7b7a      	ldrb	r2, [r7, #13]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	32ae      	adds	r2, #174	@ 0xae
 800731c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	f000 8163 	beq.w	80075ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007328:	7b7a      	ldrb	r2, [r7, #13]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	32ae      	adds	r2, #174	@ 0xae
 800732e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	4798      	blx	r3
 800733a:	4603      	mov	r3, r0
 800733c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800733e:	e156      	b.n	80075ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	785b      	ldrb	r3, [r3, #1]
 8007344:	2b03      	cmp	r3, #3
 8007346:	d008      	beq.n	800735a <USBD_StdEPReq+0x9a>
 8007348:	2b03      	cmp	r3, #3
 800734a:	f300 8145 	bgt.w	80075d8 <USBD_StdEPReq+0x318>
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 809b 	beq.w	800748a <USBD_StdEPReq+0x1ca>
 8007354:	2b01      	cmp	r3, #1
 8007356:	d03c      	beq.n	80073d2 <USBD_StdEPReq+0x112>
 8007358:	e13e      	b.n	80075d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b02      	cmp	r3, #2
 8007364:	d002      	beq.n	800736c <USBD_StdEPReq+0xac>
 8007366:	2b03      	cmp	r3, #3
 8007368:	d016      	beq.n	8007398 <USBD_StdEPReq+0xd8>
 800736a:	e02c      	b.n	80073c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800736c:	7bbb      	ldrb	r3, [r7, #14]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00d      	beq.n	800738e <USBD_StdEPReq+0xce>
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	2b80      	cmp	r3, #128	@ 0x80
 8007376:	d00a      	beq.n	800738e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007378:	7bbb      	ldrb	r3, [r7, #14]
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 f919 	bl	80085b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007382:	2180      	movs	r1, #128	@ 0x80
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f001 f915 	bl	80085b4 <USBD_LL_StallEP>
 800738a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800738c:	e020      	b.n	80073d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fc7a 	bl	8007c8a <USBD_CtlError>
              break;
 8007396:	e01b      	b.n	80073d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	885b      	ldrh	r3, [r3, #2]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10e      	bne.n	80073be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00b      	beq.n	80073be <USBD_StdEPReq+0xfe>
 80073a6:	7bbb      	ldrb	r3, [r7, #14]
 80073a8:	2b80      	cmp	r3, #128	@ 0x80
 80073aa:	d008      	beq.n	80073be <USBD_StdEPReq+0xfe>
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	88db      	ldrh	r3, [r3, #6]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d104      	bne.n	80073be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f001 f8fb 	bl	80085b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fd3a 	bl	8007e38 <USBD_CtlSendStatus>

              break;
 80073c4:	e004      	b.n	80073d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fc5e 	bl	8007c8a <USBD_CtlError>
              break;
 80073ce:	bf00      	nop
          }
          break;
 80073d0:	e107      	b.n	80075e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d002      	beq.n	80073e4 <USBD_StdEPReq+0x124>
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d016      	beq.n	8007410 <USBD_StdEPReq+0x150>
 80073e2:	e04b      	b.n	800747c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073e4:	7bbb      	ldrb	r3, [r7, #14]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00d      	beq.n	8007406 <USBD_StdEPReq+0x146>
 80073ea:	7bbb      	ldrb	r3, [r7, #14]
 80073ec:	2b80      	cmp	r3, #128	@ 0x80
 80073ee:	d00a      	beq.n	8007406 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073f0:	7bbb      	ldrb	r3, [r7, #14]
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f001 f8dd 	bl	80085b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073fa:	2180      	movs	r1, #128	@ 0x80
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f001 f8d9 	bl	80085b4 <USBD_LL_StallEP>
 8007402:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007404:	e040      	b.n	8007488 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fc3e 	bl	8007c8a <USBD_CtlError>
              break;
 800740e:	e03b      	b.n	8007488 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	885b      	ldrh	r3, [r3, #2]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d136      	bne.n	8007486 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800741e:	2b00      	cmp	r3, #0
 8007420:	d004      	beq.n	800742c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007422:	7bbb      	ldrb	r3, [r7, #14]
 8007424:	4619      	mov	r1, r3
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f001 f8e3 	bl	80085f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fd03 	bl	8007e38 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007432:	7bbb      	ldrb	r3, [r7, #14]
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7ff fde4 	bl	8007004 <USBD_CoreFindEP>
 800743c:	4603      	mov	r3, r0
 800743e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007440:	7b7b      	ldrb	r3, [r7, #13]
 8007442:	2bff      	cmp	r3, #255	@ 0xff
 8007444:	d01f      	beq.n	8007486 <USBD_StdEPReq+0x1c6>
 8007446:	7b7b      	ldrb	r3, [r7, #13]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d11c      	bne.n	8007486 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800744c:	7b7a      	ldrb	r2, [r7, #13]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007454:	7b7a      	ldrb	r2, [r7, #13]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	32ae      	adds	r2, #174	@ 0xae
 800745a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d010      	beq.n	8007486 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007464:	7b7a      	ldrb	r2, [r7, #13]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	32ae      	adds	r2, #174	@ 0xae
 800746a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	4798      	blx	r3
 8007476:	4603      	mov	r3, r0
 8007478:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800747a:	e004      	b.n	8007486 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800747c:	6839      	ldr	r1, [r7, #0]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fc03 	bl	8007c8a <USBD_CtlError>
              break;
 8007484:	e000      	b.n	8007488 <USBD_StdEPReq+0x1c8>
              break;
 8007486:	bf00      	nop
          }
          break;
 8007488:	e0ab      	b.n	80075e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b02      	cmp	r3, #2
 8007494:	d002      	beq.n	800749c <USBD_StdEPReq+0x1dc>
 8007496:	2b03      	cmp	r3, #3
 8007498:	d032      	beq.n	8007500 <USBD_StdEPReq+0x240>
 800749a:	e097      	b.n	80075cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800749c:	7bbb      	ldrb	r3, [r7, #14]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d007      	beq.n	80074b2 <USBD_StdEPReq+0x1f2>
 80074a2:	7bbb      	ldrb	r3, [r7, #14]
 80074a4:	2b80      	cmp	r3, #128	@ 0x80
 80074a6:	d004      	beq.n	80074b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fbed 	bl	8007c8a <USBD_CtlError>
                break;
 80074b0:	e091      	b.n	80075d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	da0b      	bge.n	80074d2 <USBD_StdEPReq+0x212>
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074c0:	4613      	mov	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	3310      	adds	r3, #16
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	4413      	add	r3, r2
 80074ce:	3304      	adds	r3, #4
 80074d0:	e00b      	b.n	80074ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074d2:	7bbb      	ldrb	r3, [r7, #14]
 80074d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074d8:	4613      	mov	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	4413      	add	r3, r2
 80074e8:	3304      	adds	r3, #4
 80074ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2200      	movs	r2, #0
 80074f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2202      	movs	r2, #2
 80074f6:	4619      	mov	r1, r3
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fc43 	bl	8007d84 <USBD_CtlSendData>
              break;
 80074fe:	e06a      	b.n	80075d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007500:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007504:	2b00      	cmp	r3, #0
 8007506:	da11      	bge.n	800752c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007508:	7bbb      	ldrb	r3, [r7, #14]
 800750a:	f003 020f 	and.w	r2, r3, #15
 800750e:	6879      	ldr	r1, [r7, #4]
 8007510:	4613      	mov	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	440b      	add	r3, r1
 800751a:	3324      	adds	r3, #36	@ 0x24
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d117      	bne.n	8007552 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fbb0 	bl	8007c8a <USBD_CtlError>
                  break;
 800752a:	e054      	b.n	80075d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	f003 020f 	and.w	r2, r3, #15
 8007532:	6879      	ldr	r1, [r7, #4]
 8007534:	4613      	mov	r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	440b      	add	r3, r1
 800753e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d104      	bne.n	8007552 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fb9d 	bl	8007c8a <USBD_CtlError>
                  break;
 8007550:	e041      	b.n	80075d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007552:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007556:	2b00      	cmp	r3, #0
 8007558:	da0b      	bge.n	8007572 <USBD_StdEPReq+0x2b2>
 800755a:	7bbb      	ldrb	r3, [r7, #14]
 800755c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007560:	4613      	mov	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	3310      	adds	r3, #16
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	4413      	add	r3, r2
 800756e:	3304      	adds	r3, #4
 8007570:	e00b      	b.n	800758a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007572:	7bbb      	ldrb	r3, [r7, #14]
 8007574:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007578:	4613      	mov	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	4413      	add	r3, r2
 8007588:	3304      	adds	r3, #4
 800758a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800758c:	7bbb      	ldrb	r3, [r7, #14]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d002      	beq.n	8007598 <USBD_StdEPReq+0x2d8>
 8007592:	7bbb      	ldrb	r3, [r7, #14]
 8007594:	2b80      	cmp	r3, #128	@ 0x80
 8007596:	d103      	bne.n	80075a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2200      	movs	r2, #0
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	e00e      	b.n	80075be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 f843 	bl	8008630 <USBD_LL_IsStallEP>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d003      	beq.n	80075b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2201      	movs	r2, #1
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	e002      	b.n	80075be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2200      	movs	r2, #0
 80075bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2202      	movs	r2, #2
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fbdd 	bl	8007d84 <USBD_CtlSendData>
              break;
 80075ca:	e004      	b.n	80075d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80075cc:	6839      	ldr	r1, [r7, #0]
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fb5b 	bl	8007c8a <USBD_CtlError>
              break;
 80075d4:	bf00      	nop
          }
          break;
 80075d6:	e004      	b.n	80075e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fb55 	bl	8007c8a <USBD_CtlError>
          break;
 80075e0:	bf00      	nop
      }
      break;
 80075e2:	e005      	b.n	80075f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fb4f 	bl	8007c8a <USBD_CtlError>
      break;
 80075ec:	e000      	b.n	80075f0 <USBD_StdEPReq+0x330>
      break;
 80075ee:	bf00      	nop
  }

  return ret;
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
	...

080075fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007606:	2300      	movs	r3, #0
 8007608:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800760a:	2300      	movs	r3, #0
 800760c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800760e:	2300      	movs	r3, #0
 8007610:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	885b      	ldrh	r3, [r3, #2]
 8007616:	0a1b      	lsrs	r3, r3, #8
 8007618:	b29b      	uxth	r3, r3
 800761a:	3b01      	subs	r3, #1
 800761c:	2b06      	cmp	r3, #6
 800761e:	f200 8128 	bhi.w	8007872 <USBD_GetDescriptor+0x276>
 8007622:	a201      	add	r2, pc, #4	@ (adr r2, 8007628 <USBD_GetDescriptor+0x2c>)
 8007624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007628:	08007645 	.word	0x08007645
 800762c:	0800765d 	.word	0x0800765d
 8007630:	0800769d 	.word	0x0800769d
 8007634:	08007873 	.word	0x08007873
 8007638:	08007873 	.word	0x08007873
 800763c:	08007813 	.word	0x08007813
 8007640:	0800783f 	.word	0x0800783f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	7c12      	ldrb	r2, [r2, #16]
 8007650:	f107 0108 	add.w	r1, r7, #8
 8007654:	4610      	mov	r0, r2
 8007656:	4798      	blx	r3
 8007658:	60f8      	str	r0, [r7, #12]
      break;
 800765a:	e112      	b.n	8007882 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	7c1b      	ldrb	r3, [r3, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10d      	bne.n	8007680 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800766a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766c:	f107 0208 	add.w	r2, r7, #8
 8007670:	4610      	mov	r0, r2
 8007672:	4798      	blx	r3
 8007674:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3301      	adds	r3, #1
 800767a:	2202      	movs	r2, #2
 800767c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800767e:	e100      	b.n	8007882 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007688:	f107 0208 	add.w	r2, r7, #8
 800768c:	4610      	mov	r0, r2
 800768e:	4798      	blx	r3
 8007690:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	3301      	adds	r3, #1
 8007696:	2202      	movs	r2, #2
 8007698:	701a      	strb	r2, [r3, #0]
      break;
 800769a:	e0f2      	b.n	8007882 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	885b      	ldrh	r3, [r3, #2]
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b05      	cmp	r3, #5
 80076a4:	f200 80ac 	bhi.w	8007800 <USBD_GetDescriptor+0x204>
 80076a8:	a201      	add	r2, pc, #4	@ (adr r2, 80076b0 <USBD_GetDescriptor+0xb4>)
 80076aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ae:	bf00      	nop
 80076b0:	080076c9 	.word	0x080076c9
 80076b4:	080076fd 	.word	0x080076fd
 80076b8:	08007731 	.word	0x08007731
 80076bc:	08007765 	.word	0x08007765
 80076c0:	08007799 	.word	0x08007799
 80076c4:	080077cd 	.word	0x080077cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00b      	beq.n	80076ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	7c12      	ldrb	r2, [r2, #16]
 80076e0:	f107 0108 	add.w	r1, r7, #8
 80076e4:	4610      	mov	r0, r2
 80076e6:	4798      	blx	r3
 80076e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ea:	e091      	b.n	8007810 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 facb 	bl	8007c8a <USBD_CtlError>
            err++;
 80076f4:	7afb      	ldrb	r3, [r7, #11]
 80076f6:	3301      	adds	r3, #1
 80076f8:	72fb      	strb	r3, [r7, #11]
          break;
 80076fa:	e089      	b.n	8007810 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00b      	beq.n	8007720 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	7c12      	ldrb	r2, [r2, #16]
 8007714:	f107 0108 	add.w	r1, r7, #8
 8007718:	4610      	mov	r0, r2
 800771a:	4798      	blx	r3
 800771c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800771e:	e077      	b.n	8007810 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fab1 	bl	8007c8a <USBD_CtlError>
            err++;
 8007728:	7afb      	ldrb	r3, [r7, #11]
 800772a:	3301      	adds	r3, #1
 800772c:	72fb      	strb	r3, [r7, #11]
          break;
 800772e:	e06f      	b.n	8007810 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00b      	beq.n	8007754 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	7c12      	ldrb	r2, [r2, #16]
 8007748:	f107 0108 	add.w	r1, r7, #8
 800774c:	4610      	mov	r0, r2
 800774e:	4798      	blx	r3
 8007750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007752:	e05d      	b.n	8007810 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fa97 	bl	8007c8a <USBD_CtlError>
            err++;
 800775c:	7afb      	ldrb	r3, [r7, #11]
 800775e:	3301      	adds	r3, #1
 8007760:	72fb      	strb	r3, [r7, #11]
          break;
 8007762:	e055      	b.n	8007810 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00b      	beq.n	8007788 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	7c12      	ldrb	r2, [r2, #16]
 800777c:	f107 0108 	add.w	r1, r7, #8
 8007780:	4610      	mov	r0, r2
 8007782:	4798      	blx	r3
 8007784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007786:	e043      	b.n	8007810 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fa7d 	bl	8007c8a <USBD_CtlError>
            err++;
 8007790:	7afb      	ldrb	r3, [r7, #11]
 8007792:	3301      	adds	r3, #1
 8007794:	72fb      	strb	r3, [r7, #11]
          break;
 8007796:	e03b      	b.n	8007810 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00b      	beq.n	80077bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	7c12      	ldrb	r2, [r2, #16]
 80077b0:	f107 0108 	add.w	r1, r7, #8
 80077b4:	4610      	mov	r0, r2
 80077b6:	4798      	blx	r3
 80077b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ba:	e029      	b.n	8007810 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fa63 	bl	8007c8a <USBD_CtlError>
            err++;
 80077c4:	7afb      	ldrb	r3, [r7, #11]
 80077c6:	3301      	adds	r3, #1
 80077c8:	72fb      	strb	r3, [r7, #11]
          break;
 80077ca:	e021      	b.n	8007810 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00b      	beq.n	80077f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	7c12      	ldrb	r2, [r2, #16]
 80077e4:	f107 0108 	add.w	r1, r7, #8
 80077e8:	4610      	mov	r0, r2
 80077ea:	4798      	blx	r3
 80077ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ee:	e00f      	b.n	8007810 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fa49 	bl	8007c8a <USBD_CtlError>
            err++;
 80077f8:	7afb      	ldrb	r3, [r7, #11]
 80077fa:	3301      	adds	r3, #1
 80077fc:	72fb      	strb	r3, [r7, #11]
          break;
 80077fe:	e007      	b.n	8007810 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fa41 	bl	8007c8a <USBD_CtlError>
          err++;
 8007808:	7afb      	ldrb	r3, [r7, #11]
 800780a:	3301      	adds	r3, #1
 800780c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800780e:	bf00      	nop
      }
      break;
 8007810:	e037      	b.n	8007882 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	7c1b      	ldrb	r3, [r3, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d109      	bne.n	800782e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007822:	f107 0208 	add.w	r2, r7, #8
 8007826:	4610      	mov	r0, r2
 8007828:	4798      	blx	r3
 800782a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800782c:	e029      	b.n	8007882 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fa2a 	bl	8007c8a <USBD_CtlError>
        err++;
 8007836:	7afb      	ldrb	r3, [r7, #11]
 8007838:	3301      	adds	r3, #1
 800783a:	72fb      	strb	r3, [r7, #11]
      break;
 800783c:	e021      	b.n	8007882 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	7c1b      	ldrb	r3, [r3, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10d      	bne.n	8007862 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800784c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800784e:	f107 0208 	add.w	r2, r7, #8
 8007852:	4610      	mov	r0, r2
 8007854:	4798      	blx	r3
 8007856:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	3301      	adds	r3, #1
 800785c:	2207      	movs	r2, #7
 800785e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007860:	e00f      	b.n	8007882 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fa10 	bl	8007c8a <USBD_CtlError>
        err++;
 800786a:	7afb      	ldrb	r3, [r7, #11]
 800786c:	3301      	adds	r3, #1
 800786e:	72fb      	strb	r3, [r7, #11]
      break;
 8007870:	e007      	b.n	8007882 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fa08 	bl	8007c8a <USBD_CtlError>
      err++;
 800787a:	7afb      	ldrb	r3, [r7, #11]
 800787c:	3301      	adds	r3, #1
 800787e:	72fb      	strb	r3, [r7, #11]
      break;
 8007880:	bf00      	nop
  }

  if (err != 0U)
 8007882:	7afb      	ldrb	r3, [r7, #11]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d11e      	bne.n	80078c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	88db      	ldrh	r3, [r3, #6]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d016      	beq.n	80078be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007890:	893b      	ldrh	r3, [r7, #8]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00e      	beq.n	80078b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	88da      	ldrh	r2, [r3, #6]
 800789a:	893b      	ldrh	r3, [r7, #8]
 800789c:	4293      	cmp	r3, r2
 800789e:	bf28      	it	cs
 80078a0:	4613      	movcs	r3, r2
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078a6:	893b      	ldrh	r3, [r7, #8]
 80078a8:	461a      	mov	r2, r3
 80078aa:	68f9      	ldr	r1, [r7, #12]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fa69 	bl	8007d84 <USBD_CtlSendData>
 80078b2:	e009      	b.n	80078c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f9e7 	bl	8007c8a <USBD_CtlError>
 80078bc:	e004      	b.n	80078c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 faba 	bl	8007e38 <USBD_CtlSendStatus>
 80078c4:	e000      	b.n	80078c8 <USBD_GetDescriptor+0x2cc>
    return;
 80078c6:	bf00      	nop
  }
}
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop

080078d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	889b      	ldrh	r3, [r3, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d131      	bne.n	8007946 <USBD_SetAddress+0x76>
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	88db      	ldrh	r3, [r3, #6]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d12d      	bne.n	8007946 <USBD_SetAddress+0x76>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	885b      	ldrh	r3, [r3, #2]
 80078ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80078f0:	d829      	bhi.n	8007946 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	885b      	ldrh	r3, [r3, #2]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b03      	cmp	r3, #3
 8007908:	d104      	bne.n	8007914 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f9bc 	bl	8007c8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007912:	e01d      	b.n	8007950 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	7bfa      	ldrb	r2, [r7, #15]
 8007918:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800791c:	7bfb      	ldrb	r3, [r7, #15]
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 feb1 	bl	8008688 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fa86 	bl	8007e38 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800792c:	7bfb      	ldrb	r3, [r7, #15]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d004      	beq.n	800793c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2202      	movs	r2, #2
 8007936:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800793a:	e009      	b.n	8007950 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007944:	e004      	b.n	8007950 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f99e 	bl	8007c8a <USBD_CtlError>
  }
}
 800794e:	bf00      	nop
 8007950:	bf00      	nop
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	885b      	ldrh	r3, [r3, #2]
 800796a:	b2da      	uxtb	r2, r3
 800796c:	4b4e      	ldr	r3, [pc, #312]	@ (8007aa8 <USBD_SetConfig+0x150>)
 800796e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007970:	4b4d      	ldr	r3, [pc, #308]	@ (8007aa8 <USBD_SetConfig+0x150>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d905      	bls.n	8007984 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f985 	bl	8007c8a <USBD_CtlError>
    return USBD_FAIL;
 8007980:	2303      	movs	r3, #3
 8007982:	e08c      	b.n	8007a9e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b02      	cmp	r3, #2
 800798e:	d002      	beq.n	8007996 <USBD_SetConfig+0x3e>
 8007990:	2b03      	cmp	r3, #3
 8007992:	d029      	beq.n	80079e8 <USBD_SetConfig+0x90>
 8007994:	e075      	b.n	8007a82 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007996:	4b44      	ldr	r3, [pc, #272]	@ (8007aa8 <USBD_SetConfig+0x150>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d020      	beq.n	80079e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800799e:	4b42      	ldr	r3, [pc, #264]	@ (8007aa8 <USBD_SetConfig+0x150>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079a8:	4b3f      	ldr	r3, [pc, #252]	@ (8007aa8 <USBD_SetConfig+0x150>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7fe ffe3 	bl	800697a <USBD_SetClassConfig>
 80079b4:	4603      	mov	r3, r0
 80079b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d008      	beq.n	80079d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f962 	bl	8007c8a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2202      	movs	r2, #2
 80079ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079ce:	e065      	b.n	8007a9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fa31 	bl	8007e38 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2203      	movs	r2, #3
 80079da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80079de:	e05d      	b.n	8007a9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fa29 	bl	8007e38 <USBD_CtlSendStatus>
      break;
 80079e6:	e059      	b.n	8007a9c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80079e8:	4b2f      	ldr	r3, [pc, #188]	@ (8007aa8 <USBD_SetConfig+0x150>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d112      	bne.n	8007a16 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2202      	movs	r2, #2
 80079f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80079f8:	4b2b      	ldr	r3, [pc, #172]	@ (8007aa8 <USBD_SetConfig+0x150>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	461a      	mov	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a02:	4b29      	ldr	r3, [pc, #164]	@ (8007aa8 <USBD_SetConfig+0x150>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7fe ffd2 	bl	80069b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fa12 	bl	8007e38 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a14:	e042      	b.n	8007a9c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007a16:	4b24      	ldr	r3, [pc, #144]	@ (8007aa8 <USBD_SetConfig+0x150>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d02a      	beq.n	8007a7a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7fe ffc0 	bl	80069b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a32:	4b1d      	ldr	r3, [pc, #116]	@ (8007aa8 <USBD_SetConfig+0x150>)
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	461a      	mov	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8007aa8 <USBD_SetConfig+0x150>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	4619      	mov	r1, r3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7fe ff99 	bl	800697a <USBD_SetClassConfig>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a4c:	7bfb      	ldrb	r3, [r7, #15]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00f      	beq.n	8007a72 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f918 	bl	8007c8a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7fe ffa5 	bl	80069b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007a70:	e014      	b.n	8007a9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f9e0 	bl	8007e38 <USBD_CtlSendStatus>
      break;
 8007a78:	e010      	b.n	8007a9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f9dc 	bl	8007e38 <USBD_CtlSendStatus>
      break;
 8007a80:	e00c      	b.n	8007a9c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f900 	bl	8007c8a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a8a:	4b07      	ldr	r3, [pc, #28]	@ (8007aa8 <USBD_SetConfig+0x150>)
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7fe ff8e 	bl	80069b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007a96:	2303      	movs	r3, #3
 8007a98:	73fb      	strb	r3, [r7, #15]
      break;
 8007a9a:	bf00      	nop
  }

  return ret;
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20001468 	.word	0x20001468

08007aac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	88db      	ldrh	r3, [r3, #6]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d004      	beq.n	8007ac8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f8e2 	bl	8007c8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ac6:	e023      	b.n	8007b10 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	dc02      	bgt.n	8007ada <USBD_GetConfig+0x2e>
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	dc03      	bgt.n	8007ae0 <USBD_GetConfig+0x34>
 8007ad8:	e015      	b.n	8007b06 <USBD_GetConfig+0x5a>
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d00b      	beq.n	8007af6 <USBD_GetConfig+0x4a>
 8007ade:	e012      	b.n	8007b06 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	3308      	adds	r3, #8
 8007aea:	2201      	movs	r2, #1
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f948 	bl	8007d84 <USBD_CtlSendData>
        break;
 8007af4:	e00c      	b.n	8007b10 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	3304      	adds	r3, #4
 8007afa:	2201      	movs	r2, #1
 8007afc:	4619      	mov	r1, r3
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f940 	bl	8007d84 <USBD_CtlSendData>
        break;
 8007b04:	e004      	b.n	8007b10 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 f8be 	bl	8007c8a <USBD_CtlError>
        break;
 8007b0e:	bf00      	nop
}
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d81e      	bhi.n	8007b6e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	88db      	ldrh	r3, [r3, #6]
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d004      	beq.n	8007b42 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f8a5 	bl	8007c8a <USBD_CtlError>
        break;
 8007b40:	e01a      	b.n	8007b78 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d005      	beq.n	8007b5e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	f043 0202 	orr.w	r2, r3, #2
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	330c      	adds	r3, #12
 8007b62:	2202      	movs	r2, #2
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f90c 	bl	8007d84 <USBD_CtlSendData>
      break;
 8007b6c:	e004      	b.n	8007b78 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f88a 	bl	8007c8a <USBD_CtlError>
      break;
 8007b76:	bf00      	nop
  }
}
 8007b78:	bf00      	nop
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	885b      	ldrh	r3, [r3, #2]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d107      	bne.n	8007ba2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f94c 	bl	8007e38 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007ba0:	e013      	b.n	8007bca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	885b      	ldrh	r3, [r3, #2]
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d10b      	bne.n	8007bc2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	889b      	ldrh	r3, [r3, #4]
 8007bae:	0a1b      	lsrs	r3, r3, #8
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f93c 	bl	8007e38 <USBD_CtlSendStatus>
}
 8007bc0:	e003      	b.n	8007bca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f860 	bl	8007c8a <USBD_CtlError>
}
 8007bca:	bf00      	nop
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b082      	sub	sp, #8
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	3b01      	subs	r3, #1
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d80b      	bhi.n	8007c02 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	885b      	ldrh	r3, [r3, #2]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d10c      	bne.n	8007c0c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f91c 	bl	8007e38 <USBD_CtlSendStatus>
      }
      break;
 8007c00:	e004      	b.n	8007c0c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f840 	bl	8007c8a <USBD_CtlError>
      break;
 8007c0a:	e000      	b.n	8007c0e <USBD_ClrFeature+0x3c>
      break;
 8007c0c:	bf00      	nop
  }
}
 8007c0e:	bf00      	nop
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b084      	sub	sp, #16
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	781a      	ldrb	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	781a      	ldrb	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f7ff fa40 	bl	80070c6 <SWAPBYTE>
 8007c46:	4603      	mov	r3, r0
 8007c48:	461a      	mov	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	3301      	adds	r3, #1
 8007c52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	3301      	adds	r3, #1
 8007c58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f7ff fa33 	bl	80070c6 <SWAPBYTE>
 8007c60:	4603      	mov	r3, r0
 8007c62:	461a      	mov	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3301      	adds	r3, #1
 8007c72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f7ff fa26 	bl	80070c6 <SWAPBYTE>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	80da      	strh	r2, [r3, #6]
}
 8007c82:	bf00      	nop
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c94:	2180      	movs	r1, #128	@ 0x80
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fc8c 	bl	80085b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fc88 	bl	80085b4 <USBD_LL_StallEP>
}
 8007ca4:	bf00      	nop
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d042      	beq.n	8007d48 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007cc6:	6938      	ldr	r0, [r7, #16]
 8007cc8:	f000 f842 	bl	8007d50 <USBD_GetLen>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	3301      	adds	r3, #1
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cd6:	d808      	bhi.n	8007cea <USBD_GetString+0x3e>
 8007cd8:	6938      	ldr	r0, [r7, #16]
 8007cda:	f000 f839 	bl	8007d50 <USBD_GetLen>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	e001      	b.n	8007cee <USBD_GetString+0x42>
 8007cea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	7812      	ldrb	r2, [r2, #0]
 8007cfc:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cfe:	7dfb      	ldrb	r3, [r7, #23]
 8007d00:	3301      	adds	r3, #1
 8007d02:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d04:	7dfb      	ldrb	r3, [r7, #23]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	4413      	add	r3, r2
 8007d0a:	2203      	movs	r2, #3
 8007d0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
 8007d10:	3301      	adds	r3, #1
 8007d12:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007d14:	e013      	b.n	8007d3e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007d16:	7dfb      	ldrb	r3, [r7, #23]
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	7812      	ldrb	r2, [r2, #0]
 8007d20:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	3301      	adds	r3, #1
 8007d26:	613b      	str	r3, [r7, #16]
    idx++;
 8007d28:	7dfb      	ldrb	r3, [r7, #23]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d2e:	7dfb      	ldrb	r3, [r7, #23]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	4413      	add	r3, r2
 8007d34:	2200      	movs	r2, #0
 8007d36:	701a      	strb	r2, [r3, #0]
    idx++;
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1e7      	bne.n	8007d16 <USBD_GetString+0x6a>
 8007d46:	e000      	b.n	8007d4a <USBD_GetString+0x9e>
    return;
 8007d48:	bf00      	nop
  }
}
 8007d4a:	3718      	adds	r7, #24
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d60:	e005      	b.n	8007d6e <USBD_GetLen+0x1e>
  {
    len++;
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
 8007d64:	3301      	adds	r3, #1
 8007d66:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1f5      	bne.n	8007d62 <USBD_GetLen+0x12>
  }

  return len;
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	2100      	movs	r1, #0
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f000 fc8b 	bl	80086c6 <USBD_LL_Transmit>

  return USBD_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b084      	sub	sp, #16
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	60f8      	str	r0, [r7, #12]
 8007dc2:	60b9      	str	r1, [r7, #8]
 8007dc4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	2100      	movs	r1, #0
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 fc7a 	bl	80086c6 <USBD_LL_Transmit>

  return USBD_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2203      	movs	r2, #3
 8007dec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	2100      	movs	r1, #0
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f000 fc7e 	bl	8008708 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b084      	sub	sp, #16
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	60f8      	str	r0, [r7, #12]
 8007e1e:	60b9      	str	r1, [r7, #8]
 8007e20:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	2100      	movs	r1, #0
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 fc6d 	bl	8008708 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2204      	movs	r2, #4
 8007e44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e48:	2300      	movs	r3, #0
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fc39 	bl	80086c6 <USBD_LL_Transmit>

  return USBD_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b082      	sub	sp, #8
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2205      	movs	r2, #5
 8007e6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e6e:	2300      	movs	r3, #0
 8007e70:	2200      	movs	r2, #0
 8007e72:	2100      	movs	r1, #0
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fc47 	bl	8008708 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3708      	adds	r7, #8
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	4912      	ldr	r1, [pc, #72]	@ (8007ed4 <MX_USB_DEVICE_Init+0x50>)
 8007e8c:	4812      	ldr	r0, [pc, #72]	@ (8007ed8 <MX_USB_DEVICE_Init+0x54>)
 8007e8e:	f7fe fcf7 	bl	8006880 <USBD_Init>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e98:	f7f8 ffcc 	bl	8000e34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007e9c:	490f      	ldr	r1, [pc, #60]	@ (8007edc <MX_USB_DEVICE_Init+0x58>)
 8007e9e:	480e      	ldr	r0, [pc, #56]	@ (8007ed8 <MX_USB_DEVICE_Init+0x54>)
 8007ea0:	f7fe fd1e 	bl	80068e0 <USBD_RegisterClass>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007eaa:	f7f8 ffc3 	bl	8000e34 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007eae:	490c      	ldr	r1, [pc, #48]	@ (8007ee0 <MX_USB_DEVICE_Init+0x5c>)
 8007eb0:	4809      	ldr	r0, [pc, #36]	@ (8007ed8 <MX_USB_DEVICE_Init+0x54>)
 8007eb2:	f7fe fccb 	bl	800684c <USBD_CUSTOM_HID_RegisterInterface>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d001      	beq.n	8007ec0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007ebc:	f7f8 ffba 	bl	8000e34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ec0:	4805      	ldr	r0, [pc, #20]	@ (8007ed8 <MX_USB_DEVICE_Init+0x54>)
 8007ec2:	f7fe fd43 	bl	800694c <USBD_Start>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ecc:	f7f8 ffb2 	bl	8000e34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ed0:	bf00      	nop
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	200005e4 	.word	0x200005e4
 8007ed8:	2000146c 	.word	0x2000146c
 8007edc:	20000010 	.word	0x20000010
 8007ee0:	200005d0 	.word	0x200005d0

08007ee4 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ee8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
	log_message("CUSTOM_HID_DeInit_FS Called");
 8007ef8:	4802      	ldr	r0, [pc, #8]	@ (8007f04 <CUSTOM_HID_DeInit_FS+0x10>)
 8007efa:	f7f8 fd73 	bl	80009e4 <log_message>
  return (USBD_OK);
 8007efe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	08009398 	.word	0x08009398

08007f08 <CUSTOM_HID_OutEvent_FS>:

/* OutEvent: Handle and log outgoing HID reports */
int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state, USBD_HandleTypeDef *pdev) {
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	4603      	mov	r3, r0
 8007f10:	603a      	str	r2, [r7, #0]
 8007f12:	71fb      	strb	r3, [r7, #7]
 8007f14:	460b      	mov	r3, r1
 8007f16:	71bb      	strb	r3, [r7, #6]
    uint8_t *report_buf = ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->Report_buf;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f1e:	60fb      	str	r3, [r7, #12]

    if (report_buf) {
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d035      	beq.n	8007f92 <CUSTOM_HID_OutEvent_FS+0x8a>
        uint8_t report_id = report_buf[0];
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	72fb      	strb	r3, [r7, #11]
//        log_message("OutEvent: Event ID = %u, State = %u, Report ID = 0x%02X", event_idx, state, report_id);

        switch (report_id) {
 8007f2c:	7afb      	ldrb	r3, [r7, #11]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	2b0b      	cmp	r3, #11
 8007f32:	d82d      	bhi.n	8007f90 <CUSTOM_HID_OutEvent_FS+0x88>
 8007f34:	a201      	add	r2, pc, #4	@ (adr r2, 8007f3c <CUSTOM_HID_OutEvent_FS+0x34>)
 8007f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3a:	bf00      	nop
 8007f3c:	08007f91 	.word	0x08007f91
 8007f40:	08007f91 	.word	0x08007f91
 8007f44:	08007f91 	.word	0x08007f91
 8007f48:	08007f91 	.word	0x08007f91
 8007f4c:	08007f6d 	.word	0x08007f6d
 8007f50:	08007f91 	.word	0x08007f91
 8007f54:	08007f91 	.word	0x08007f91
 8007f58:	08007f91 	.word	0x08007f91
 8007f5c:	08007f91 	.word	0x08007f91
 8007f60:	08007f91 	.word	0x08007f91
 8007f64:	08007f91 	.word	0x08007f91
 8007f68:	08007f91 	.word	0x08007f91
            case 0x02: // Example for PID State Report
//                log_message("Processing PID State Report");
                // Add handling logic for Report ID 0x02
                break;
            case 0x05: // Create New Effect Report
            	create_new_effect_report.reportId = report_buf[0];
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	781a      	ldrb	r2, [r3, #0]
 8007f70:	4b0a      	ldr	r3, [pc, #40]	@ (8007f9c <CUSTOM_HID_OutEvent_FS+0x94>)
 8007f72:	701a      	strb	r2, [r3, #0]
            	create_new_effect_report.effectType = report_buf[1];
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	785a      	ldrb	r2, [r3, #1]
 8007f78:	4b08      	ldr	r3, [pc, #32]	@ (8007f9c <CUSTOM_HID_OutEvent_FS+0x94>)
 8007f7a:	705a      	strb	r2, [r3, #1]
            	create_new_effect_report.byteCount = report_buf[2];
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3302      	adds	r3, #2
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	4b05      	ldr	r3, [pc, #20]	@ (8007f9c <CUSTOM_HID_OutEvent_FS+0x94>)
 8007f86:	805a      	strh	r2, [r3, #2]
            	log_message("Create New Effect Report Request Received");
 8007f88:	4805      	ldr	r0, [pc, #20]	@ (8007fa0 <CUSTOM_HID_OutEvent_FS+0x98>)
 8007f8a:	f7f8 fd2b 	bl	80009e4 <log_message>
            	break;
 8007f8e:	e000      	b.n	8007f92 <CUSTOM_HID_OutEvent_FS+0x8a>
				break;

            // Add cases for other Report IDs as needed
            default:
//                log_message("Unknown Report ID: 0x%02X", report_id);
                break;
 8007f90:	bf00      	nop

        }
    } else {
//        log_message("OutEvent: Null report buffer.");
    }
    return USBD_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	20001750 	.word	0x20001750
 8007fa0:	080093b4 	.word	0x080093b4

08007fa4 <CUSTOM_HID_GetReport>:
    }
    return USBD_OK;
}
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */

uint8_t* CUSTOM_HID_GetReport(USBD_SetupReqTypedef *req, uint16_t *length, USBD_HandleTypeDef *pdev) {
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
    static uint8_t report[64];
    uint8_t report_id = req->wValue & 0xFF;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	885b      	ldrh	r3, [r3, #2]
 8007fb4:	75fb      	strb	r3, [r7, #23]
    uint8_t report_type = (req->wValue >> 8) & 0xFF;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	885b      	ldrh	r3, [r3, #2]
 8007fba:	0a1b      	lsrs	r3, r3, #8
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	75bb      	strb	r3, [r7, #22]

//    log_message("GetReport: Request Type = 0x%02X, Report ID = 0x%02X, Length = %u", report_type, report_id, *length);

    switch (report_type) {
 8007fc0:	7dbb      	ldrb	r3, [r7, #22]
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	d138      	bne.n	8008038 <CUSTOM_HID_GetReport+0x94>
		case FEATURE:
			switch (report_id) {
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	2b06      	cmp	r3, #6
 8007fca:	d016      	beq.n	8007ffa <CUSTOM_HID_GetReport+0x56>
 8007fcc:	2b07      	cmp	r3, #7
 8007fce:	d12a      	bne.n	8008026 <CUSTOM_HID_GetReport+0x82>
				case 0x07: // GET PID Pool Report
					pool_report.reportId = 0x07; // Report ID
 8007fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8008044 <CUSTOM_HID_GetReport+0xa0>)
 8007fd2:	2207      	movs	r2, #7
 8007fd4:	701a      	strb	r2, [r3, #0]
					pool_report.ramPoolSize = 0xFFFF;
 8007fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8008044 <CUSTOM_HID_GetReport+0xa0>)
 8007fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fdc:	705a      	strb	r2, [r3, #1]
 8007fde:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe2:	709a      	strb	r2, [r3, #2]
					pool_report.maxSimultaneousEffects = 0x10;	// FFP supports playing up to 16 simultaneous effects
 8007fe4:	4b17      	ldr	r3, [pc, #92]	@ (8008044 <CUSTOM_HID_GetReport+0xa0>)
 8007fe6:	2210      	movs	r2, #16
 8007fe8:	70da      	strb	r2, [r3, #3]
					pool_report.memoryManagement = 0x03; // 0b00000011
 8007fea:	4b16      	ldr	r3, [pc, #88]	@ (8008044 <CUSTOM_HID_GetReport+0xa0>)
 8007fec:	2203      	movs	r2, #3
 8007fee:	711a      	strb	r2, [r3, #4]
					*length = 5;
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	2205      	movs	r2, #5
 8007ff4:	801a      	strh	r2, [r3, #0]
//					log_message("Returning Pool Report: ID:%02X %02X %02X", pool_report.reportId,
//																			pool_report.ramPoolSize,
//																			*length);
					return (uint8_t *) &pool_report;
 8007ff6:	4b13      	ldr	r3, [pc, #76]	@ (8008044 <CUSTOM_HID_GetReport+0xa0>)
 8007ff8:	e01f      	b.n	800803a <CUSTOM_HID_GetReport+0x96>

				case 0x06:
					log_message("PID Block Load Report Request");
 8007ffa:	4813      	ldr	r0, [pc, #76]	@ (8008048 <CUSTOM_HID_GetReport+0xa4>)
 8007ffc:	f7f8 fcf2 	bl	80009e4 <log_message>
					block_load_report.reportId = 0x06;
 8008000:	4b12      	ldr	r3, [pc, #72]	@ (800804c <CUSTOM_HID_GetReport+0xa8>)
 8008002:	2206      	movs	r2, #6
 8008004:	701a      	strb	r2, [r3, #0]
					block_load_report.effectBlockIndex = create_new_effect_report.effectType;
 8008006:	4b12      	ldr	r3, [pc, #72]	@ (8008050 <CUSTOM_HID_GetReport+0xac>)
 8008008:	785a      	ldrb	r2, [r3, #1]
 800800a:	4b10      	ldr	r3, [pc, #64]	@ (800804c <CUSTOM_HID_GetReport+0xa8>)
 800800c:	705a      	strb	r2, [r3, #1]
					block_load_report.loadStatus = 0x04; // 0b00000100
 800800e:	4b0f      	ldr	r3, [pc, #60]	@ (800804c <CUSTOM_HID_GetReport+0xa8>)
 8008010:	2204      	movs	r2, #4
 8008012:	709a      	strb	r2, [r3, #2]
					block_load_report.ramPoolAvailable = 0xFFFF;
 8008014:	4b0d      	ldr	r3, [pc, #52]	@ (800804c <CUSTOM_HID_GetReport+0xa8>)
 8008016:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800801a:	809a      	strh	r2, [r3, #4]
					*length = 5;
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	2205      	movs	r2, #5
 8008020:	801a      	strh	r2, [r3, #0]

					return (uint8_t *) &block_load_report;
 8008022:	4b0a      	ldr	r3, [pc, #40]	@ (800804c <CUSTOM_HID_GetReport+0xa8>)
 8008024:	e009      	b.n	800803a <CUSTOM_HID_GetReport+0x96>

					break;
				default:
					log_message("Unknown Report ID: 0x%02X", report_id);
 8008026:	7dfb      	ldrb	r3, [r7, #23]
 8008028:	4619      	mov	r1, r3
 800802a:	480a      	ldr	r0, [pc, #40]	@ (8008054 <CUSTOM_HID_GetReport+0xb0>)
 800802c:	f7f8 fcda 	bl	80009e4 <log_message>
					*length = 0;
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2200      	movs	r2, #0
 8008034:	801a      	strh	r2, [r3, #0]
					break;
 8008036:	bf00      	nop
			}
    }
    return report;
 8008038:	4b07      	ldr	r3, [pc, #28]	@ (8008058 <CUSTOM_HID_GetReport+0xb4>)
}
 800803a:	4618      	mov	r0, r3
 800803c:	3718      	adds	r7, #24
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20001748 	.word	0x20001748
 8008048:	080093e0 	.word	0x080093e0
 800804c:	20001754 	.word	0x20001754
 8008050:	20001750 	.word	0x20001750
 8008054:	08009400 	.word	0x08009400
 8008058:	2000175c 	.word	0x2000175c

0800805c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	4603      	mov	r3, r0
 8008064:	6039      	str	r1, [r7, #0]
 8008066:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	2212      	movs	r2, #18
 800806c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800806e:	4b03      	ldr	r3, [pc, #12]	@ (800807c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008070:	4618      	mov	r0, r3
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	20000600 	.word	0x20000600

08008080 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	4603      	mov	r3, r0
 8008088:	6039      	str	r1, [r7, #0]
 800808a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	2204      	movs	r2, #4
 8008090:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008092:	4b03      	ldr	r3, [pc, #12]	@ (80080a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008094:	4618      	mov	r0, r3
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	20000614 	.word	0x20000614

080080a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	4603      	mov	r3, r0
 80080ac:	6039      	str	r1, [r7, #0]
 80080ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080b0:	79fb      	ldrb	r3, [r7, #7]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d105      	bne.n	80080c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	4907      	ldr	r1, [pc, #28]	@ (80080d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80080ba:	4808      	ldr	r0, [pc, #32]	@ (80080dc <USBD_FS_ProductStrDescriptor+0x38>)
 80080bc:	f7ff fdf6 	bl	8007cac <USBD_GetString>
 80080c0:	e004      	b.n	80080cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080c2:	683a      	ldr	r2, [r7, #0]
 80080c4:	4904      	ldr	r1, [pc, #16]	@ (80080d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80080c6:	4805      	ldr	r0, [pc, #20]	@ (80080dc <USBD_FS_ProductStrDescriptor+0x38>)
 80080c8:	f7ff fdf0 	bl	8007cac <USBD_GetString>
  }
  return USBD_StrDesc;
 80080cc:	4b02      	ldr	r3, [pc, #8]	@ (80080d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3708      	adds	r7, #8
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	2000179c 	.word	0x2000179c
 80080dc:	0800941c 	.word	0x0800941c

080080e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4603      	mov	r3, r0
 80080e8:	6039      	str	r1, [r7, #0]
 80080ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080ec:	683a      	ldr	r2, [r7, #0]
 80080ee:	4904      	ldr	r1, [pc, #16]	@ (8008100 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80080f0:	4804      	ldr	r0, [pc, #16]	@ (8008104 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80080f2:	f7ff fddb 	bl	8007cac <USBD_GetString>
  return USBD_StrDesc;
 80080f6:	4b02      	ldr	r3, [pc, #8]	@ (8008100 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	2000179c 	.word	0x2000179c
 8008104:	0800943c 	.word	0x0800943c

08008108 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	4603      	mov	r3, r0
 8008110:	6039      	str	r1, [r7, #0]
 8008112:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	221a      	movs	r2, #26
 8008118:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800811a:	f000 f843 	bl	80081a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800811e:	4b02      	ldr	r3, [pc, #8]	@ (8008128 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008120:	4618      	mov	r0, r3
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	20000618 	.word	0x20000618

0800812c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	4603      	mov	r3, r0
 8008134:	6039      	str	r1, [r7, #0]
 8008136:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008138:	79fb      	ldrb	r3, [r7, #7]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d105      	bne.n	800814a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	4907      	ldr	r1, [pc, #28]	@ (8008160 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008142:	4808      	ldr	r0, [pc, #32]	@ (8008164 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008144:	f7ff fdb2 	bl	8007cac <USBD_GetString>
 8008148:	e004      	b.n	8008154 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	4904      	ldr	r1, [pc, #16]	@ (8008160 <USBD_FS_ConfigStrDescriptor+0x34>)
 800814e:	4805      	ldr	r0, [pc, #20]	@ (8008164 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008150:	f7ff fdac 	bl	8007cac <USBD_GetString>
  }
  return USBD_StrDesc;
 8008154:	4b02      	ldr	r3, [pc, #8]	@ (8008160 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008156:	4618      	mov	r0, r3
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	2000179c 	.word	0x2000179c
 8008164:	08009450 	.word	0x08009450

08008168 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	4603      	mov	r3, r0
 8008170:	6039      	str	r1, [r7, #0]
 8008172:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008174:	79fb      	ldrb	r3, [r7, #7]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d105      	bne.n	8008186 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	4907      	ldr	r1, [pc, #28]	@ (800819c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800817e:	4808      	ldr	r0, [pc, #32]	@ (80081a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008180:	f7ff fd94 	bl	8007cac <USBD_GetString>
 8008184:	e004      	b.n	8008190 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	4904      	ldr	r1, [pc, #16]	@ (800819c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800818a:	4805      	ldr	r0, [pc, #20]	@ (80081a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800818c:	f7ff fd8e 	bl	8007cac <USBD_GetString>
  }
  return USBD_StrDesc;
 8008190:	4b02      	ldr	r3, [pc, #8]	@ (800819c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008192:	4618      	mov	r0, r3
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	2000179c 	.word	0x2000179c
 80081a0:	08009464 	.word	0x08009464

080081a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80081aa:	4b0f      	ldr	r3, [pc, #60]	@ (80081e8 <Get_SerialNum+0x44>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80081b0:	4b0e      	ldr	r3, [pc, #56]	@ (80081ec <Get_SerialNum+0x48>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80081b6:	4b0e      	ldr	r3, [pc, #56]	@ (80081f0 <Get_SerialNum+0x4c>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4413      	add	r3, r2
 80081c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d009      	beq.n	80081de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80081ca:	2208      	movs	r2, #8
 80081cc:	4909      	ldr	r1, [pc, #36]	@ (80081f4 <Get_SerialNum+0x50>)
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f000 f814 	bl	80081fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80081d4:	2204      	movs	r2, #4
 80081d6:	4908      	ldr	r1, [pc, #32]	@ (80081f8 <Get_SerialNum+0x54>)
 80081d8:	68b8      	ldr	r0, [r7, #8]
 80081da:	f000 f80f 	bl	80081fc <IntToUnicode>
  }
}
 80081de:	bf00      	nop
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	1fff7a10 	.word	0x1fff7a10
 80081ec:	1fff7a14 	.word	0x1fff7a14
 80081f0:	1fff7a18 	.word	0x1fff7a18
 80081f4:	2000061a 	.word	0x2000061a
 80081f8:	2000062a 	.word	0x2000062a

080081fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b087      	sub	sp, #28
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	4613      	mov	r3, r2
 8008208:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800820a:	2300      	movs	r3, #0
 800820c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800820e:	2300      	movs	r3, #0
 8008210:	75fb      	strb	r3, [r7, #23]
 8008212:	e027      	b.n	8008264 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	0f1b      	lsrs	r3, r3, #28
 8008218:	2b09      	cmp	r3, #9
 800821a:	d80b      	bhi.n	8008234 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	0f1b      	lsrs	r3, r3, #28
 8008220:	b2da      	uxtb	r2, r3
 8008222:	7dfb      	ldrb	r3, [r7, #23]
 8008224:	005b      	lsls	r3, r3, #1
 8008226:	4619      	mov	r1, r3
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	440b      	add	r3, r1
 800822c:	3230      	adds	r2, #48	@ 0x30
 800822e:	b2d2      	uxtb	r2, r2
 8008230:	701a      	strb	r2, [r3, #0]
 8008232:	e00a      	b.n	800824a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	0f1b      	lsrs	r3, r3, #28
 8008238:	b2da      	uxtb	r2, r3
 800823a:	7dfb      	ldrb	r3, [r7, #23]
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	4619      	mov	r1, r3
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	440b      	add	r3, r1
 8008244:	3237      	adds	r2, #55	@ 0x37
 8008246:	b2d2      	uxtb	r2, r2
 8008248:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	011b      	lsls	r3, r3, #4
 800824e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008250:	7dfb      	ldrb	r3, [r7, #23]
 8008252:	005b      	lsls	r3, r3, #1
 8008254:	3301      	adds	r3, #1
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	4413      	add	r3, r2
 800825a:	2200      	movs	r2, #0
 800825c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800825e:	7dfb      	ldrb	r3, [r7, #23]
 8008260:	3301      	adds	r3, #1
 8008262:	75fb      	strb	r3, [r7, #23]
 8008264:	7dfa      	ldrb	r2, [r7, #23]
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	429a      	cmp	r2, r3
 800826a:	d3d3      	bcc.n	8008214 <IntToUnicode+0x18>
  }
}
 800826c:	bf00      	nop
 800826e:	bf00      	nop
 8008270:	371c      	adds	r7, #28
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr

0800827a <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b082      	sub	sp, #8
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800828e:	4619      	mov	r1, r3
 8008290:	4610      	mov	r0, r2
 8008292:	f7fe fba8 	bl	80069e6 <USBD_LL_SetupStage>
}
 8008296:	bf00      	nop
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b082      	sub	sp, #8
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	460b      	mov	r3, r1
 80082a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80082b0:	78fa      	ldrb	r2, [r7, #3]
 80082b2:	6879      	ldr	r1, [r7, #4]
 80082b4:	4613      	mov	r3, r2
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	4413      	add	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	440b      	add	r3, r1
 80082be:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	78fb      	ldrb	r3, [r7, #3]
 80082c6:	4619      	mov	r1, r3
 80082c8:	f7fe fbe2 	bl	8006a90 <USBD_LL_DataOutStage>
}
 80082cc:	bf00      	nop
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	460b      	mov	r3, r1
 80082de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80082e6:	78fa      	ldrb	r2, [r7, #3]
 80082e8:	6879      	ldr	r1, [r7, #4]
 80082ea:	4613      	mov	r3, r2
 80082ec:	00db      	lsls	r3, r3, #3
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	440b      	add	r3, r1
 80082f4:	3320      	adds	r3, #32
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	78fb      	ldrb	r3, [r7, #3]
 80082fa:	4619      	mov	r1, r3
 80082fc:	f7fe fc7b 	bl	8006bf6 <USBD_LL_DataInStage>
}
 8008300:	bf00      	nop
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe fdb5 	bl	8006e86 <USBD_LL_SOF>
}
 800831c:	bf00      	nop
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800832c:	2301      	movs	r3, #1
 800832e:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	79db      	ldrb	r3, [r3, #7]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d102      	bne.n	800833e <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008338:	2300      	movs	r3, #0
 800833a:	73fb      	strb	r3, [r7, #15]
 800833c:	e008      	b.n	8008350 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	79db      	ldrb	r3, [r3, #7]
 8008342:	2b02      	cmp	r3, #2
 8008344:	d102      	bne.n	800834c <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008346:	2301      	movs	r3, #1
 8008348:	73fb      	strb	r3, [r7, #15]
 800834a:	e001      	b.n	8008350 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800834c:	f7f8 fd72 	bl	8000e34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008356:	7bfa      	ldrb	r2, [r7, #15]
 8008358:	4611      	mov	r1, r2
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe fd4f 	bl	8006dfe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008366:	4618      	mov	r0, r3
 8008368:	f7fe fcf7 	bl	8006d5a <USBD_LL_Reset>
}
 800836c:	bf00      	nop
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008382:	4618      	mov	r0, r3
 8008384:	f7fe fd4b 	bl	8006e1e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	6812      	ldr	r2, [r2, #0]
 8008396:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800839a:	f043 0301 	orr.w	r3, r3, #1
 800839e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	7adb      	ldrb	r3, [r3, #11]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d005      	beq.n	80083b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80083a8:	4b04      	ldr	r3, [pc, #16]	@ (80083bc <HAL_PCD_SuspendCallback+0x48>)
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	4a03      	ldr	r2, [pc, #12]	@ (80083bc <HAL_PCD_SuspendCallback+0x48>)
 80083ae:	f043 0306 	orr.w	r3, r3, #6
 80083b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80083b4:	bf00      	nop
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	e000ed00 	.word	0xe000ed00

080083c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7fe fd41 	bl	8006e56 <USBD_LL_Resume>
}
 80083d4:	bf00      	nop
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	460b      	mov	r3, r1
 80083e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083ee:	78fa      	ldrb	r2, [r7, #3]
 80083f0:	4611      	mov	r1, r2
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fe fd99 	bl	8006f2a <USBD_LL_IsoOUTIncomplete>
}
 80083f8:	bf00      	nop
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	460b      	mov	r3, r1
 800840a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008412:	78fa      	ldrb	r2, [r7, #3]
 8008414:	4611      	mov	r1, r2
 8008416:	4618      	mov	r0, r3
 8008418:	f7fe fd55 	bl	8006ec6 <USBD_LL_IsoINIncomplete>
}
 800841c:	bf00      	nop
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008432:	4618      	mov	r0, r3
 8008434:	f7fe fdab 	bl	8006f8e <USBD_LL_DevConnected>
}
 8008438:	bf00      	nop
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800844e:	4618      	mov	r0, r3
 8008450:	f7fe fda8 	bl	8006fa4 <USBD_LL_DevDisconnected>
}
 8008454:	bf00      	nop
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d13c      	bne.n	80084e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800846c:	4a20      	ldr	r2, [pc, #128]	@ (80084f0 <USBD_LL_Init+0x94>)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a1e      	ldr	r2, [pc, #120]	@ (80084f0 <USBD_LL_Init+0x94>)
 8008478:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800847c:	4b1c      	ldr	r3, [pc, #112]	@ (80084f0 <USBD_LL_Init+0x94>)
 800847e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008482:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008484:	4b1a      	ldr	r3, [pc, #104]	@ (80084f0 <USBD_LL_Init+0x94>)
 8008486:	2204      	movs	r2, #4
 8008488:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800848a:	4b19      	ldr	r3, [pc, #100]	@ (80084f0 <USBD_LL_Init+0x94>)
 800848c:	2202      	movs	r2, #2
 800848e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008490:	4b17      	ldr	r3, [pc, #92]	@ (80084f0 <USBD_LL_Init+0x94>)
 8008492:	2200      	movs	r2, #0
 8008494:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008496:	4b16      	ldr	r3, [pc, #88]	@ (80084f0 <USBD_LL_Init+0x94>)
 8008498:	2202      	movs	r2, #2
 800849a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800849c:	4b14      	ldr	r3, [pc, #80]	@ (80084f0 <USBD_LL_Init+0x94>)
 800849e:	2200      	movs	r2, #0
 80084a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80084a2:	4b13      	ldr	r3, [pc, #76]	@ (80084f0 <USBD_LL_Init+0x94>)
 80084a4:	2200      	movs	r2, #0
 80084a6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80084a8:	4b11      	ldr	r3, [pc, #68]	@ (80084f0 <USBD_LL_Init+0x94>)
 80084aa:	2200      	movs	r2, #0
 80084ac:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80084ae:	4b10      	ldr	r3, [pc, #64]	@ (80084f0 <USBD_LL_Init+0x94>)
 80084b0:	2200      	movs	r2, #0
 80084b2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80084b4:	4b0e      	ldr	r3, [pc, #56]	@ (80084f0 <USBD_LL_Init+0x94>)
 80084b6:	2200      	movs	r2, #0
 80084b8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80084ba:	480d      	ldr	r0, [pc, #52]	@ (80084f0 <USBD_LL_Init+0x94>)
 80084bc:	f7f9 fb89 	bl	8001bd2 <HAL_PCD_Init>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d001      	beq.n	80084ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80084c6:	f7f8 fcb5 	bl	8000e34 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80084ca:	2180      	movs	r1, #128	@ 0x80
 80084cc:	4808      	ldr	r0, [pc, #32]	@ (80084f0 <USBD_LL_Init+0x94>)
 80084ce:	f7fa fd9e 	bl	800300e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80084d2:	2240      	movs	r2, #64	@ 0x40
 80084d4:	2100      	movs	r1, #0
 80084d6:	4806      	ldr	r0, [pc, #24]	@ (80084f0 <USBD_LL_Init+0x94>)
 80084d8:	f7fa fd52 	bl	8002f80 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80084dc:	2280      	movs	r2, #128	@ 0x80
 80084de:	2101      	movs	r1, #1
 80084e0:	4803      	ldr	r0, [pc, #12]	@ (80084f0 <USBD_LL_Init+0x94>)
 80084e2:	f7fa fd4d 	bl	8002f80 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	20000f7c 	.word	0x20000f7c

080084f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800850a:	4618      	mov	r0, r3
 800850c:	f7f9 fc70 	bl	8001df0 <HAL_PCD_Start>
 8008510:	4603      	mov	r3, r0
 8008512:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008514:	7bfb      	ldrb	r3, [r7, #15]
 8008516:	4618      	mov	r0, r3
 8008518:	f000 f930 	bl	800877c <USBD_Get_USB_Status>
 800851c:	4603      	mov	r3, r0
 800851e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008520:	7bbb      	ldrb	r3, [r7, #14]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	4608      	mov	r0, r1
 8008534:	4611      	mov	r1, r2
 8008536:	461a      	mov	r2, r3
 8008538:	4603      	mov	r3, r0
 800853a:	70fb      	strb	r3, [r7, #3]
 800853c:	460b      	mov	r3, r1
 800853e:	70bb      	strb	r3, [r7, #2]
 8008540:	4613      	mov	r3, r2
 8008542:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008548:	2300      	movs	r3, #0
 800854a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008552:	78bb      	ldrb	r3, [r7, #2]
 8008554:	883a      	ldrh	r2, [r7, #0]
 8008556:	78f9      	ldrb	r1, [r7, #3]
 8008558:	f7fa f944 	bl	80027e4 <HAL_PCD_EP_Open>
 800855c:	4603      	mov	r3, r0
 800855e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008560:	7bfb      	ldrb	r3, [r7, #15]
 8008562:	4618      	mov	r0, r3
 8008564:	f000 f90a 	bl	800877c <USBD_Get_USB_Status>
 8008568:	4603      	mov	r3, r0
 800856a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800856c:	7bbb      	ldrb	r3, [r7, #14]
}
 800856e:	4618      	mov	r0, r3
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b084      	sub	sp, #16
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	460b      	mov	r3, r1
 8008580:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008590:	78fa      	ldrb	r2, [r7, #3]
 8008592:	4611      	mov	r1, r2
 8008594:	4618      	mov	r0, r3
 8008596:	f7fa f98f 	bl	80028b8 <HAL_PCD_EP_Close>
 800859a:	4603      	mov	r3, r0
 800859c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	4618      	mov	r0, r3
 80085a2:	f000 f8eb 	bl	800877c <USBD_Get_USB_Status>
 80085a6:	4603      	mov	r3, r0
 80085a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	460b      	mov	r3, r1
 80085be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085ce:	78fa      	ldrb	r2, [r7, #3]
 80085d0:	4611      	mov	r1, r2
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fa fa2f 	bl	8002a36 <HAL_PCD_EP_SetStall>
 80085d8:	4603      	mov	r3, r0
 80085da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 f8cc 	bl	800877c <USBD_Get_USB_Status>
 80085e4:	4603      	mov	r3, r0
 80085e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b084      	sub	sp, #16
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	460b      	mov	r3, r1
 80085fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008602:	2300      	movs	r3, #0
 8008604:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800860c:	78fa      	ldrb	r2, [r7, #3]
 800860e:	4611      	mov	r1, r2
 8008610:	4618      	mov	r0, r3
 8008612:	f7fa fa73 	bl	8002afc <HAL_PCD_EP_ClrStall>
 8008616:	4603      	mov	r3, r0
 8008618:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800861a:	7bfb      	ldrb	r3, [r7, #15]
 800861c:	4618      	mov	r0, r3
 800861e:	f000 f8ad 	bl	800877c <USBD_Get_USB_Status>
 8008622:	4603      	mov	r3, r0
 8008624:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008626:	7bbb      	ldrb	r3, [r7, #14]
}
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008642:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008644:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008648:	2b00      	cmp	r3, #0
 800864a:	da0b      	bge.n	8008664 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800864c:	78fb      	ldrb	r3, [r7, #3]
 800864e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008652:	68f9      	ldr	r1, [r7, #12]
 8008654:	4613      	mov	r3, r2
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	4413      	add	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	440b      	add	r3, r1
 800865e:	3316      	adds	r3, #22
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	e00b      	b.n	800867c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008664:	78fb      	ldrb	r3, [r7, #3]
 8008666:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800866a:	68f9      	ldr	r1, [r7, #12]
 800866c:	4613      	mov	r3, r2
 800866e:	00db      	lsls	r3, r3, #3
 8008670:	4413      	add	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	440b      	add	r3, r1
 8008676:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800867a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800867c:	4618      	mov	r0, r3
 800867e:	3714      	adds	r7, #20
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086a2:	78fa      	ldrb	r2, [r7, #3]
 80086a4:	4611      	mov	r1, r2
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7fa f878 	bl	800279c <HAL_PCD_SetAddress>
 80086ac:	4603      	mov	r3, r0
 80086ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086b0:	7bfb      	ldrb	r3, [r7, #15]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 f862 	bl	800877c <USBD_Get_USB_Status>
 80086b8:	4603      	mov	r3, r0
 80086ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b086      	sub	sp, #24
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	60f8      	str	r0, [r7, #12]
 80086ce:	607a      	str	r2, [r7, #4]
 80086d0:	603b      	str	r3, [r7, #0]
 80086d2:	460b      	mov	r3, r1
 80086d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80086e4:	7af9      	ldrb	r1, [r7, #11]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	f7fa f96a 	bl	80029c2 <HAL_PCD_EP_Transmit>
 80086ee:	4603      	mov	r3, r0
 80086f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f000 f841 	bl	800877c <USBD_Get_USB_Status>
 80086fa:	4603      	mov	r3, r0
 80086fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3718      	adds	r7, #24
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	607a      	str	r2, [r7, #4]
 8008712:	603b      	str	r3, [r7, #0]
 8008714:	460b      	mov	r3, r1
 8008716:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008726:	7af9      	ldrb	r1, [r7, #11]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	f7fa f90e 	bl	800294c <HAL_PCD_EP_Receive>
 8008730:	4603      	mov	r3, r0
 8008732:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008734:	7dfb      	ldrb	r3, [r7, #23]
 8008736:	4618      	mov	r0, r3
 8008738:	f000 f820 	bl	800877c <USBD_Get_USB_Status>
 800873c:	4603      	mov	r3, r0
 800873e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008740:	7dbb      	ldrb	r3, [r7, #22]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3718      	adds	r7, #24
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
	...

0800874c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008754:	4b03      	ldr	r3, [pc, #12]	@ (8008764 <USBD_static_malloc+0x18>)
}
 8008756:	4618      	mov	r0, r3
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	2000199c 	.word	0x2000199c

08008768 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]

}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008786:	2300      	movs	r3, #0
 8008788:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800878a:	79fb      	ldrb	r3, [r7, #7]
 800878c:	2b03      	cmp	r3, #3
 800878e:	d817      	bhi.n	80087c0 <USBD_Get_USB_Status+0x44>
 8008790:	a201      	add	r2, pc, #4	@ (adr r2, 8008798 <USBD_Get_USB_Status+0x1c>)
 8008792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008796:	bf00      	nop
 8008798:	080087a9 	.word	0x080087a9
 800879c:	080087af 	.word	0x080087af
 80087a0:	080087b5 	.word	0x080087b5
 80087a4:	080087bb 	.word	0x080087bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	73fb      	strb	r3, [r7, #15]
    break;
 80087ac:	e00b      	b.n	80087c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80087ae:	2303      	movs	r3, #3
 80087b0:	73fb      	strb	r3, [r7, #15]
    break;
 80087b2:	e008      	b.n	80087c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80087b4:	2301      	movs	r3, #1
 80087b6:	73fb      	strb	r3, [r7, #15]
    break;
 80087b8:	e005      	b.n	80087c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80087ba:	2303      	movs	r3, #3
 80087bc:	73fb      	strb	r3, [r7, #15]
    break;
 80087be:	e002      	b.n	80087c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80087c0:	2303      	movs	r3, #3
 80087c2:	73fb      	strb	r3, [r7, #15]
    break;
 80087c4:	bf00      	nop
  }
  return usb_status;
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <_vsniprintf_r>:
 80087d4:	b530      	push	{r4, r5, lr}
 80087d6:	4614      	mov	r4, r2
 80087d8:	2c00      	cmp	r4, #0
 80087da:	b09b      	sub	sp, #108	@ 0x6c
 80087dc:	4605      	mov	r5, r0
 80087de:	461a      	mov	r2, r3
 80087e0:	da05      	bge.n	80087ee <_vsniprintf_r+0x1a>
 80087e2:	238b      	movs	r3, #139	@ 0x8b
 80087e4:	6003      	str	r3, [r0, #0]
 80087e6:	f04f 30ff 	mov.w	r0, #4294967295
 80087ea:	b01b      	add	sp, #108	@ 0x6c
 80087ec:	bd30      	pop	{r4, r5, pc}
 80087ee:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80087f2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80087f6:	bf14      	ite	ne
 80087f8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80087fc:	4623      	moveq	r3, r4
 80087fe:	9302      	str	r3, [sp, #8]
 8008800:	9305      	str	r3, [sp, #20]
 8008802:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008806:	9100      	str	r1, [sp, #0]
 8008808:	9104      	str	r1, [sp, #16]
 800880a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800880e:	4669      	mov	r1, sp
 8008810:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008812:	f000 f9cf 	bl	8008bb4 <_svfiprintf_r>
 8008816:	1c43      	adds	r3, r0, #1
 8008818:	bfbc      	itt	lt
 800881a:	238b      	movlt	r3, #139	@ 0x8b
 800881c:	602b      	strlt	r3, [r5, #0]
 800881e:	2c00      	cmp	r4, #0
 8008820:	d0e3      	beq.n	80087ea <_vsniprintf_r+0x16>
 8008822:	9b00      	ldr	r3, [sp, #0]
 8008824:	2200      	movs	r2, #0
 8008826:	701a      	strb	r2, [r3, #0]
 8008828:	e7df      	b.n	80087ea <_vsniprintf_r+0x16>
	...

0800882c <vsniprintf>:
 800882c:	b507      	push	{r0, r1, r2, lr}
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	4613      	mov	r3, r2
 8008832:	460a      	mov	r2, r1
 8008834:	4601      	mov	r1, r0
 8008836:	4803      	ldr	r0, [pc, #12]	@ (8008844 <vsniprintf+0x18>)
 8008838:	6800      	ldr	r0, [r0, #0]
 800883a:	f7ff ffcb 	bl	80087d4 <_vsniprintf_r>
 800883e:	b003      	add	sp, #12
 8008840:	f85d fb04 	ldr.w	pc, [sp], #4
 8008844:	20000634 	.word	0x20000634

08008848 <memset>:
 8008848:	4402      	add	r2, r0
 800884a:	4603      	mov	r3, r0
 800884c:	4293      	cmp	r3, r2
 800884e:	d100      	bne.n	8008852 <memset+0xa>
 8008850:	4770      	bx	lr
 8008852:	f803 1b01 	strb.w	r1, [r3], #1
 8008856:	e7f9      	b.n	800884c <memset+0x4>

08008858 <strsep>:
 8008858:	4602      	mov	r2, r0
 800885a:	2300      	movs	r3, #0
 800885c:	6800      	ldr	r0, [r0, #0]
 800885e:	f000 b800 	b.w	8008862 <__strtok_r>

08008862 <__strtok_r>:
 8008862:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008864:	4604      	mov	r4, r0
 8008866:	b908      	cbnz	r0, 800886c <__strtok_r+0xa>
 8008868:	6814      	ldr	r4, [r2, #0]
 800886a:	b144      	cbz	r4, 800887e <__strtok_r+0x1c>
 800886c:	4620      	mov	r0, r4
 800886e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008872:	460f      	mov	r7, r1
 8008874:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008878:	b91e      	cbnz	r6, 8008882 <__strtok_r+0x20>
 800887a:	b965      	cbnz	r5, 8008896 <__strtok_r+0x34>
 800887c:	6015      	str	r5, [r2, #0]
 800887e:	2000      	movs	r0, #0
 8008880:	e005      	b.n	800888e <__strtok_r+0x2c>
 8008882:	42b5      	cmp	r5, r6
 8008884:	d1f6      	bne.n	8008874 <__strtok_r+0x12>
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1f0      	bne.n	800886c <__strtok_r+0xa>
 800888a:	6014      	str	r4, [r2, #0]
 800888c:	7003      	strb	r3, [r0, #0]
 800888e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008890:	461c      	mov	r4, r3
 8008892:	e00c      	b.n	80088ae <__strtok_r+0x4c>
 8008894:	b915      	cbnz	r5, 800889c <__strtok_r+0x3a>
 8008896:	f814 3b01 	ldrb.w	r3, [r4], #1
 800889a:	460e      	mov	r6, r1
 800889c:	f816 5b01 	ldrb.w	r5, [r6], #1
 80088a0:	42ab      	cmp	r3, r5
 80088a2:	d1f7      	bne.n	8008894 <__strtok_r+0x32>
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d0f3      	beq.n	8008890 <__strtok_r+0x2e>
 80088a8:	2300      	movs	r3, #0
 80088aa:	f804 3c01 	strb.w	r3, [r4, #-1]
 80088ae:	6014      	str	r4, [r2, #0]
 80088b0:	e7ed      	b.n	800888e <__strtok_r+0x2c>
	...

080088b4 <__errno>:
 80088b4:	4b01      	ldr	r3, [pc, #4]	@ (80088bc <__errno+0x8>)
 80088b6:	6818      	ldr	r0, [r3, #0]
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	20000634 	.word	0x20000634

080088c0 <__libc_init_array>:
 80088c0:	b570      	push	{r4, r5, r6, lr}
 80088c2:	4d0d      	ldr	r5, [pc, #52]	@ (80088f8 <__libc_init_array+0x38>)
 80088c4:	4c0d      	ldr	r4, [pc, #52]	@ (80088fc <__libc_init_array+0x3c>)
 80088c6:	1b64      	subs	r4, r4, r5
 80088c8:	10a4      	asrs	r4, r4, #2
 80088ca:	2600      	movs	r6, #0
 80088cc:	42a6      	cmp	r6, r4
 80088ce:	d109      	bne.n	80088e4 <__libc_init_array+0x24>
 80088d0:	4d0b      	ldr	r5, [pc, #44]	@ (8008900 <__libc_init_array+0x40>)
 80088d2:	4c0c      	ldr	r4, [pc, #48]	@ (8008904 <__libc_init_array+0x44>)
 80088d4:	f000 fc66 	bl	80091a4 <_init>
 80088d8:	1b64      	subs	r4, r4, r5
 80088da:	10a4      	asrs	r4, r4, #2
 80088dc:	2600      	movs	r6, #0
 80088de:	42a6      	cmp	r6, r4
 80088e0:	d105      	bne.n	80088ee <__libc_init_array+0x2e>
 80088e2:	bd70      	pop	{r4, r5, r6, pc}
 80088e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80088e8:	4798      	blx	r3
 80088ea:	3601      	adds	r6, #1
 80088ec:	e7ee      	b.n	80088cc <__libc_init_array+0xc>
 80088ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80088f2:	4798      	blx	r3
 80088f4:	3601      	adds	r6, #1
 80088f6:	e7f2      	b.n	80088de <__libc_init_array+0x1e>
 80088f8:	0800950c 	.word	0x0800950c
 80088fc:	0800950c 	.word	0x0800950c
 8008900:	0800950c 	.word	0x0800950c
 8008904:	08009510 	.word	0x08009510

08008908 <__retarget_lock_acquire_recursive>:
 8008908:	4770      	bx	lr

0800890a <__retarget_lock_release_recursive>:
 800890a:	4770      	bx	lr

0800890c <_free_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	4605      	mov	r5, r0
 8008910:	2900      	cmp	r1, #0
 8008912:	d041      	beq.n	8008998 <_free_r+0x8c>
 8008914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008918:	1f0c      	subs	r4, r1, #4
 800891a:	2b00      	cmp	r3, #0
 800891c:	bfb8      	it	lt
 800891e:	18e4      	addlt	r4, r4, r3
 8008920:	f000 f8e0 	bl	8008ae4 <__malloc_lock>
 8008924:	4a1d      	ldr	r2, [pc, #116]	@ (800899c <_free_r+0x90>)
 8008926:	6813      	ldr	r3, [r2, #0]
 8008928:	b933      	cbnz	r3, 8008938 <_free_r+0x2c>
 800892a:	6063      	str	r3, [r4, #4]
 800892c:	6014      	str	r4, [r2, #0]
 800892e:	4628      	mov	r0, r5
 8008930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008934:	f000 b8dc 	b.w	8008af0 <__malloc_unlock>
 8008938:	42a3      	cmp	r3, r4
 800893a:	d908      	bls.n	800894e <_free_r+0x42>
 800893c:	6820      	ldr	r0, [r4, #0]
 800893e:	1821      	adds	r1, r4, r0
 8008940:	428b      	cmp	r3, r1
 8008942:	bf01      	itttt	eq
 8008944:	6819      	ldreq	r1, [r3, #0]
 8008946:	685b      	ldreq	r3, [r3, #4]
 8008948:	1809      	addeq	r1, r1, r0
 800894a:	6021      	streq	r1, [r4, #0]
 800894c:	e7ed      	b.n	800892a <_free_r+0x1e>
 800894e:	461a      	mov	r2, r3
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	b10b      	cbz	r3, 8008958 <_free_r+0x4c>
 8008954:	42a3      	cmp	r3, r4
 8008956:	d9fa      	bls.n	800894e <_free_r+0x42>
 8008958:	6811      	ldr	r1, [r2, #0]
 800895a:	1850      	adds	r0, r2, r1
 800895c:	42a0      	cmp	r0, r4
 800895e:	d10b      	bne.n	8008978 <_free_r+0x6c>
 8008960:	6820      	ldr	r0, [r4, #0]
 8008962:	4401      	add	r1, r0
 8008964:	1850      	adds	r0, r2, r1
 8008966:	4283      	cmp	r3, r0
 8008968:	6011      	str	r1, [r2, #0]
 800896a:	d1e0      	bne.n	800892e <_free_r+0x22>
 800896c:	6818      	ldr	r0, [r3, #0]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	6053      	str	r3, [r2, #4]
 8008972:	4408      	add	r0, r1
 8008974:	6010      	str	r0, [r2, #0]
 8008976:	e7da      	b.n	800892e <_free_r+0x22>
 8008978:	d902      	bls.n	8008980 <_free_r+0x74>
 800897a:	230c      	movs	r3, #12
 800897c:	602b      	str	r3, [r5, #0]
 800897e:	e7d6      	b.n	800892e <_free_r+0x22>
 8008980:	6820      	ldr	r0, [r4, #0]
 8008982:	1821      	adds	r1, r4, r0
 8008984:	428b      	cmp	r3, r1
 8008986:	bf04      	itt	eq
 8008988:	6819      	ldreq	r1, [r3, #0]
 800898a:	685b      	ldreq	r3, [r3, #4]
 800898c:	6063      	str	r3, [r4, #4]
 800898e:	bf04      	itt	eq
 8008990:	1809      	addeq	r1, r1, r0
 8008992:	6021      	streq	r1, [r4, #0]
 8008994:	6054      	str	r4, [r2, #4]
 8008996:	e7ca      	b.n	800892e <_free_r+0x22>
 8008998:	bd38      	pop	{r3, r4, r5, pc}
 800899a:	bf00      	nop
 800899c:	20001afc 	.word	0x20001afc

080089a0 <sbrk_aligned>:
 80089a0:	b570      	push	{r4, r5, r6, lr}
 80089a2:	4e0f      	ldr	r6, [pc, #60]	@ (80089e0 <sbrk_aligned+0x40>)
 80089a4:	460c      	mov	r4, r1
 80089a6:	6831      	ldr	r1, [r6, #0]
 80089a8:	4605      	mov	r5, r0
 80089aa:	b911      	cbnz	r1, 80089b2 <sbrk_aligned+0x12>
 80089ac:	f000 fba6 	bl	80090fc <_sbrk_r>
 80089b0:	6030      	str	r0, [r6, #0]
 80089b2:	4621      	mov	r1, r4
 80089b4:	4628      	mov	r0, r5
 80089b6:	f000 fba1 	bl	80090fc <_sbrk_r>
 80089ba:	1c43      	adds	r3, r0, #1
 80089bc:	d103      	bne.n	80089c6 <sbrk_aligned+0x26>
 80089be:	f04f 34ff 	mov.w	r4, #4294967295
 80089c2:	4620      	mov	r0, r4
 80089c4:	bd70      	pop	{r4, r5, r6, pc}
 80089c6:	1cc4      	adds	r4, r0, #3
 80089c8:	f024 0403 	bic.w	r4, r4, #3
 80089cc:	42a0      	cmp	r0, r4
 80089ce:	d0f8      	beq.n	80089c2 <sbrk_aligned+0x22>
 80089d0:	1a21      	subs	r1, r4, r0
 80089d2:	4628      	mov	r0, r5
 80089d4:	f000 fb92 	bl	80090fc <_sbrk_r>
 80089d8:	3001      	adds	r0, #1
 80089da:	d1f2      	bne.n	80089c2 <sbrk_aligned+0x22>
 80089dc:	e7ef      	b.n	80089be <sbrk_aligned+0x1e>
 80089de:	bf00      	nop
 80089e0:	20001af8 	.word	0x20001af8

080089e4 <_malloc_r>:
 80089e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089e8:	1ccd      	adds	r5, r1, #3
 80089ea:	f025 0503 	bic.w	r5, r5, #3
 80089ee:	3508      	adds	r5, #8
 80089f0:	2d0c      	cmp	r5, #12
 80089f2:	bf38      	it	cc
 80089f4:	250c      	movcc	r5, #12
 80089f6:	2d00      	cmp	r5, #0
 80089f8:	4606      	mov	r6, r0
 80089fa:	db01      	blt.n	8008a00 <_malloc_r+0x1c>
 80089fc:	42a9      	cmp	r1, r5
 80089fe:	d904      	bls.n	8008a0a <_malloc_r+0x26>
 8008a00:	230c      	movs	r3, #12
 8008a02:	6033      	str	r3, [r6, #0]
 8008a04:	2000      	movs	r0, #0
 8008a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ae0 <_malloc_r+0xfc>
 8008a0e:	f000 f869 	bl	8008ae4 <__malloc_lock>
 8008a12:	f8d8 3000 	ldr.w	r3, [r8]
 8008a16:	461c      	mov	r4, r3
 8008a18:	bb44      	cbnz	r4, 8008a6c <_malloc_r+0x88>
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f7ff ffbf 	bl	80089a0 <sbrk_aligned>
 8008a22:	1c43      	adds	r3, r0, #1
 8008a24:	4604      	mov	r4, r0
 8008a26:	d158      	bne.n	8008ada <_malloc_r+0xf6>
 8008a28:	f8d8 4000 	ldr.w	r4, [r8]
 8008a2c:	4627      	mov	r7, r4
 8008a2e:	2f00      	cmp	r7, #0
 8008a30:	d143      	bne.n	8008aba <_malloc_r+0xd6>
 8008a32:	2c00      	cmp	r4, #0
 8008a34:	d04b      	beq.n	8008ace <_malloc_r+0xea>
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	4639      	mov	r1, r7
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	eb04 0903 	add.w	r9, r4, r3
 8008a40:	f000 fb5c 	bl	80090fc <_sbrk_r>
 8008a44:	4581      	cmp	r9, r0
 8008a46:	d142      	bne.n	8008ace <_malloc_r+0xea>
 8008a48:	6821      	ldr	r1, [r4, #0]
 8008a4a:	1a6d      	subs	r5, r5, r1
 8008a4c:	4629      	mov	r1, r5
 8008a4e:	4630      	mov	r0, r6
 8008a50:	f7ff ffa6 	bl	80089a0 <sbrk_aligned>
 8008a54:	3001      	adds	r0, #1
 8008a56:	d03a      	beq.n	8008ace <_malloc_r+0xea>
 8008a58:	6823      	ldr	r3, [r4, #0]
 8008a5a:	442b      	add	r3, r5
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a62:	685a      	ldr	r2, [r3, #4]
 8008a64:	bb62      	cbnz	r2, 8008ac0 <_malloc_r+0xdc>
 8008a66:	f8c8 7000 	str.w	r7, [r8]
 8008a6a:	e00f      	b.n	8008a8c <_malloc_r+0xa8>
 8008a6c:	6822      	ldr	r2, [r4, #0]
 8008a6e:	1b52      	subs	r2, r2, r5
 8008a70:	d420      	bmi.n	8008ab4 <_malloc_r+0xd0>
 8008a72:	2a0b      	cmp	r2, #11
 8008a74:	d917      	bls.n	8008aa6 <_malloc_r+0xc2>
 8008a76:	1961      	adds	r1, r4, r5
 8008a78:	42a3      	cmp	r3, r4
 8008a7a:	6025      	str	r5, [r4, #0]
 8008a7c:	bf18      	it	ne
 8008a7e:	6059      	strne	r1, [r3, #4]
 8008a80:	6863      	ldr	r3, [r4, #4]
 8008a82:	bf08      	it	eq
 8008a84:	f8c8 1000 	streq.w	r1, [r8]
 8008a88:	5162      	str	r2, [r4, r5]
 8008a8a:	604b      	str	r3, [r1, #4]
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	f000 f82f 	bl	8008af0 <__malloc_unlock>
 8008a92:	f104 000b 	add.w	r0, r4, #11
 8008a96:	1d23      	adds	r3, r4, #4
 8008a98:	f020 0007 	bic.w	r0, r0, #7
 8008a9c:	1ac2      	subs	r2, r0, r3
 8008a9e:	bf1c      	itt	ne
 8008aa0:	1a1b      	subne	r3, r3, r0
 8008aa2:	50a3      	strne	r3, [r4, r2]
 8008aa4:	e7af      	b.n	8008a06 <_malloc_r+0x22>
 8008aa6:	6862      	ldr	r2, [r4, #4]
 8008aa8:	42a3      	cmp	r3, r4
 8008aaa:	bf0c      	ite	eq
 8008aac:	f8c8 2000 	streq.w	r2, [r8]
 8008ab0:	605a      	strne	r2, [r3, #4]
 8008ab2:	e7eb      	b.n	8008a8c <_malloc_r+0xa8>
 8008ab4:	4623      	mov	r3, r4
 8008ab6:	6864      	ldr	r4, [r4, #4]
 8008ab8:	e7ae      	b.n	8008a18 <_malloc_r+0x34>
 8008aba:	463c      	mov	r4, r7
 8008abc:	687f      	ldr	r7, [r7, #4]
 8008abe:	e7b6      	b.n	8008a2e <_malloc_r+0x4a>
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	42a3      	cmp	r3, r4
 8008ac6:	d1fb      	bne.n	8008ac0 <_malloc_r+0xdc>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	6053      	str	r3, [r2, #4]
 8008acc:	e7de      	b.n	8008a8c <_malloc_r+0xa8>
 8008ace:	230c      	movs	r3, #12
 8008ad0:	6033      	str	r3, [r6, #0]
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	f000 f80c 	bl	8008af0 <__malloc_unlock>
 8008ad8:	e794      	b.n	8008a04 <_malloc_r+0x20>
 8008ada:	6005      	str	r5, [r0, #0]
 8008adc:	e7d6      	b.n	8008a8c <_malloc_r+0xa8>
 8008ade:	bf00      	nop
 8008ae0:	20001afc 	.word	0x20001afc

08008ae4 <__malloc_lock>:
 8008ae4:	4801      	ldr	r0, [pc, #4]	@ (8008aec <__malloc_lock+0x8>)
 8008ae6:	f7ff bf0f 	b.w	8008908 <__retarget_lock_acquire_recursive>
 8008aea:	bf00      	nop
 8008aec:	20001af4 	.word	0x20001af4

08008af0 <__malloc_unlock>:
 8008af0:	4801      	ldr	r0, [pc, #4]	@ (8008af8 <__malloc_unlock+0x8>)
 8008af2:	f7ff bf0a 	b.w	800890a <__retarget_lock_release_recursive>
 8008af6:	bf00      	nop
 8008af8:	20001af4 	.word	0x20001af4

08008afc <__ssputs_r>:
 8008afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b00:	688e      	ldr	r6, [r1, #8]
 8008b02:	461f      	mov	r7, r3
 8008b04:	42be      	cmp	r6, r7
 8008b06:	680b      	ldr	r3, [r1, #0]
 8008b08:	4682      	mov	sl, r0
 8008b0a:	460c      	mov	r4, r1
 8008b0c:	4690      	mov	r8, r2
 8008b0e:	d82d      	bhi.n	8008b6c <__ssputs_r+0x70>
 8008b10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008b18:	d026      	beq.n	8008b68 <__ssputs_r+0x6c>
 8008b1a:	6965      	ldr	r5, [r4, #20]
 8008b1c:	6909      	ldr	r1, [r1, #16]
 8008b1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b22:	eba3 0901 	sub.w	r9, r3, r1
 8008b26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b2a:	1c7b      	adds	r3, r7, #1
 8008b2c:	444b      	add	r3, r9
 8008b2e:	106d      	asrs	r5, r5, #1
 8008b30:	429d      	cmp	r5, r3
 8008b32:	bf38      	it	cc
 8008b34:	461d      	movcc	r5, r3
 8008b36:	0553      	lsls	r3, r2, #21
 8008b38:	d527      	bpl.n	8008b8a <__ssputs_r+0x8e>
 8008b3a:	4629      	mov	r1, r5
 8008b3c:	f7ff ff52 	bl	80089e4 <_malloc_r>
 8008b40:	4606      	mov	r6, r0
 8008b42:	b360      	cbz	r0, 8008b9e <__ssputs_r+0xa2>
 8008b44:	6921      	ldr	r1, [r4, #16]
 8008b46:	464a      	mov	r2, r9
 8008b48:	f000 fae8 	bl	800911c <memcpy>
 8008b4c:	89a3      	ldrh	r3, [r4, #12]
 8008b4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b56:	81a3      	strh	r3, [r4, #12]
 8008b58:	6126      	str	r6, [r4, #16]
 8008b5a:	6165      	str	r5, [r4, #20]
 8008b5c:	444e      	add	r6, r9
 8008b5e:	eba5 0509 	sub.w	r5, r5, r9
 8008b62:	6026      	str	r6, [r4, #0]
 8008b64:	60a5      	str	r5, [r4, #8]
 8008b66:	463e      	mov	r6, r7
 8008b68:	42be      	cmp	r6, r7
 8008b6a:	d900      	bls.n	8008b6e <__ssputs_r+0x72>
 8008b6c:	463e      	mov	r6, r7
 8008b6e:	6820      	ldr	r0, [r4, #0]
 8008b70:	4632      	mov	r2, r6
 8008b72:	4641      	mov	r1, r8
 8008b74:	f000 faa8 	bl	80090c8 <memmove>
 8008b78:	68a3      	ldr	r3, [r4, #8]
 8008b7a:	1b9b      	subs	r3, r3, r6
 8008b7c:	60a3      	str	r3, [r4, #8]
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	4433      	add	r3, r6
 8008b82:	6023      	str	r3, [r4, #0]
 8008b84:	2000      	movs	r0, #0
 8008b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8a:	462a      	mov	r2, r5
 8008b8c:	f000 fad4 	bl	8009138 <_realloc_r>
 8008b90:	4606      	mov	r6, r0
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d1e0      	bne.n	8008b58 <__ssputs_r+0x5c>
 8008b96:	6921      	ldr	r1, [r4, #16]
 8008b98:	4650      	mov	r0, sl
 8008b9a:	f7ff feb7 	bl	800890c <_free_r>
 8008b9e:	230c      	movs	r3, #12
 8008ba0:	f8ca 3000 	str.w	r3, [sl]
 8008ba4:	89a3      	ldrh	r3, [r4, #12]
 8008ba6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008baa:	81a3      	strh	r3, [r4, #12]
 8008bac:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb0:	e7e9      	b.n	8008b86 <__ssputs_r+0x8a>
	...

08008bb4 <_svfiprintf_r>:
 8008bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb8:	4698      	mov	r8, r3
 8008bba:	898b      	ldrh	r3, [r1, #12]
 8008bbc:	061b      	lsls	r3, r3, #24
 8008bbe:	b09d      	sub	sp, #116	@ 0x74
 8008bc0:	4607      	mov	r7, r0
 8008bc2:	460d      	mov	r5, r1
 8008bc4:	4614      	mov	r4, r2
 8008bc6:	d510      	bpl.n	8008bea <_svfiprintf_r+0x36>
 8008bc8:	690b      	ldr	r3, [r1, #16]
 8008bca:	b973      	cbnz	r3, 8008bea <_svfiprintf_r+0x36>
 8008bcc:	2140      	movs	r1, #64	@ 0x40
 8008bce:	f7ff ff09 	bl	80089e4 <_malloc_r>
 8008bd2:	6028      	str	r0, [r5, #0]
 8008bd4:	6128      	str	r0, [r5, #16]
 8008bd6:	b930      	cbnz	r0, 8008be6 <_svfiprintf_r+0x32>
 8008bd8:	230c      	movs	r3, #12
 8008bda:	603b      	str	r3, [r7, #0]
 8008bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008be0:	b01d      	add	sp, #116	@ 0x74
 8008be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be6:	2340      	movs	r3, #64	@ 0x40
 8008be8:	616b      	str	r3, [r5, #20]
 8008bea:	2300      	movs	r3, #0
 8008bec:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bee:	2320      	movs	r3, #32
 8008bf0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008bf4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bf8:	2330      	movs	r3, #48	@ 0x30
 8008bfa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008d98 <_svfiprintf_r+0x1e4>
 8008bfe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c02:	f04f 0901 	mov.w	r9, #1
 8008c06:	4623      	mov	r3, r4
 8008c08:	469a      	mov	sl, r3
 8008c0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c0e:	b10a      	cbz	r2, 8008c14 <_svfiprintf_r+0x60>
 8008c10:	2a25      	cmp	r2, #37	@ 0x25
 8008c12:	d1f9      	bne.n	8008c08 <_svfiprintf_r+0x54>
 8008c14:	ebba 0b04 	subs.w	fp, sl, r4
 8008c18:	d00b      	beq.n	8008c32 <_svfiprintf_r+0x7e>
 8008c1a:	465b      	mov	r3, fp
 8008c1c:	4622      	mov	r2, r4
 8008c1e:	4629      	mov	r1, r5
 8008c20:	4638      	mov	r0, r7
 8008c22:	f7ff ff6b 	bl	8008afc <__ssputs_r>
 8008c26:	3001      	adds	r0, #1
 8008c28:	f000 80a7 	beq.w	8008d7a <_svfiprintf_r+0x1c6>
 8008c2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c2e:	445a      	add	r2, fp
 8008c30:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c32:	f89a 3000 	ldrb.w	r3, [sl]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f000 809f 	beq.w	8008d7a <_svfiprintf_r+0x1c6>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c46:	f10a 0a01 	add.w	sl, sl, #1
 8008c4a:	9304      	str	r3, [sp, #16]
 8008c4c:	9307      	str	r3, [sp, #28]
 8008c4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c52:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c54:	4654      	mov	r4, sl
 8008c56:	2205      	movs	r2, #5
 8008c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c5c:	484e      	ldr	r0, [pc, #312]	@ (8008d98 <_svfiprintf_r+0x1e4>)
 8008c5e:	f7f7 fad7 	bl	8000210 <memchr>
 8008c62:	9a04      	ldr	r2, [sp, #16]
 8008c64:	b9d8      	cbnz	r0, 8008c9e <_svfiprintf_r+0xea>
 8008c66:	06d0      	lsls	r0, r2, #27
 8008c68:	bf44      	itt	mi
 8008c6a:	2320      	movmi	r3, #32
 8008c6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c70:	0711      	lsls	r1, r2, #28
 8008c72:	bf44      	itt	mi
 8008c74:	232b      	movmi	r3, #43	@ 0x2b
 8008c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c80:	d015      	beq.n	8008cae <_svfiprintf_r+0xfa>
 8008c82:	9a07      	ldr	r2, [sp, #28]
 8008c84:	4654      	mov	r4, sl
 8008c86:	2000      	movs	r0, #0
 8008c88:	f04f 0c0a 	mov.w	ip, #10
 8008c8c:	4621      	mov	r1, r4
 8008c8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c92:	3b30      	subs	r3, #48	@ 0x30
 8008c94:	2b09      	cmp	r3, #9
 8008c96:	d94b      	bls.n	8008d30 <_svfiprintf_r+0x17c>
 8008c98:	b1b0      	cbz	r0, 8008cc8 <_svfiprintf_r+0x114>
 8008c9a:	9207      	str	r2, [sp, #28]
 8008c9c:	e014      	b.n	8008cc8 <_svfiprintf_r+0x114>
 8008c9e:	eba0 0308 	sub.w	r3, r0, r8
 8008ca2:	fa09 f303 	lsl.w	r3, r9, r3
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	9304      	str	r3, [sp, #16]
 8008caa:	46a2      	mov	sl, r4
 8008cac:	e7d2      	b.n	8008c54 <_svfiprintf_r+0xa0>
 8008cae:	9b03      	ldr	r3, [sp, #12]
 8008cb0:	1d19      	adds	r1, r3, #4
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	9103      	str	r1, [sp, #12]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	bfbb      	ittet	lt
 8008cba:	425b      	neglt	r3, r3
 8008cbc:	f042 0202 	orrlt.w	r2, r2, #2
 8008cc0:	9307      	strge	r3, [sp, #28]
 8008cc2:	9307      	strlt	r3, [sp, #28]
 8008cc4:	bfb8      	it	lt
 8008cc6:	9204      	strlt	r2, [sp, #16]
 8008cc8:	7823      	ldrb	r3, [r4, #0]
 8008cca:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ccc:	d10a      	bne.n	8008ce4 <_svfiprintf_r+0x130>
 8008cce:	7863      	ldrb	r3, [r4, #1]
 8008cd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cd2:	d132      	bne.n	8008d3a <_svfiprintf_r+0x186>
 8008cd4:	9b03      	ldr	r3, [sp, #12]
 8008cd6:	1d1a      	adds	r2, r3, #4
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	9203      	str	r2, [sp, #12]
 8008cdc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ce0:	3402      	adds	r4, #2
 8008ce2:	9305      	str	r3, [sp, #20]
 8008ce4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008da8 <_svfiprintf_r+0x1f4>
 8008ce8:	7821      	ldrb	r1, [r4, #0]
 8008cea:	2203      	movs	r2, #3
 8008cec:	4650      	mov	r0, sl
 8008cee:	f7f7 fa8f 	bl	8000210 <memchr>
 8008cf2:	b138      	cbz	r0, 8008d04 <_svfiprintf_r+0x150>
 8008cf4:	9b04      	ldr	r3, [sp, #16]
 8008cf6:	eba0 000a 	sub.w	r0, r0, sl
 8008cfa:	2240      	movs	r2, #64	@ 0x40
 8008cfc:	4082      	lsls	r2, r0
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	3401      	adds	r4, #1
 8008d02:	9304      	str	r3, [sp, #16]
 8008d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d08:	4824      	ldr	r0, [pc, #144]	@ (8008d9c <_svfiprintf_r+0x1e8>)
 8008d0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d0e:	2206      	movs	r2, #6
 8008d10:	f7f7 fa7e 	bl	8000210 <memchr>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	d036      	beq.n	8008d86 <_svfiprintf_r+0x1d2>
 8008d18:	4b21      	ldr	r3, [pc, #132]	@ (8008da0 <_svfiprintf_r+0x1ec>)
 8008d1a:	bb1b      	cbnz	r3, 8008d64 <_svfiprintf_r+0x1b0>
 8008d1c:	9b03      	ldr	r3, [sp, #12]
 8008d1e:	3307      	adds	r3, #7
 8008d20:	f023 0307 	bic.w	r3, r3, #7
 8008d24:	3308      	adds	r3, #8
 8008d26:	9303      	str	r3, [sp, #12]
 8008d28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d2a:	4433      	add	r3, r6
 8008d2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d2e:	e76a      	b.n	8008c06 <_svfiprintf_r+0x52>
 8008d30:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d34:	460c      	mov	r4, r1
 8008d36:	2001      	movs	r0, #1
 8008d38:	e7a8      	b.n	8008c8c <_svfiprintf_r+0xd8>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	3401      	adds	r4, #1
 8008d3e:	9305      	str	r3, [sp, #20]
 8008d40:	4619      	mov	r1, r3
 8008d42:	f04f 0c0a 	mov.w	ip, #10
 8008d46:	4620      	mov	r0, r4
 8008d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d4c:	3a30      	subs	r2, #48	@ 0x30
 8008d4e:	2a09      	cmp	r2, #9
 8008d50:	d903      	bls.n	8008d5a <_svfiprintf_r+0x1a6>
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d0c6      	beq.n	8008ce4 <_svfiprintf_r+0x130>
 8008d56:	9105      	str	r1, [sp, #20]
 8008d58:	e7c4      	b.n	8008ce4 <_svfiprintf_r+0x130>
 8008d5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d5e:	4604      	mov	r4, r0
 8008d60:	2301      	movs	r3, #1
 8008d62:	e7f0      	b.n	8008d46 <_svfiprintf_r+0x192>
 8008d64:	ab03      	add	r3, sp, #12
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	462a      	mov	r2, r5
 8008d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8008da4 <_svfiprintf_r+0x1f0>)
 8008d6c:	a904      	add	r1, sp, #16
 8008d6e:	4638      	mov	r0, r7
 8008d70:	f3af 8000 	nop.w
 8008d74:	1c42      	adds	r2, r0, #1
 8008d76:	4606      	mov	r6, r0
 8008d78:	d1d6      	bne.n	8008d28 <_svfiprintf_r+0x174>
 8008d7a:	89ab      	ldrh	r3, [r5, #12]
 8008d7c:	065b      	lsls	r3, r3, #25
 8008d7e:	f53f af2d 	bmi.w	8008bdc <_svfiprintf_r+0x28>
 8008d82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d84:	e72c      	b.n	8008be0 <_svfiprintf_r+0x2c>
 8008d86:	ab03      	add	r3, sp, #12
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	462a      	mov	r2, r5
 8008d8c:	4b05      	ldr	r3, [pc, #20]	@ (8008da4 <_svfiprintf_r+0x1f0>)
 8008d8e:	a904      	add	r1, sp, #16
 8008d90:	4638      	mov	r0, r7
 8008d92:	f000 f879 	bl	8008e88 <_printf_i>
 8008d96:	e7ed      	b.n	8008d74 <_svfiprintf_r+0x1c0>
 8008d98:	080094d0 	.word	0x080094d0
 8008d9c:	080094da 	.word	0x080094da
 8008da0:	00000000 	.word	0x00000000
 8008da4:	08008afd 	.word	0x08008afd
 8008da8:	080094d6 	.word	0x080094d6

08008dac <_printf_common>:
 8008dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db0:	4616      	mov	r6, r2
 8008db2:	4698      	mov	r8, r3
 8008db4:	688a      	ldr	r2, [r1, #8]
 8008db6:	690b      	ldr	r3, [r1, #16]
 8008db8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	bfb8      	it	lt
 8008dc0:	4613      	movlt	r3, r2
 8008dc2:	6033      	str	r3, [r6, #0]
 8008dc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008dc8:	4607      	mov	r7, r0
 8008dca:	460c      	mov	r4, r1
 8008dcc:	b10a      	cbz	r2, 8008dd2 <_printf_common+0x26>
 8008dce:	3301      	adds	r3, #1
 8008dd0:	6033      	str	r3, [r6, #0]
 8008dd2:	6823      	ldr	r3, [r4, #0]
 8008dd4:	0699      	lsls	r1, r3, #26
 8008dd6:	bf42      	ittt	mi
 8008dd8:	6833      	ldrmi	r3, [r6, #0]
 8008dda:	3302      	addmi	r3, #2
 8008ddc:	6033      	strmi	r3, [r6, #0]
 8008dde:	6825      	ldr	r5, [r4, #0]
 8008de0:	f015 0506 	ands.w	r5, r5, #6
 8008de4:	d106      	bne.n	8008df4 <_printf_common+0x48>
 8008de6:	f104 0a19 	add.w	sl, r4, #25
 8008dea:	68e3      	ldr	r3, [r4, #12]
 8008dec:	6832      	ldr	r2, [r6, #0]
 8008dee:	1a9b      	subs	r3, r3, r2
 8008df0:	42ab      	cmp	r3, r5
 8008df2:	dc26      	bgt.n	8008e42 <_printf_common+0x96>
 8008df4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008df8:	6822      	ldr	r2, [r4, #0]
 8008dfa:	3b00      	subs	r3, #0
 8008dfc:	bf18      	it	ne
 8008dfe:	2301      	movne	r3, #1
 8008e00:	0692      	lsls	r2, r2, #26
 8008e02:	d42b      	bmi.n	8008e5c <_printf_common+0xb0>
 8008e04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e08:	4641      	mov	r1, r8
 8008e0a:	4638      	mov	r0, r7
 8008e0c:	47c8      	blx	r9
 8008e0e:	3001      	adds	r0, #1
 8008e10:	d01e      	beq.n	8008e50 <_printf_common+0xa4>
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	6922      	ldr	r2, [r4, #16]
 8008e16:	f003 0306 	and.w	r3, r3, #6
 8008e1a:	2b04      	cmp	r3, #4
 8008e1c:	bf02      	ittt	eq
 8008e1e:	68e5      	ldreq	r5, [r4, #12]
 8008e20:	6833      	ldreq	r3, [r6, #0]
 8008e22:	1aed      	subeq	r5, r5, r3
 8008e24:	68a3      	ldr	r3, [r4, #8]
 8008e26:	bf0c      	ite	eq
 8008e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e2c:	2500      	movne	r5, #0
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	bfc4      	itt	gt
 8008e32:	1a9b      	subgt	r3, r3, r2
 8008e34:	18ed      	addgt	r5, r5, r3
 8008e36:	2600      	movs	r6, #0
 8008e38:	341a      	adds	r4, #26
 8008e3a:	42b5      	cmp	r5, r6
 8008e3c:	d11a      	bne.n	8008e74 <_printf_common+0xc8>
 8008e3e:	2000      	movs	r0, #0
 8008e40:	e008      	b.n	8008e54 <_printf_common+0xa8>
 8008e42:	2301      	movs	r3, #1
 8008e44:	4652      	mov	r2, sl
 8008e46:	4641      	mov	r1, r8
 8008e48:	4638      	mov	r0, r7
 8008e4a:	47c8      	blx	r9
 8008e4c:	3001      	adds	r0, #1
 8008e4e:	d103      	bne.n	8008e58 <_printf_common+0xac>
 8008e50:	f04f 30ff 	mov.w	r0, #4294967295
 8008e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e58:	3501      	adds	r5, #1
 8008e5a:	e7c6      	b.n	8008dea <_printf_common+0x3e>
 8008e5c:	18e1      	adds	r1, r4, r3
 8008e5e:	1c5a      	adds	r2, r3, #1
 8008e60:	2030      	movs	r0, #48	@ 0x30
 8008e62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e66:	4422      	add	r2, r4
 8008e68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e70:	3302      	adds	r3, #2
 8008e72:	e7c7      	b.n	8008e04 <_printf_common+0x58>
 8008e74:	2301      	movs	r3, #1
 8008e76:	4622      	mov	r2, r4
 8008e78:	4641      	mov	r1, r8
 8008e7a:	4638      	mov	r0, r7
 8008e7c:	47c8      	blx	r9
 8008e7e:	3001      	adds	r0, #1
 8008e80:	d0e6      	beq.n	8008e50 <_printf_common+0xa4>
 8008e82:	3601      	adds	r6, #1
 8008e84:	e7d9      	b.n	8008e3a <_printf_common+0x8e>
	...

08008e88 <_printf_i>:
 8008e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e8c:	7e0f      	ldrb	r7, [r1, #24]
 8008e8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e90:	2f78      	cmp	r7, #120	@ 0x78
 8008e92:	4691      	mov	r9, r2
 8008e94:	4680      	mov	r8, r0
 8008e96:	460c      	mov	r4, r1
 8008e98:	469a      	mov	sl, r3
 8008e9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e9e:	d807      	bhi.n	8008eb0 <_printf_i+0x28>
 8008ea0:	2f62      	cmp	r7, #98	@ 0x62
 8008ea2:	d80a      	bhi.n	8008eba <_printf_i+0x32>
 8008ea4:	2f00      	cmp	r7, #0
 8008ea6:	f000 80d2 	beq.w	800904e <_printf_i+0x1c6>
 8008eaa:	2f58      	cmp	r7, #88	@ 0x58
 8008eac:	f000 80b9 	beq.w	8009022 <_printf_i+0x19a>
 8008eb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008eb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008eb8:	e03a      	b.n	8008f30 <_printf_i+0xa8>
 8008eba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ebe:	2b15      	cmp	r3, #21
 8008ec0:	d8f6      	bhi.n	8008eb0 <_printf_i+0x28>
 8008ec2:	a101      	add	r1, pc, #4	@ (adr r1, 8008ec8 <_printf_i+0x40>)
 8008ec4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ec8:	08008f21 	.word	0x08008f21
 8008ecc:	08008f35 	.word	0x08008f35
 8008ed0:	08008eb1 	.word	0x08008eb1
 8008ed4:	08008eb1 	.word	0x08008eb1
 8008ed8:	08008eb1 	.word	0x08008eb1
 8008edc:	08008eb1 	.word	0x08008eb1
 8008ee0:	08008f35 	.word	0x08008f35
 8008ee4:	08008eb1 	.word	0x08008eb1
 8008ee8:	08008eb1 	.word	0x08008eb1
 8008eec:	08008eb1 	.word	0x08008eb1
 8008ef0:	08008eb1 	.word	0x08008eb1
 8008ef4:	08009035 	.word	0x08009035
 8008ef8:	08008f5f 	.word	0x08008f5f
 8008efc:	08008fef 	.word	0x08008fef
 8008f00:	08008eb1 	.word	0x08008eb1
 8008f04:	08008eb1 	.word	0x08008eb1
 8008f08:	08009057 	.word	0x08009057
 8008f0c:	08008eb1 	.word	0x08008eb1
 8008f10:	08008f5f 	.word	0x08008f5f
 8008f14:	08008eb1 	.word	0x08008eb1
 8008f18:	08008eb1 	.word	0x08008eb1
 8008f1c:	08008ff7 	.word	0x08008ff7
 8008f20:	6833      	ldr	r3, [r6, #0]
 8008f22:	1d1a      	adds	r2, r3, #4
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	6032      	str	r2, [r6, #0]
 8008f28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f30:	2301      	movs	r3, #1
 8008f32:	e09d      	b.n	8009070 <_printf_i+0x1e8>
 8008f34:	6833      	ldr	r3, [r6, #0]
 8008f36:	6820      	ldr	r0, [r4, #0]
 8008f38:	1d19      	adds	r1, r3, #4
 8008f3a:	6031      	str	r1, [r6, #0]
 8008f3c:	0606      	lsls	r6, r0, #24
 8008f3e:	d501      	bpl.n	8008f44 <_printf_i+0xbc>
 8008f40:	681d      	ldr	r5, [r3, #0]
 8008f42:	e003      	b.n	8008f4c <_printf_i+0xc4>
 8008f44:	0645      	lsls	r5, r0, #25
 8008f46:	d5fb      	bpl.n	8008f40 <_printf_i+0xb8>
 8008f48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f4c:	2d00      	cmp	r5, #0
 8008f4e:	da03      	bge.n	8008f58 <_printf_i+0xd0>
 8008f50:	232d      	movs	r3, #45	@ 0x2d
 8008f52:	426d      	negs	r5, r5
 8008f54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f58:	4859      	ldr	r0, [pc, #356]	@ (80090c0 <_printf_i+0x238>)
 8008f5a:	230a      	movs	r3, #10
 8008f5c:	e011      	b.n	8008f82 <_printf_i+0xfa>
 8008f5e:	6821      	ldr	r1, [r4, #0]
 8008f60:	6833      	ldr	r3, [r6, #0]
 8008f62:	0608      	lsls	r0, r1, #24
 8008f64:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f68:	d402      	bmi.n	8008f70 <_printf_i+0xe8>
 8008f6a:	0649      	lsls	r1, r1, #25
 8008f6c:	bf48      	it	mi
 8008f6e:	b2ad      	uxthmi	r5, r5
 8008f70:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f72:	4853      	ldr	r0, [pc, #332]	@ (80090c0 <_printf_i+0x238>)
 8008f74:	6033      	str	r3, [r6, #0]
 8008f76:	bf14      	ite	ne
 8008f78:	230a      	movne	r3, #10
 8008f7a:	2308      	moveq	r3, #8
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f82:	6866      	ldr	r6, [r4, #4]
 8008f84:	60a6      	str	r6, [r4, #8]
 8008f86:	2e00      	cmp	r6, #0
 8008f88:	bfa2      	ittt	ge
 8008f8a:	6821      	ldrge	r1, [r4, #0]
 8008f8c:	f021 0104 	bicge.w	r1, r1, #4
 8008f90:	6021      	strge	r1, [r4, #0]
 8008f92:	b90d      	cbnz	r5, 8008f98 <_printf_i+0x110>
 8008f94:	2e00      	cmp	r6, #0
 8008f96:	d04b      	beq.n	8009030 <_printf_i+0x1a8>
 8008f98:	4616      	mov	r6, r2
 8008f9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f9e:	fb03 5711 	mls	r7, r3, r1, r5
 8008fa2:	5dc7      	ldrb	r7, [r0, r7]
 8008fa4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fa8:	462f      	mov	r7, r5
 8008faa:	42bb      	cmp	r3, r7
 8008fac:	460d      	mov	r5, r1
 8008fae:	d9f4      	bls.n	8008f9a <_printf_i+0x112>
 8008fb0:	2b08      	cmp	r3, #8
 8008fb2:	d10b      	bne.n	8008fcc <_printf_i+0x144>
 8008fb4:	6823      	ldr	r3, [r4, #0]
 8008fb6:	07df      	lsls	r7, r3, #31
 8008fb8:	d508      	bpl.n	8008fcc <_printf_i+0x144>
 8008fba:	6923      	ldr	r3, [r4, #16]
 8008fbc:	6861      	ldr	r1, [r4, #4]
 8008fbe:	4299      	cmp	r1, r3
 8008fc0:	bfde      	ittt	le
 8008fc2:	2330      	movle	r3, #48	@ 0x30
 8008fc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008fc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008fcc:	1b92      	subs	r2, r2, r6
 8008fce:	6122      	str	r2, [r4, #16]
 8008fd0:	f8cd a000 	str.w	sl, [sp]
 8008fd4:	464b      	mov	r3, r9
 8008fd6:	aa03      	add	r2, sp, #12
 8008fd8:	4621      	mov	r1, r4
 8008fda:	4640      	mov	r0, r8
 8008fdc:	f7ff fee6 	bl	8008dac <_printf_common>
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	d14a      	bne.n	800907a <_printf_i+0x1f2>
 8008fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe8:	b004      	add	sp, #16
 8008fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	f043 0320 	orr.w	r3, r3, #32
 8008ff4:	6023      	str	r3, [r4, #0]
 8008ff6:	4833      	ldr	r0, [pc, #204]	@ (80090c4 <_printf_i+0x23c>)
 8008ff8:	2778      	movs	r7, #120	@ 0x78
 8008ffa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	6831      	ldr	r1, [r6, #0]
 8009002:	061f      	lsls	r7, r3, #24
 8009004:	f851 5b04 	ldr.w	r5, [r1], #4
 8009008:	d402      	bmi.n	8009010 <_printf_i+0x188>
 800900a:	065f      	lsls	r7, r3, #25
 800900c:	bf48      	it	mi
 800900e:	b2ad      	uxthmi	r5, r5
 8009010:	6031      	str	r1, [r6, #0]
 8009012:	07d9      	lsls	r1, r3, #31
 8009014:	bf44      	itt	mi
 8009016:	f043 0320 	orrmi.w	r3, r3, #32
 800901a:	6023      	strmi	r3, [r4, #0]
 800901c:	b11d      	cbz	r5, 8009026 <_printf_i+0x19e>
 800901e:	2310      	movs	r3, #16
 8009020:	e7ac      	b.n	8008f7c <_printf_i+0xf4>
 8009022:	4827      	ldr	r0, [pc, #156]	@ (80090c0 <_printf_i+0x238>)
 8009024:	e7e9      	b.n	8008ffa <_printf_i+0x172>
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	f023 0320 	bic.w	r3, r3, #32
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	e7f6      	b.n	800901e <_printf_i+0x196>
 8009030:	4616      	mov	r6, r2
 8009032:	e7bd      	b.n	8008fb0 <_printf_i+0x128>
 8009034:	6833      	ldr	r3, [r6, #0]
 8009036:	6825      	ldr	r5, [r4, #0]
 8009038:	6961      	ldr	r1, [r4, #20]
 800903a:	1d18      	adds	r0, r3, #4
 800903c:	6030      	str	r0, [r6, #0]
 800903e:	062e      	lsls	r6, r5, #24
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	d501      	bpl.n	8009048 <_printf_i+0x1c0>
 8009044:	6019      	str	r1, [r3, #0]
 8009046:	e002      	b.n	800904e <_printf_i+0x1c6>
 8009048:	0668      	lsls	r0, r5, #25
 800904a:	d5fb      	bpl.n	8009044 <_printf_i+0x1bc>
 800904c:	8019      	strh	r1, [r3, #0]
 800904e:	2300      	movs	r3, #0
 8009050:	6123      	str	r3, [r4, #16]
 8009052:	4616      	mov	r6, r2
 8009054:	e7bc      	b.n	8008fd0 <_printf_i+0x148>
 8009056:	6833      	ldr	r3, [r6, #0]
 8009058:	1d1a      	adds	r2, r3, #4
 800905a:	6032      	str	r2, [r6, #0]
 800905c:	681e      	ldr	r6, [r3, #0]
 800905e:	6862      	ldr	r2, [r4, #4]
 8009060:	2100      	movs	r1, #0
 8009062:	4630      	mov	r0, r6
 8009064:	f7f7 f8d4 	bl	8000210 <memchr>
 8009068:	b108      	cbz	r0, 800906e <_printf_i+0x1e6>
 800906a:	1b80      	subs	r0, r0, r6
 800906c:	6060      	str	r0, [r4, #4]
 800906e:	6863      	ldr	r3, [r4, #4]
 8009070:	6123      	str	r3, [r4, #16]
 8009072:	2300      	movs	r3, #0
 8009074:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009078:	e7aa      	b.n	8008fd0 <_printf_i+0x148>
 800907a:	6923      	ldr	r3, [r4, #16]
 800907c:	4632      	mov	r2, r6
 800907e:	4649      	mov	r1, r9
 8009080:	4640      	mov	r0, r8
 8009082:	47d0      	blx	sl
 8009084:	3001      	adds	r0, #1
 8009086:	d0ad      	beq.n	8008fe4 <_printf_i+0x15c>
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	079b      	lsls	r3, r3, #30
 800908c:	d413      	bmi.n	80090b6 <_printf_i+0x22e>
 800908e:	68e0      	ldr	r0, [r4, #12]
 8009090:	9b03      	ldr	r3, [sp, #12]
 8009092:	4298      	cmp	r0, r3
 8009094:	bfb8      	it	lt
 8009096:	4618      	movlt	r0, r3
 8009098:	e7a6      	b.n	8008fe8 <_printf_i+0x160>
 800909a:	2301      	movs	r3, #1
 800909c:	4632      	mov	r2, r6
 800909e:	4649      	mov	r1, r9
 80090a0:	4640      	mov	r0, r8
 80090a2:	47d0      	blx	sl
 80090a4:	3001      	adds	r0, #1
 80090a6:	d09d      	beq.n	8008fe4 <_printf_i+0x15c>
 80090a8:	3501      	adds	r5, #1
 80090aa:	68e3      	ldr	r3, [r4, #12]
 80090ac:	9903      	ldr	r1, [sp, #12]
 80090ae:	1a5b      	subs	r3, r3, r1
 80090b0:	42ab      	cmp	r3, r5
 80090b2:	dcf2      	bgt.n	800909a <_printf_i+0x212>
 80090b4:	e7eb      	b.n	800908e <_printf_i+0x206>
 80090b6:	2500      	movs	r5, #0
 80090b8:	f104 0619 	add.w	r6, r4, #25
 80090bc:	e7f5      	b.n	80090aa <_printf_i+0x222>
 80090be:	bf00      	nop
 80090c0:	080094e1 	.word	0x080094e1
 80090c4:	080094f2 	.word	0x080094f2

080090c8 <memmove>:
 80090c8:	4288      	cmp	r0, r1
 80090ca:	b510      	push	{r4, lr}
 80090cc:	eb01 0402 	add.w	r4, r1, r2
 80090d0:	d902      	bls.n	80090d8 <memmove+0x10>
 80090d2:	4284      	cmp	r4, r0
 80090d4:	4623      	mov	r3, r4
 80090d6:	d807      	bhi.n	80090e8 <memmove+0x20>
 80090d8:	1e43      	subs	r3, r0, #1
 80090da:	42a1      	cmp	r1, r4
 80090dc:	d008      	beq.n	80090f0 <memmove+0x28>
 80090de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090e6:	e7f8      	b.n	80090da <memmove+0x12>
 80090e8:	4402      	add	r2, r0
 80090ea:	4601      	mov	r1, r0
 80090ec:	428a      	cmp	r2, r1
 80090ee:	d100      	bne.n	80090f2 <memmove+0x2a>
 80090f0:	bd10      	pop	{r4, pc}
 80090f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090fa:	e7f7      	b.n	80090ec <memmove+0x24>

080090fc <_sbrk_r>:
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	4d06      	ldr	r5, [pc, #24]	@ (8009118 <_sbrk_r+0x1c>)
 8009100:	2300      	movs	r3, #0
 8009102:	4604      	mov	r4, r0
 8009104:	4608      	mov	r0, r1
 8009106:	602b      	str	r3, [r5, #0]
 8009108:	f7f8 f91a 	bl	8001340 <_sbrk>
 800910c:	1c43      	adds	r3, r0, #1
 800910e:	d102      	bne.n	8009116 <_sbrk_r+0x1a>
 8009110:	682b      	ldr	r3, [r5, #0]
 8009112:	b103      	cbz	r3, 8009116 <_sbrk_r+0x1a>
 8009114:	6023      	str	r3, [r4, #0]
 8009116:	bd38      	pop	{r3, r4, r5, pc}
 8009118:	20001af0 	.word	0x20001af0

0800911c <memcpy>:
 800911c:	440a      	add	r2, r1
 800911e:	4291      	cmp	r1, r2
 8009120:	f100 33ff 	add.w	r3, r0, #4294967295
 8009124:	d100      	bne.n	8009128 <memcpy+0xc>
 8009126:	4770      	bx	lr
 8009128:	b510      	push	{r4, lr}
 800912a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800912e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009132:	4291      	cmp	r1, r2
 8009134:	d1f9      	bne.n	800912a <memcpy+0xe>
 8009136:	bd10      	pop	{r4, pc}

08009138 <_realloc_r>:
 8009138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800913c:	4680      	mov	r8, r0
 800913e:	4615      	mov	r5, r2
 8009140:	460c      	mov	r4, r1
 8009142:	b921      	cbnz	r1, 800914e <_realloc_r+0x16>
 8009144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009148:	4611      	mov	r1, r2
 800914a:	f7ff bc4b 	b.w	80089e4 <_malloc_r>
 800914e:	b92a      	cbnz	r2, 800915c <_realloc_r+0x24>
 8009150:	f7ff fbdc 	bl	800890c <_free_r>
 8009154:	2400      	movs	r4, #0
 8009156:	4620      	mov	r0, r4
 8009158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800915c:	f000 f81a 	bl	8009194 <_malloc_usable_size_r>
 8009160:	4285      	cmp	r5, r0
 8009162:	4606      	mov	r6, r0
 8009164:	d802      	bhi.n	800916c <_realloc_r+0x34>
 8009166:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800916a:	d8f4      	bhi.n	8009156 <_realloc_r+0x1e>
 800916c:	4629      	mov	r1, r5
 800916e:	4640      	mov	r0, r8
 8009170:	f7ff fc38 	bl	80089e4 <_malloc_r>
 8009174:	4607      	mov	r7, r0
 8009176:	2800      	cmp	r0, #0
 8009178:	d0ec      	beq.n	8009154 <_realloc_r+0x1c>
 800917a:	42b5      	cmp	r5, r6
 800917c:	462a      	mov	r2, r5
 800917e:	4621      	mov	r1, r4
 8009180:	bf28      	it	cs
 8009182:	4632      	movcs	r2, r6
 8009184:	f7ff ffca 	bl	800911c <memcpy>
 8009188:	4621      	mov	r1, r4
 800918a:	4640      	mov	r0, r8
 800918c:	f7ff fbbe 	bl	800890c <_free_r>
 8009190:	463c      	mov	r4, r7
 8009192:	e7e0      	b.n	8009156 <_realloc_r+0x1e>

08009194 <_malloc_usable_size_r>:
 8009194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009198:	1f18      	subs	r0, r3, #4
 800919a:	2b00      	cmp	r3, #0
 800919c:	bfbc      	itt	lt
 800919e:	580b      	ldrlt	r3, [r1, r0]
 80091a0:	18c0      	addlt	r0, r0, r3
 80091a2:	4770      	bx	lr

080091a4 <_init>:
 80091a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a6:	bf00      	nop
 80091a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091aa:	bc08      	pop	{r3}
 80091ac:	469e      	mov	lr, r3
 80091ae:	4770      	bx	lr

080091b0 <_fini>:
 80091b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b2:	bf00      	nop
 80091b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091b6:	bc08      	pop	{r3}
 80091b8:	469e      	mov	lr, r3
 80091ba:	4770      	bx	lr
